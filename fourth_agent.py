#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–ì–ï–ù–¢ ‚Ññ4 ‚Äî –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä + OpenAI —Ä–µ–∑–µ—Ä–≤ (—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ .env)
"""

import json
import redis
import time
import re
from typing import Dict, Any, List
from datetime import datetime
from openai import OpenAI

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import (
    OPENAI_API_KEY,
    get_redis_config,
    QUEUE_AGENT_4_INPUT,
    QUEUE_AGENT_4_OUTPUT,
    QUEUE_AGENT_5_INPUT,
    AGENT_PORTS,
    DEFAULT_RULES,
    setup_logging
)

# ============================================================================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ============================================================================
logger = setup_logging("–ê–ì–ï–ù–¢ 4")

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø OPENAI
# ============================================================================
client = OpenAI(api_key=OPENAI_API_KEY)

# ============================================================================
# –≠–í–†–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê –ò –ü–ê–¢–¢–ï–†–ù–´
# ============================================================================

# –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–Ω—ã—Ö –∏ —Ç–æ–∫—Å–∏—á–Ω—ã—Ö —Å–ª–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
PROFANITY_PATTERNS = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
    r'\b(—Ö—É–π|—Ö—É—è|—Ö—É—ë|—Ö—É–∏|—Ö—É—é)\b',
    r'\b(–ø–∏–∑–¥[–∞–µ–∏–æ—É]|–ø–∏–∑–¥–µ—Ü|–ø–∏–∑–¥—ë–∂)\b', 
    r'\b(–µ–±–∞—Ç—å|–µ–±–∞–ª|–µ–±—ë—Ç|–µ–±—É—Ç|–µ–±–∞–ª–∏|–µ–±–∞–Ω—ã–π|–µ–±—É—á–∏–π)\b',
    r'\b(—Å—É–∫–∞|—Å—É–∫–∏|—Å—É—á–∫–∞|—Å—É—á–∏–π)\b',
    r'\b(–±–ª—è–¥—å|–±–ª—è—Ç—å|–±–ª—è|–±–ª–µ—è)\b',
    r'\b(–¥–æ–ª–±–æ—ë–±|–¥–æ–ª–±–∞—ë–±|–º—É–¥–∞–∫|–º—É–¥–∏–ª–∞)\b',
    r'\b(–ø–∏–¥–æ—Ä|–ø–∏–¥–∞—Ä|–ø–∏–¥—Ä|–≥–æ–º–∏–∫)\b',
    r'\b(–≥–æ–≤–Ω–æ|–≥–æ–≤–Ω—é–∫|–≥–æ–≤–Ω—è—à–∫–∞)\b',
    
    # –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
    r'\b(–¥—É—Ä–∞–∫|–¥—É—Ä–∞|–¥–µ–±–∏–ª|–∏–¥–∏–æ—Ç|—Ç—É–ø–æ–π|—Ç—É–ø–∏—Ü–∞)\b',
    r'\b(–∫—Ä–µ—Ç–∏–Ω|–ø—Ä–∏–¥—É—Ä–æ–∫|–¥—É–Ω–¥—É–∫|–±–∞–ª–±–µ—Å)\b',
    r'\b(—É—Ä–æ–¥|—É—Ä–æ–¥–∏–Ω–∞|—É–µ–±–æ–∫|—É—ë–±–æ–∫)\b',
    r'\b(—Ç–≤–∞—Ä—å|—Å–≤–æ–ª–æ—á—å|–≥–∞–¥|–ø–∞–¥–ª–∞)\b',
    
    # –í–∞—Ä–∏–∞—Ü–∏–∏ —Å –∑–∞–º–µ–Ω–æ–π –±—É–∫–≤
    r'\b(—Ö[—Éy][–πi]|–ø[–∏i][–∑s][–¥d]|[–µe]–±[–∞a])\b',
    r'\b(—Å[—Éy]–∫[–∞a]|–±–ª[—èy][–¥d]—å?)\b',
]

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã
SPAM_PATTERNS = [
    # –ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
    r'\b(–ø–µ—Ä–µ—Ö–æ–¥–∏|–∫–ª–∏–∫–∞–π|–∂–º–∏|–Ω–∞–∂–∏–º–∞–π|–≤—Å—Ç—É–ø–∞–π|–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è)\b',
    r'\b(–∑–∞—Ö–æ–¥–∏|—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è|—Å–∫–∞—á–∏–≤–∞–π|–ø–æ–∫—É–ø–∞–π)\b',
    
    # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    r'\b(—Å–∫–∏–¥–∫–∞|–∞–∫—Ü–∏—è|—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞|–¥–µ—à–µ–≤–æ|–≤—ã–≥–æ–¥–Ω–æ)\b',
    r'\b(–∑–∞—Ä–∞–±–æ—Ç–æ–∫|–¥–æ—Ö–æ–¥|–ø—Ä–∏–±—ã–ª—å|–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)\b',
    r'\b(–ø—Ä–æ–¥–∞–º|–∫—É–ø–ª—é|–æ–±–º–µ–Ω|—Ç–æ—Ä–≥–æ–≤–ª—è)\b',
    
    # –°—Å—ã–ª–∫–∏ –∏ –∫–∞–Ω–∞–ª—ã (—Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º v2.0)
    r'@[a-zA-Z0-9_]+',  # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    r't\.me/[a-zA-Z0-9_]+',  # Telegram —Å—Å—ã–ª–∫–∏
    r'https?://[^\s]+',  # HTTP —Å—Å—ã–ª–∫–∏
    r'www\.[^\s]+',  # –í–µ–±-—Å–∞–π—Ç—ã
    
    # –≠–º–æ–¥–∑–∏ —Å–ø–∞–º
    r'[üì¢üì£üéâüí∞üî•‚ö°]{3,}',  # 3+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏
]

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º v2.0)
DISCRIMINATION_PATTERNS = [
    # –†–∞—Å–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    r'\b(–Ω–µ–≥—Ä|–Ω–∏–≥–≥–µ—Ä|—á–µ—Ä–Ω–æ–∂–æ–ø|—á—É—Ä–∫–∞|—Ö–∞—á|—Ö–æ—Ö–æ–ª)\b',
    r'\b(–∂–∏–¥|–µ–≤—Ä–µ–π[–∞-—è]*\s*(–ø–ª–æ—Ö–æ|—Ö—É–π–æ–≤–æ))\b',
    r'\b(—Ü—ã–≥–∞–Ω|—Ü—ã–≥–∞–Ω—ë|—Ü—ã–≥–∞–Ω–∫–∞)\s*[–∞-—è]*\b',
    r'\b(—É–∑–∫–æ–≥–ª—è–∑|–∫–æ—Å–æ–≥–ª–∞–∑|—Ä–∞—Å–∫–æ—Å—ã–π)\b',
    
    # –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è  
    r'\b(–º–æ—Å–∫–∞–ª—å|–∫–∞—Ü–∞–ø|–±–∞–Ω–¥–µ—Ä–∞|—É–∫—Ä–æ–ø)\b',
    r'\b(—á—É—Ä–±–∞–Ω|–ª–∏—Ü–æ –∫–∞–≤–∫–∞–∑—Å–∫–æ–π –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)\b',
    r'\b(–∞–∑–∏–∞—Ç|—É–∑–±–µ–∫|—Ç–∞–¥–∂–∏–∫|–∫–∏—Ä–≥–∏–∑)\s+[–∞-—è]*\b',
    
    # –û–±–æ–±—â–∞—é—â–∏–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è
    r'–≤—Å–µ\s+(–µ–≤—Ä–µ–∏|–Ω–µ–≥—Ä—ã|—Ü—ã–≥–∞–Ω–µ|[–∞-—è]+—ã)\s+(–ø–ª–æ—Ö–∏–µ|–≤–æ—Ä—ã|–¥—É—Ä–∞–∫–∏)',
    r'—ç—Ç–∏\s+(—á–µ—Ä–Ω—ã–µ|–∂–µ–ª—Ç—ã–µ|–±–µ–ª—ã–µ)\s+–¥–æ–ª–∂–Ω—ã',
]

# –§–ª—É–¥ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
FLOOD_PATTERNS = [
    r'(.)\1{10,}',  # 10+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥
    r'([–∞-—è—ë])\1{5,}',  # 5+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
    r'[!]{5,}|[?]{5,}|[.]{5,}',  # 5+ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
]

# ============================================================================
# –≠–í–†–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó
# ============================================================================
def check_profanity(message: str) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É"""
    message_lower = message.lower()
    violations = []
    
    for pattern in PROFANITY_PATTERNS:
        matches = re.findall(pattern, message_lower, re.IGNORECASE)
        if matches:
            violations.extend(matches)
    
    if violations:
        confidence = min(0.9, 0.6 + len(violations) * 0.1)  # 60-90%
        return True, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞: {', '.join(set(violations))}", confidence
    
    return False, "", 0.0

def check_spam(message: str) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º—É"""
    message_lower = message.lower()
    violations = []
    
    for pattern in SPAM_PATTERNS:
        matches = re.findall(pattern, message_lower, re.IGNORECASE)
        if matches:
            violations.extend(matches)
    
    if violations:
        confidence = min(0.85, 0.5 + len(violations) * 0.1)  # 50-85%
        return True, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞: {', '.join(set(violations))}", confidence
    
    return False, "", 0.0

def check_discrimination(message: str) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—é (—Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º v2.0)"""
    message_lower = message.lower()
    violations = []
    
    for pattern in DISCRIMINATION_PATTERNS:
        matches = re.findall(pattern, message_lower, re.IGNORECASE)
        if matches:
            violations.extend(matches)
    
    if violations:
        confidence = min(0.95, 0.7 + len(violations) * 0.1)  # 70-95%
        return True, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è: {', '.join(set(violations))}", confidence
    
    return False, "", 0.0

def check_flood(message: str) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥"""
    violations = []
    
    for pattern in FLOOD_PATTERNS:
        matches = re.findall(pattern, message, re.IGNORECASE)
        if matches:
            violations.extend(matches)
    
    if violations:
        confidence = 0.75  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ñ–ª—É–¥–∞
        return True, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª—É–¥: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã", confidence
    
    return False, "", 0.0

def heuristic_analysis(message: str, rules: List[str]) -> dict:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ v2.0
    """
    violations = []
    max_confidence = 0.0
    main_reason = ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∏–¥—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π
    checks = [
        check_profanity(message),
        check_spam(message), 
        check_discrimination(message),
        check_flood(message)
    ]
    
    for has_violation, reason, confidence in checks:
        if has_violation:
            violations.append(reason)
            if confidence > max_confidence:
                max_confidence = confidence
                main_reason = reason
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    if violations:
        verdict = "–±–∞–Ω–∏—Ç—å"
        confidence_percent = int(max_confidence * 100)
        combined_reason = f"–í–µ—Ä–¥–∏–∫—Ç: {verdict}\n–ü—Ä–∏—á–∏–Ω–∞: {main_reason}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_percent}%"
        
        return {
            "ban": True,
            "reason": combined_reason,
            "confidence": max_confidence,
            "method": "—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
            "violations_count": len(violations),
            "all_violations": violations
        }
    else:
        return {
            "ban": False,
            "reason": "–í–µ—Ä–¥–∏–∫—Ç: –Ω–µ –±–∞–Ω–∏—Ç—å\n–ü—Ä–∏—á–∏–Ω–∞: –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 80%",
            "confidence": 0.8,
            "method": "—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
            "violations_count": 0,
            "all_violations": []
        }

# ============================================================================
# OPENAI –†–ï–ó–ï–†–í–ù–´–ô –ê–ù–ê–õ–ò–ó (—Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º v2.0)
# ============================================================================
def openai_fallback_analysis(message: str, rules: List[str]) -> dict:
    """
    –†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º v2.0
    """
    try:
        # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        if not rules:
            rules = DEFAULT_RULES
        
        rules_text = "\n".join([f"{i+1}. {rule}" for i, rule in enumerate(rules)])
        
        system_msg = f"""–¢—ã ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤–∏–ª–∞–º. –ü–æ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤—ã–Ω–æ—Å–∏ –≤–µ—Ä–¥–∏–∫—Ç: ¬´–±–∞–Ω–∏—Ç—å¬ª –∏–ª–∏ ¬´–Ω–µ –±–∞–Ω–∏—Ç—å¬ª, —É–∫–∞–∑—ã–≤–∞—è –ø—Ä–∏—á–∏–Ω—É —Ä–µ—à–µ–Ω–∏—è –∏ —Å—Ç–µ–ø–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.

–ü–†–ê–í–ò–õ–ê –ß–ê–¢–ê:
{rules_text}

–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
–í–µ—Ä–¥–∏–∫—Ç: <–±–∞–Ω–∏—Ç—å/–Ω–µ –±–∞–Ω–∏—Ç—å>
–ü—Ä–∏—á–∏–Ω–∞: <—Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã>
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100>%

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
2. –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –≤ –æ—Ü–µ–Ω–∫–µ
3. –£–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É —Ä–µ—à–µ–Ω–∏—è
4. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –æ—Ç—Ä–∞–∂–∞—Ç—å —Å—Ç–µ–ø–µ–Ω—å –Ω–∞—Ä—É—à–µ–Ω–∏—è (0-100%)

–≠—Ç–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        
        user_msg = f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\"{message}\""
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            temperature=0.1,
            max_tokens=300
        )
        
        content = response.choices[0].message.content
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        content_lower = content.lower()
        
        # –ò—â–µ–º –≤–µ—Ä–¥–∏–∫—Ç
        ban = False
        if "–≤–µ—Ä–¥–∏–∫—Ç:" in content_lower:
            verdict_line = [line for line in content.split('\n') if '–≤–µ—Ä–¥–∏–∫—Ç:' in line.lower()]
            if verdict_line:
                verdict_text = verdict_line[0].lower()
                if "–±–∞–Ω–∏—Ç—å" in verdict_text and "–Ω–µ –±–∞–Ω–∏—Ç—å" not in verdict_text:
                    ban = True
        
        # –ò—â–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = 0.6  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:" in content_lower:
            confidence_line = [line for line in content.split('\n') if '—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:' in line.lower()]
            if confidence_line:
                try:
                    import re
                    numbers = re.findall(r'\d+', confidence_line[0])
                    if numbers:
                        confidence = int(numbers[0]) / 100.0
                        confidence = min(1.0, max(0.0, confidence))
                except:
                    confidence = 0.6
        
        return {
            "ban": ban,
            "reason": content,
            "confidence": confidence,
            "method": "OpenAI —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "ai_response": True
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return {
            "ban": False,
            "reason": f"–í–µ—Ä–¥–∏–∫—Ç: –Ω–µ –±–∞–Ω–∏—Ç—å\n–ü—Ä–∏—á–∏–Ω–∞: –û—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞: {e}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 0%",
            "confidence": 0.0,
            "method": "–æ—à–∏–±–∫–∞ OpenAI",
            "ai_response": False
        }

# ============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–ì–ï–ù–¢–ê 4
# ============================================================================
def moderation_agent_4(input_data):
    """
    –ê–ì–ï–ù–¢ 4 ‚Äî –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä + OpenAI —Ä–µ–∑–µ—Ä–≤ (v2.0).
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äî OpenAI.
    """
    message = input_data.get("message", "")
    rules = input_data.get("rules", [])
    user_id = input_data.get("user_id")
    username = input_data.get("username")
    chat_id = input_data.get("chat_id")
    message_id = input_data.get("message_id")
    message_link = input_data.get("message_link", "")
    
    logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} –≤ —á–∞—Ç–µ {chat_id}")
    
    if not message:
        return {
            "agent_id": 4,
            "ban": False,
            "reason": "–í–µ—Ä–¥–∏–∫—Ç: –Ω–µ –±–∞–Ω–∏—Ç—å\n–ü—Ä–∏—á–∏–Ω–∞: –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 0%",
            "confidence": 0,
            "message": "",
            "user_id": user_id,
            "username": username,
            "chat_id": chat_id,
            "message_id": message_id,
            "status": "error"
        }
    
    # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
    if not rules:
        rules = DEFAULT_RULES
        logger.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ v2.0")
    
    # –°–Ω–∞—á–∞–ª–∞ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    heuristic_result = heuristic_analysis(message, rules)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ OpenAI —Ä–µ–∑–µ—Ä–≤
    use_openai_fallback = False
    
    if heuristic_result["confidence"] < 0.7:  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        use_openai_fallback = True
        logger.info(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ ({heuristic_result['confidence']:.2f}), –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI —Ä–µ–∑–µ—Ä–≤")
    elif not heuristic_result["ban"] and any(keyword in message.lower() for keyword in ['—Å–ª–æ–∂–Ω—ã–π', '–Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π', '—Å–ø–æ—Ä–Ω—ã–π']):
        use_openai_fallback = True
        logger.info("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI —Ä–µ–∑–µ—Ä–≤")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º OpenAI —Ä–µ–∑–µ—Ä–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if use_openai_fallback:
        openai_result = openai_fallback_analysis(message, rules)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É OpenAI –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ)
        if openai_result["confidence"] > heuristic_result["confidence"]:
            final_result = openai_result
            final_result["method"] = f"OpenAI —Ä–µ–∑–µ—Ä–≤ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞: {heuristic_result['confidence']:.2f})"
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω OpenAI —Ä–µ–∑–µ—Ä–≤ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {openai_result['confidence']:.2f})")
        else:
            final_result = heuristic_result
            final_result["fallback_attempted"] = True
            logger.info(f"–û—Å—Ç–∞–ª—Å—è —Å —ç–≤—Ä–∏—Å—Ç–∏–∫–æ–π (OpenAI: {openai_result['confidence']:.2f})")
    else:
        final_result = heuristic_result
        final_result["fallback_attempted"] = False
        logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {heuristic_result['confidence']:.2f})")
    
    output = {
        "agent_id": 4,
        "ban": final_result["ban"],
        "reason": final_result["reason"],
        "confidence": final_result["confidence"],
        "message": message,
        "user_id": user_id,
        "username": username,
        "chat_id": chat_id,
        "message_id": message_id,
        "message_link": message_link,
        "method": final_result["method"],
        "rules_used": rules,
        "status": "success",
        "timestamp": datetime.now().isoformat()
    }
    
    if final_result["ban"]:
        logger.warning(f"–ë–ê–ù ‚õî –¥–ª—è @{username}: {final_result['confidence']*100:.0f}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ({final_result['method']})")
    else:
        logger.info(f"–û–ö ‚úÖ –¥–ª—è @{username}: {final_result['confidence']*100:.0f}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ({final_result['method']})")
    
    return output

# ============================================================================
# –†–ê–ë–û–¢–ê –° REDIS –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –ú–ï–ñ–î–£ –ê–ì–ï–ù–¢–ê–ú–ò
# ============================================================================
class Agent4Worker:
    def __init__(self):
        try:
            redis_config = get_redis_config()
            self.redis_client = redis.Redis(**redis_config)
            self.redis_client.ping()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
            raise
    
    def process_message(self, message_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ö–æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏"""
        try:
            input_data = json.loads(message_data)
            result = moderation_agent_4(input_data)
            return result
        except json.JSONDecodeError as e:
            logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")
            return {
                "agent_id": 4,
                "ban": False,
                "reason": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}",
                "confidence": 0,
                "message": "",
                "status": "json_error"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                "agent_id": 4,
                "ban": False,
                "reason": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ 4: {e}",
                "confidence": 0,
                "message": "",
                "status": "error"
            }
    
    def send_result(self, result):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤—ã—Ö–æ–¥–Ω—É—é –æ—á–µ—Ä–µ–¥—å"""
        try:
            result_json = json.dumps(result, ensure_ascii=False)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å –ê–≥–µ–Ω—Ç–∞ 4
            self.redis_client.rpush(QUEUE_AGENT_4_OUTPUT, result_json)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å –ê–≥–µ–Ω—Ç–∞ 5
            self.redis_client.rpush(QUEUE_AGENT_5_INPUT, result_json)
            
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏")
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {e}")
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç 4 –∑–∞–ø—É—â–µ–Ω (–≠–≤—Ä–∏—Å—Ç–∏–∫–∞ + OpenAI —Ä–µ–∑–µ—Ä–≤ v4.3 —Å .env)")
        logger.info(f"   –°–ª—É—à–∞—é –æ—á–µ—Ä–µ–¥—å: {QUEUE_AGENT_4_INPUT}")
        logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {QUEUE_AGENT_4_OUTPUT}")
        logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –ê–≥–µ–Ω—Ç–∞ 5: {QUEUE_AGENT_5_INPUT}")
        logger.info(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ v2.0: {DEFAULT_RULES}")
        logger.info("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        try:
            while True:
                try:
                    result = self.redis_client.blpop(QUEUE_AGENT_4_INPUT, timeout=1)
                    if result is None:
                        continue
                    
                    queue_name, message_data = result
                    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    
                    output = self.process_message(message_data)
                    self.send_result(output)
                    
                    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                    time.sleep(1)
                    
        except KeyboardInterrupt:
            logger.info("\n‚ùå –ê–≥–µ–Ω—Ç 4 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Ctrl+C)")
        finally:
            logger.info("–ê–≥–µ–Ω—Ç 4 –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

# ============================================================================
# HEALTH CHECK ENDPOINT
# ============================================================================
def create_health_check_server():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–∞"""
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import threading
    
    class HealthCheckHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health':
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                health_info = {
                    "status": "online",
                    "agent_id": 4,
                    "name": "–ê–≥–µ–Ω—Ç ‚Ññ4 (–≠–≤—Ä–∏—Å—Ç–∏–∫–∞ + OpenAI)",
                    "version": "4.3 (.env)",
                    "ai_provider": "–≠–≤—Ä–∏—Å—Ç–∏–∫–∞ + OpenAI API —Ä–µ–∑–µ—Ä–≤",
                    "prompt_version": "v2.0 - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç",
                    "configuration": "Environment variables (.env)",
                    "default_rules": DEFAULT_RULES,
                    "heuristic_patterns": {
                        "profanity": len(PROFANITY_PATTERNS),
                        "spam": len(SPAM_PATTERNS),
                        "discrimination": len(DISCRIMINATION_PATTERNS),
                        "flood": len(FLOOD_PATTERNS)
                    },
                    "timestamp": datetime.now().isoformat(),
                    "redis_queue": QUEUE_AGENT_4_INPUT,
                    "uptime_seconds": int(time.time())
                }
                self.wfile.write(json.dumps(health_info, ensure_ascii=False).encode())
            else:
                self.send_response(404)
                self.end_headers()
        
        def log_message(self, format, *args):
            # –ü–æ–¥–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
            pass
    
    server = HTTPServer(('localhost', AGENT_PORTS[4]), HealthCheckHandler)
    thread = threading.Thread(target=server.serve_forever, daemon=True)
    thread.start()
    logger.info(f"‚úÖ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {AGENT_PORTS[4]}")

# ============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ============================================================================
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        mode = sys.argv[1]
        if mode == "test":
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º v2.0
            test_cases = [
                {
                    "message": "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?",
                    "rules": [],
                    "description": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                },
                {
                    "message": "–¢—ã –¥—É—Ä–∞–∫ –∏ –∏–¥–∏–æ—Ç! –•—É–π —Ç–µ–±–µ!",
                    "rules": DEFAULT_RULES,
                    "description": "–ú–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è"
                },
                {
                    "message": "–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ t.me/spam_channel! –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –æ—Ç 100$ –≤ –¥–µ–Ω—å!",
                    "rules": DEFAULT_RULES,
                    "description": "–°–ø–∞–º —Å —Å—Å—ã–ª–∫–æ–π"
                },
                {
                    "message": "–í—Å–µ —ç—Ç–∏ –Ω–µ–≥—Ä—ã –¥–æ–ª–∂–Ω—ã —É–±–∏—Ä–∞—Ç—å—Å—è –æ—Ç—Å—é–¥–∞!",
                    "rules": DEFAULT_RULES,
                    "description": "–†–∞—Å–æ–≤–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è"
                }
            ]
            
            for i, test_case in enumerate(test_cases, 1):
                print(f"\n--- –¢–µ—Å—Ç {i}: {test_case['description']} ---")
                
                test_input = {
                    "message": test_case["message"],
                    "rules": test_case["rules"],
                    "user_id": 123 + i,
                    "username": f"test_user_{i}",
                    "chat_id": -100,
                    "message_id": i,
                    "message_link": f"https://t.me/test/{i}"
                }
                
                result = moderation_agent_4(test_input)
                
                print(f"–í–µ—Ä–¥–∏–∫—Ç: {'–ë–ê–ù' if result['ban'] else '–û–ö'}")
                print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']*100:.0f}%")
                print(f"–ú–µ—Ç–æ–¥: {result.get('method', 'N/A')}")
                print(f"–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")
                
    else:
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            create_health_check_server()
            worker = Agent4Worker()
            worker.run()
        except KeyboardInterrupt:
            logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")