#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–ì–ï–ù–¢ ‚Ññ5 ‚Äî –ê—Ä–±–∏—Ç—Ä –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ agent3.4)
"""

import requests
import json
import redis
import time
import logging
from typing import Dict, Any, List, Optional
import urllib3
from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, ForeignKey, BigInteger, Text
from sqlalchemy.orm import declarative_base, sessionmaker, relationship
import asyncio
from dataclasses import dataclass
from enum import Enum

# –û—Ç–∫–ª—é—á–∞–µ–º warning SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ============================================================================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ============================================================================
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [–ê–ì–ï–ù–¢ 5] %(levelname)s: %(message)s'
)
logger = logging.getLogger(__name__)

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–î (–û–î–ò–ù–ê–ö–û–í–ê–Ø –° –ê–ì–ï–ù–¢–û–ú 3.4)
# ============================================================================
POSTGRES_URL = 'postgresql://tguser:mnvm7110@176.108.248.211:5432/teleguard_db?sslmode=disable'

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø TELEGRAM BOT
# ============================================================================
TELEGRAM_BOT_TOKEN = "8320009669:AAHiVLu-Em8EOXBNHYrJ0UhVX3mMMTm8S_g"
TELEGRAM_API_URL = "https://api.telegram.org/bot"

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø REDIS
# ============================================================================
REDIS_HOST = "localhost"
REDIS_PORT = 6379
REDIS_DB = 0
REDIS_PASSWORD = None

# –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
QUEUE_AGENT_5_INPUT = "queue:agent5:input"
QUEUE_AGENT_3_OUTPUT = "queue:agent3:output"
QUEUE_AGENT_4_OUTPUT = "queue:agent4:output"

# ============================================================================
# –ú–û–î–ï–õ–ò –ë–î (–¢–û–ß–ù–û –¢–ï –ñ–ï –ß–¢–û –í –ê–ì–ï–ù–¢–ï 3.4)
# ============================================================================
Base = declarative_base()

class Chat(Base):
    __tablename__ = 'chats'
    id = Column(Integer, primary_key=True)
    tg_chat_id = Column(String, unique=True, nullable=False)
    title = Column(String, nullable=True)
    chat_type = Column(String, default='group')
    added_at = Column(DateTime, default=datetime.utcnow)
    is_active = Column(Boolean, default=True)
    
    messages = relationship('Message', back_populates='chat', cascade="all, delete")
    moderators = relationship('Moderator', back_populates='chat', cascade="all, delete")
    negative_messages = relationship('NegativeMessage', back_populates='chat', cascade="all, delete")

class Message(Base):
    __tablename__ = 'messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    message_id = Column(BigInteger, nullable=False)
    sender_username = Column(String)
    sender_id = Column(BigInteger)
    message_text = Column(Text)
    message_link = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)
    processed_at = Column(DateTime)
    ai_response = Column(Text)
    
    chat = relationship('Chat', back_populates='messages')

class Moderator(Base):
    __tablename__ = 'moderators'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    username = Column(String)
    telegram_user_id = Column(BigInteger)
    is_active = Column(Boolean, default=True)
    added_at = Column(DateTime, default=datetime.utcnow)
    
    chat = relationship('Chat', back_populates='moderators')

class NegativeMessage(Base):
    __tablename__ = 'negative_messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    message_link = Column(String)
    sender_username = Column(String)
    sender_id = Column(BigInteger)
    negative_reason = Column(Text)
    is_sent_to_moderators = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    agent_id = Column(Integer)
    
    chat = relationship('Chat', back_populates='negative_messages')

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î –ò REDIS
# ============================================================================
engine = create_engine(POSTGRES_URL)
Base.metadata.create_all(engine)
SessionLocal = sessionmaker(bind=engine)

def get_db_session():
    return SessionLocal()

# ============================================================================
# –ö–õ–ê–°–°–´ –î–ê–ù–ù–´–• –î–õ–Ø –ê–†–ë–ò–¢–†–ê–ñ–ê
# ============================================================================
class VerdictType(Enum):
    APPROVE = "approve"
    BAN = "ban"
    UNCERTAIN = "uncertain"

@dataclass
class AgentVerdict:
    agent_id: int
    ban: bool
    reason: str
    confidence: float
    timestamp: datetime
    
    def to_verdict_type(self) -> VerdictType:
        return VerdictType.BAN if self.ban else VerdictType.APPROVE

@dataclass
class Agent5Decision:
    decision_id: str
    message_id: int
    chat_id: int
    user_id: int
    username: str
    message_text: str
    final_verdict: VerdictType
    confidence: float
    reasoning: str
    agent3_verdict: VerdictType
    agent4_verdict: VerdictType
    was_conflict: bool
    timestamp: datetime

# ============================================================================
# –ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê
# ============================================================================
class ModerationArbiter:
    """
    –ê—Ä–±–∏—Ç—Ä –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ 3 –∏ 4
    """
    
    def __init__(self):
        self.processed_count = 0
    
    def has_conflict(self, agent3: AgentVerdict, agent4: AgentVerdict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –µ—Å–ª–∏ –≤–µ—Ä–¥–∏–∫—Ç—ã —Ä–∞–∑–Ω—ã–µ –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è
        verdicts_differ = agent3.ban != agent4.ban
        low_confidence = agent3.confidence < 0.7 or agent4.confidence < 0.7
        return verdicts_differ or low_confidence
    
    def resolve_conflict(self, agent3: AgentVerdict, agent4: AgentVerdict, message_text: str) -> tuple:
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        logger.info("üîç –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏...")
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        weight3 = agent3.confidence
        weight4 = agent4.confidence
        
        # –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –¥—Ä—É–≥–æ–≥–æ
        if weight3 > 0.8 and weight4 < 0.6:
            verdict = VerdictType.BAN if agent3.ban else VerdictType.APPROVE
            confidence = agent3.confidence * 0.9
            reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ê–≥–µ–Ω—Ç–∞ ‚Ññ3 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {weight3:.2f}). {agent3.reason}"
        elif weight4 > 0.8 and weight3 < 0.6:
            verdict = VerdictType.BAN if agent4.ban else VerdictType.APPROVE
            confidence = agent4.confidence * 0.9
            reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ê–≥–µ–Ω—Ç–∞ ‚Ññ4 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {weight4:.2f}). {agent4.reason}"
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            spam_keywords = ['–∫—É–ø–∏—Ç—å', '—Å–∫–∏–¥–∫–∞', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∫–ª–∏–∫–∞–π', '–ø–µ—Ä–µ—Ö–æ–¥–∏', '–≤—Å—Ç—É–ø–∞–π']
            toxic_keywords = ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '–Ω–µ–Ω–∞–≤–∏–∂—É', '—Ö—É–π', '–±–ª—è—Ç—å', '—Å—É–∫–∞']
            
            message_lower = message_text.lower()
            spam_count = sum(1 for keyword in spam_keywords if keyword in message_lower)
            toxic_count = sum(1 for keyword in toxic_keywords if keyword in message_lower)
            
            if toxic_count > 0:
                verdict = VerdictType.BAN
                confidence = 0.75
                reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–æ–∫—Å–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞ ({toxic_count})"
            elif spam_count >= 2:
                verdict = VerdictType.BAN
                confidence = 0.70
                reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º: –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Å–ø–∞–º ({spam_count} —Å–ø–∞–º-–º–∞—Ä–∫–µ—Ä–æ–≤)"
            else:
                verdict = VerdictType.APPROVE
                confidence = 0.65
                reasoning = "–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º: —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º"
        
        logger.info(f"‚öñÔ∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω: {verdict.value} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        return verdict, confidence, reasoning
    
    def make_decision(self, agent3_data: Dict[str, Any], agent4_data: Dict[str, Any]) -> Agent5Decision:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        # –ü–∞—Ä—Å–∏–º –≤–µ—Ä–¥–∏–∫—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
        agent3 = AgentVerdict(
            agent_id=agent3_data.get("agent_id", 3),
            ban=agent3_data.get("ban", False),
            reason=agent3_data.get("reason", ""),
            confidence=agent3_data.get("confidence", 0.5),
            timestamp=datetime.now()
        )
        
        agent4 = AgentVerdict(
            agent_id=agent4_data.get("agent_id", 4),
            ban=agent4_data.get("ban", False),
            reason=agent4_data.get("reason", ""),
            confidence=agent4_data.get("confidence", 0.5),
            timestamp=datetime.now()
        )
        
        logger.info(f"ü§î –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤: Agent3={'–ë–ê–ù' if agent3.ban else '–ù–ï –ë–ê–ù–ò–¢–¨'} ({agent3.confidence:.2f}), "
                   f"Agent4={'–ë–ê–ù' if agent4.ban else '–ù–ï –ë–ê–ù–ò–¢–¨'} ({agent4.confidence:.2f})")
        
        has_conflict = self.has_conflict(agent3, agent4)
        
        if not has_conflict:
            # –í–µ—Ä–¥–∏–∫—Ç—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã
            final_verdict = VerdictType.BAN if agent3.ban else VerdictType.APPROVE
            confidence = (agent3.confidence + agent4.confidence) / 2
            reasoning = (
                f"–ê–≥–µ–Ω—Ç—ã ‚Ññ3 –∏ ‚Ññ4 —Å–æ–≥–ª–∞—Å–Ω—ã. –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}. "
                f"Agent3: {agent3.reason}. Agent4: {agent4.reason}."
            )
            logger.info("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –Ω–µ—Ç, –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        else:
            # –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏!")
            final_verdict, confidence, reasoning = self.resolve_conflict(
                agent3, agent4, agent3_data.get("message", "")
            )
        
        decision_id = f"decision_{agent3_data.get('message_id', 0)}_{int(datetime.now().timestamp())}"
        
        decision = Agent5Decision(
            decision_id=decision_id,
            message_id=agent3_data.get("message_id", 0),
            chat_id=agent3_data.get("chat_id", 0),
            user_id=agent3_data.get("user_id", 0),
            username=agent3_data.get("username", ""),
            message_text=agent3_data.get("message", ""),
            final_verdict=final_verdict,
            confidence=confidence,
            reasoning=reasoning,
            agent3_verdict=agent3.to_verdict_type(),
            agent4_verdict=agent4.to_verdict_type(),
            was_conflict=has_conflict,
            timestamp=datetime.now()
        )
        
        self.processed_count += 1
        return decision

# ============================================================================
# –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ú–û–î–ï–†–ê–¢–û–†–û–í
# ============================================================================
def send_notification_to_moderators(decision: Agent5Decision, db_session):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –æ –ø—Ä–∏–Ω—è—Ç–æ–º —Ä–µ—à–µ–Ω–∏–∏"""
    if decision.final_verdict != VerdictType.BAN:
        return True  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
        chat = db_session.query(Chat).filter_by(tg_chat_id=str(decision.chat_id)).first()
        if not chat:
            logger.warning(f"‚ö†Ô∏è –ß–∞—Ç {decision.chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return False
        
        moderators = db_session.query(Moderator).filter_by(
            chat_id=chat.id, 
            is_active=True
        ).all()
        
        if not moderators:
            logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —á–∞—Ç–∞ {decision.chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = (
            f"üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ!</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {decision.username}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {decision.message_text[:200]}{'...' if len(decision.message_text) > 200 else ''}\n"
            f"‚öñÔ∏è <b>–†–µ—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ 5:</b> {decision.final_verdict.value.upper()}\n"
            f"üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {decision.confidence:.1%}\n"
            f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {decision.reasoning[:300]}{'...' if len(decision.reasoning) > 300 else ''}\n"
            f"ü§ñ <b>Agent3:</b> {decision.agent3_verdict.value}, <b>Agent4:</b> {decision.agent4_verdict.value}\n"
            f"‚ö° <b>–ö–æ–Ω—Ñ–ª–∏–∫—Ç:</b> {'–î–∞' if decision.was_conflict else '–ù–µ—Ç'}\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {decision.timestamp.strftime('%H:%M:%S')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
        success_count = 0
        for moderator in moderators:
            if moderator.telegram_user_id:
                try:
                    url = f"{TELEGRAM_API_URL}{TELEGRAM_BOT_TOKEN}/sendMessage"
                    data = {
                        'chat_id': moderator.telegram_user_id,
                        'text': notification,
                        'parse_mode': 'HTML'
                    }
                    
                    response = requests.post(url, json=data, timeout=10)
                    if response.status_code == 200:
                        success_count += 1
                        logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É @{moderator.username}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.text}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count}/{len(moderators)} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º")
        return success_count > 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return False

# ============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–ì–ï–ù–¢–ê 5
# ============================================================================
def moderation_agent_5(agent3_data: Dict[str, Any], agent4_data: Dict[str, Any], db_session):
    """
    –ê–ì–ï–ù–¢ 5 ‚Äî –ê—Ä–±–∏—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    """
    arbiter = ModerationArbiter()
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
    decision = arbiter.make_decision(agent3_data, agent4_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å
    if decision.final_verdict == VerdictType.BAN:
        try:
            chat = db_session.query(Chat).filter_by(tg_chat_id=str(decision.chat_id)).first()
            if chat:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
                negative_msgs = db_session.query(NegativeMessage).filter_by(
                    chat_id=chat.id,
                    sender_username=decision.username,
                    is_sent_to_moderators=False
                ).all()
                
                for msg in negative_msgs:
                    msg.is_sent_to_moderators = True
                
                db_session.commit()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    notification_sent = send_notification_to_moderators(decision, db_session)
    
    output = {
        "agent_id": 5,
        "decision_id": decision.decision_id,
        "final_verdict": decision.final_verdict.value,
        "ban": decision.final_verdict == VerdictType.BAN,
        "confidence": decision.confidence,
        "reasoning": decision.reasoning,
        "message": decision.message_text,
        "user_id": decision.user_id,
        "username": decision.username,
        "chat_id": decision.chat_id,
        "message_id": decision.message_id,
        "agent3_verdict": decision.agent3_verdict.value,
        "agent4_verdict": decision.agent4_verdict.value,
        "was_conflict": decision.was_conflict,
        "notification_sent": notification_sent,
        "status": "success",
        "timestamp": decision.timestamp.isoformat()
    }
    
    if decision.final_verdict == VerdictType.BAN:
        logger.warning(f"üö® –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ë–ê–ù –¥–ª—è @{decision.username}")
    else:
        logger.info(f"‚úÖ –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ù–ï –ë–ê–ù–ò–¢–¨ @{decision.username}")
    
    return output

# ============================================================================
# –†–ê–ë–û–¢–ê –° REDIS
# ============================================================================
class Agent5Worker:
    def __init__(self):
        try:
            redis_config = {
                "host": REDIS_HOST,
                "port": REDIS_PORT,
                "db": REDIS_DB,
                "password": REDIS_PASSWORD,
                "decode_responses": True
            }
            self.redis_client = redis.Redis(**redis_config)
            self.redis_client.ping()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ: {REDIS_HOST}:{REDIS_PORT}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
            raise
        
        self.pending_decisions = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤
    
    def process_agent_result(self, message_data, db_session):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ 3 –∏–ª–∏ 4"""
        try:
            agent_data = json.loads(message_data)
            agent_id = agent_data.get("agent_id")
            message_id = agent_data.get("message_id")
            
            if not message_id:
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç message_id –≤ –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞
            if message_id not in self.pending_decisions:
                self.pending_decisions[message_id] = {}
            
            self.pending_decisions[message_id][f"agent_{agent_id}"] = agent_data
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ #{agent_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –æ–±–æ–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
            decision_data = self.pending_decisions[message_id]
            if "agent_3" in decision_data and "agent_4" in decision_data:
                # –ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –æ–±–æ–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ - –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
                logger.info(f"üéØ –ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –æ–±–æ–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
                
                agent3_data = decision_data["agent_3"]
                agent4_data = decision_data["agent_4"]
                
                final_decision = moderation_agent_5(agent3_data, agent4_data, db_session)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
                del self.pending_decisions[message_id]
                
                return final_decision
                
            else:
                logger.info(f"‚è≥ –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
                return None
                
        except json.JSONDecodeError as e:
            logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
            return None
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç 5 –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"   –°–ª—É—à–∞—é –æ—á–µ—Ä–µ–¥—å: {QUEUE_AGENT_5_INPUT}")
        logger.info("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        db_session = None
        try:
            while True:
                try:
                    result = self.redis_client.blpop(QUEUE_AGENT_5_INPUT, timeout=1)
                    if result is None:
                        continue
                    
                    queue_name, message_data = result
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    db_session = get_db_session()
                    output = self.process_agent_result(message_data, db_session)
                    db_session.close()
                    
                    if output:
                        logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ\n")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                    if db_session:
                        db_session.close()
                    time.sleep(1)
                    
        except KeyboardInterrupt:
            logger.info("\n‚ùå –ê–≥–µ–Ω—Ç 5 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Ctrl+C)")
        finally:
            if db_session:
                db_session.close()
            logger.info("–ê–≥–µ–Ω—Ç 5 –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

# ============================================================================
# HEALTH CHECK ENDPOINT
# ============================================================================
def create_health_check_server():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–∞"""
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import threading
    
    class HealthCheckHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health':
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                health_info = {
                    "status": "online",
                    "agent_id": 5,
                    "name": "–ê–≥–µ–Ω—Ç ‚Ññ5 (–ê—Ä–±–∏—Ç—Ä)",
                    "version": "5.0",
                    "timestamp": datetime.now().isoformat(),
                    "redis_queue": QUEUE_AGENT_5_INPUT,
                    "uptime_seconds": int(time.time())
                }
                self.wfile.write(json.dumps(health_info, ensure_ascii=False).encode())
            else:
                self.send_response(404)
                self.end_headers()
        
        def log_message(self, format, *args):
            # –ü–æ–¥–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
            pass
    
    server = HTTPServer(('localhost', 8005), HealthCheckHandler)
    thread = threading.Thread(target=server.serve_forever, daemon=True)
    thread.start()
    logger.info("‚úÖ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8005")

# ============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ============================================================================
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        mode = sys.argv[1]
        if mode == "test":
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            agent3_data = {
                "agent_id": 3,
                "ban": True,
                "reason": "–í–µ—Ä–¥–∏–∫—Ç: –¥–∞. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–µ —Å–ª–æ–≤–æ",
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º",
                "user_id": 123,
                "username": "test_user",
                "chat_id": -100,
                "message_id": 1,
                "confidence": 0.85
            }
            
            agent4_data = {
                "agent_id": 4,
                "ban": False,
                "reason": "–í–µ—Ä–¥–∏–∫—Ç: –Ω–µ—Ç. –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º",
                "user_id": 123,
                "username": "test_user", 
                "chat_id": -100,
                "message_id": 1,
                "confidence": 0.70
            }
            
            db_session = get_db_session()
            result = moderation_agent_5(agent3_data, agent4_data, db_session)
            db_session.close()
            print(json.dumps(result, ensure_ascii=False, indent=2))
    else:
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            create_health_check_server()
            worker = Agent5Worker()
            worker.run()
        except KeyboardInterrupt:
            logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")