#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–ì–ï–ù–¢ ‚Ññ5 ‚Äî –ê—Ä–±–∏—Ç—Ä –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (Mistral AI –≤–µ—Ä—Å–∏—è)
"""

import json
import redis
import time
from typing import Dict, Any, List, Optional
from datetime import datetime
from dataclasses import dataclass
from enum import Enum
import requests
from mistralai.client import MistralClient
from mistralai.models.chat_completion import ChatMessage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import (
    MISTRAL_API_KEY,
    MISTRAL_MODEL,
    MISTRAL_GENERATION_PARAMS,
    TELEGRAM_BOT_TOKEN,
    TELEGRAM_API_URL,
    get_redis_config,
    QUEUE_AGENT_5_INPUT,
    AGENT_PORTS,
    DEFAULT_RULES,
    setup_logging
)

# ============================================================================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ============================================================================
logger = setup_logging("–ê–ì–ï–ù–¢ 5")

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø MISTRAL AI
# ============================================================================
mistral_client = MistralClient(api_key=MISTRAL_API_KEY)

# ============================================================================
# –ö–õ–ê–°–°–´ –î–ê–ù–ù–´–• –î–õ–Ø –ê–†–ë–ò–¢–†–ê–ñ–ê
# ============================================================================
class VerdictType(Enum):
    APPROVE = "approve"
    BAN = "ban"
    UNCERTAIN = "uncertain"

@dataclass
class AgentVerdict:
    agent_id: int
    ban: bool
    reason: str
    confidence: float
    timestamp: datetime
    
    def to_verdict_type(self) -> VerdictType:
        return VerdictType.BAN if self.ban else VerdictType.APPROVE

@dataclass
class Agent5Decision:
    decision_id: str
    message_id: int
    chat_id: int
    user_id: int
    username: str
    message_text: str
    final_verdict: VerdictType
    confidence: float
    reasoning: str
    agent3_verdict: VerdictType
    agent4_verdict: VerdictType
    was_conflict: bool
    timestamp: datetime

# ============================================================================
# –ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê –° MISTRAL AI (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢)
# ============================================================================
class ModerationArbiter:
    """
    –ê—Ä–±–∏—Ç—Ä –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ 3 –∏ 4 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Mistral AI
    """
    
    def __init__(self):
        self.processed_count = 0
    
    def has_conflict(self, agent3: AgentVerdict, agent4: AgentVerdict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –µ—Å–ª–∏ –≤–µ—Ä–¥–∏–∫—Ç—ã —Ä–∞–∑–Ω—ã–µ –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è
        verdicts_differ = agent3.ban != agent4.ban
        low_confidence = agent3.confidence < 0.7 or agent4.confidence < 0.7
        return verdicts_differ or low_confidence
    
    def resolve_conflict_with_mistral(self, agent3: AgentVerdict, agent4: AgentVerdict, message_text: str, rules: list) -> tuple:
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ —Å –ø–æ–º–æ—â—å—é Mistral AI (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç)"""
        logger.info("ü§ñ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é Mistral AI...")
        
        try:
            # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            if not rules:
                rules = DEFAULT_RULES
            
            rules_text = "\n".join([f"{i+1}. {rule}" for i, rule in enumerate(rules)])
            
            system_message = f"""–¢—ã ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤–∏–ª–∞–º. –ü–æ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤—ã–Ω–æ—Å–∏ –≤–µ—Ä–¥–∏–∫—Ç: ¬´–±–∞–Ω–∏—Ç—å¬ª –∏–ª–∏ ¬´–Ω–µ –±–∞–Ω–∏—Ç—å¬ª, —É–∫–∞–∑—ã–≤–∞—è –ø—Ä–∏—á–∏–Ω—É —Ä–µ—à–µ–Ω–∏—è –∏ —Å—Ç–µ–ø–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.

–ü–†–ê–í–ò–õ–ê –ß–ê–¢–ê:
{rules_text}

–î–≤–∞ –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–∞ –¥–∞–ª–∏ —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä–¥–∏–∫—Ç—ã –ø–æ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é:

–ê–ì–ï–ù–¢ 3 (Mistral AI –º–æ–¥–µ—Ä–∞—Ç–æ—Ä):
- –†–µ—à–µ–Ω–∏–µ: {"–±–∞–Ω–∏—Ç—å" if agent3.ban else "–Ω–µ –±–∞–Ω–∏—Ç—å"}  
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {agent3.confidence*100:.0f}%
- –ü—Ä–∏—á–∏–Ω–∞: {agent3.reason}

–ê–ì–ï–ù–¢ 4 (–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä):
- –†–µ—à–µ–Ω–∏–µ: {"–±–∞–Ω–∏—Ç—å" if agent4.ban else "–Ω–µ –±–∞–Ω–∏—Ç—å"}
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {agent4.confidence*100:.0f}%  
- –ü—Ä–∏—á–∏–Ω–∞: {agent4.reason}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.

–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
–í–µ—Ä–¥–∏–∫—Ç: <–±–∞–Ω–∏—Ç—å/–Ω–µ –±–∞–Ω–∏—Ç—å>
–ü—Ä–∏—á–∏–Ω–∞: <—Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã>
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100>%"""
            
            user_message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\"{message_text}\""
            
            messages = [
                ChatMessage(role="system", content=system_message),
                ChatMessage(role="user", content=user_message)
            ]
            
            response = mistral_client.chat(
                model=MISTRAL_MODEL,
                messages=messages,
                temperature=MISTRAL_GENERATION_PARAMS["temperature"],
                max_tokens=MISTRAL_GENERATION_PARAMS["max_tokens"],
                top_p=MISTRAL_GENERATION_PARAMS["top_p"]
            )
            
            content = response.choices[0].message.content
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            content_lower = content.lower()
            
            # –ò—â–µ–º –≤–µ—Ä–¥–∏–∫—Ç
            if "–≤–µ—Ä–¥–∏–∫—Ç:" in content_lower:
                verdict_line = [line for line in content.split('\n') if '–≤–µ—Ä–¥–∏–∫—Ç:' in line.lower()]
                if verdict_line:
                    verdict_text = verdict_line[0].lower()
                    if "–±–∞–Ω–∏—Ç—å" in verdict_text and "–Ω–µ –±–∞–Ω–∏—Ç—å" not in verdict_text:
                        verdict = VerdictType.BAN
                        confidence = 0.8
                    else:
                        verdict = VerdictType.APPROVE
                        confidence = 0.75
                else:
                    verdict = VerdictType.APPROVE
                    confidence = 0.65
            else:
                verdict = VerdictType.APPROVE
                confidence = 0.65
            
            # –ò—â–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:" in content_lower:
                confidence_line = [line for line in content.split('\n') if '—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:' in line.lower()]
                if confidence_line:
                    try:
                        import re
                        numbers = re.findall(r'\d+', confidence_line[0])
                        if numbers:
                            confidence = int(numbers[0]) / 100.0
                            confidence = min(1.0, max(0.0, confidence))
                    except:
                        pass
            
            reasoning = f"Mistral AI –∞—Ä–±–∏—Ç—Ä: {content}"
            
            logger.info(f"ü§ñ Mistral AI –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ: {verdict.value} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            return verdict, confidence, reasoning
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Mistral AI –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            # Fallback –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ Mistral AI
            return self.resolve_conflict_fallback(agent3, agent4, message_text)
    
    def resolve_conflict_fallback(self, agent3: AgentVerdict, agent4: AgentVerdict, message_text: str) -> tuple:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –±–µ–∑ Mistral AI"""
        logger.info("üîç –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)...")
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        weight3 = agent3.confidence
        weight4 = agent4.confidence
        
        # –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –¥—Ä—É–≥–æ–≥–æ
        if weight3 > 0.8 and weight4 < 0.6:
            verdict = VerdictType.BAN if agent3.ban else VerdictType.APPROVE
            confidence = agent3.confidence * 0.9
            reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ê–≥–µ–Ω—Ç–∞ ‚Ññ3 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {weight3:.2f}). {agent3.reason}"
        elif weight4 > 0.8 and weight3 < 0.6:
            verdict = VerdictType.BAN if agent4.ban else VerdictType.APPROVE
            confidence = agent4.confidence * 0.9
            reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ê–≥–µ–Ω—Ç–∞ ‚Ññ4 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {weight4:.2f}). {agent4.reason}"
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            spam_keywords = ['–∫—É–ø–∏—Ç—å', '—Å–∫–∏–¥–∫–∞', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∫–ª–∏–∫–∞–π', '–ø–µ—Ä–µ—Ö–æ–¥–∏', '–≤—Å—Ç—É–ø–∞–π']
            toxic_keywords = ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '–Ω–µ–Ω–∞–≤–∏–∂—É', '—Ö—É–π', '–±–ª—è—Ç—å', '—Å—É–∫–∞']
            
            message_lower = message_text.lower()
            spam_count = sum(1 for keyword in spam_keywords if keyword in message_lower)
            toxic_count = sum(1 for keyword in toxic_keywords if keyword in message_lower)
            
            if toxic_count > 0:
                verdict = VerdictType.BAN
                confidence = 0.75
                reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–æ–∫—Å–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞ ({toxic_count})"
            elif spam_count >= 2:
                verdict = VerdictType.BAN
                confidence = 0.70
                reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º: –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Å–ø–∞–º ({spam_count} —Å–ø–∞–º-–º–∞—Ä–∫–µ—Ä–æ–≤)"
            else:
                verdict = VerdictType.APPROVE
                confidence = 0.65
                reasoning = "–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º: —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º"
        
        logger.info(f"‚öñÔ∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω: {verdict.value} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        return verdict, confidence, reasoning
    
    def make_decision(self, agent3_data: Dict[str, Any], agent4_data: Dict[str, Any]) -> Agent5Decision:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        # –ü–∞—Ä—Å–∏–º –≤–µ—Ä–¥–∏–∫—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
        agent3 = AgentVerdict(
            agent_id=agent3_data.get("agent_id", 3),
            ban=agent3_data.get("ban", False),
            reason=agent3_data.get("reason", ""),
            confidence=agent3_data.get("confidence", 0.5),
            timestamp=datetime.now()
        )
        
        agent4 = AgentVerdict(
            agent_id=agent4_data.get("agent_id", 4),
            ban=agent4_data.get("ban", False),
            reason=agent4_data.get("reason", ""),
            confidence=agent4_data.get("confidence", 0.5),
            timestamp=datetime.now()
        )
        
        logger.info(f"ü§î –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤: Agent3={'–ë–ê–ù' if agent3.ban else '–ù–ï –ë–ê–ù–ò–¢–¨'} ({agent3.confidence:.2f}), "
                   f"Agent4={'–ë–ê–ù' if agent4.ban else '–ù–ï –ë–ê–ù–ò–¢–¨'} ({agent4.confidence:.2f})")
        
        has_conflict = self.has_conflict(agent3, agent4)
        
        if not has_conflict:
            # –í–µ—Ä–¥–∏–∫—Ç—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã
            final_verdict = VerdictType.BAN if agent3.ban else VerdictType.APPROVE
            confidence = (agent3.confidence + agent4.confidence) / 2
            reasoning = (
                f"–ê–≥–µ–Ω—Ç—ã ‚Ññ3 –∏ ‚Ññ4 —Å–æ–≥–ª–∞—Å–Ω—ã. –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}. "
                f"Agent3: {agent3.reason}. Agent4: {agent4.reason}."
            )
            logger.info("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –Ω–µ—Ç, –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        else:
            # –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º Mistral AI –∞—Ä–±–∏—Ç—Ä —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏!")
            rules = agent3_data.get("rules", []) or agent4_data.get("rules", [])
            final_verdict, confidence, reasoning = self.resolve_conflict_with_mistral(
                agent3, agent4, agent3_data.get("message", ""), rules
            )
        
        decision_id = f"decision_{agent3_data.get('message_id', 0)}_{int(datetime.now().timestamp())}"
        
        decision = Agent5Decision(
            decision_id=decision_id,
            message_id=agent3_data.get("message_id", 0),
            chat_id=agent3_data.get("chat_id", 0),
            user_id=agent3_data.get("user_id", 0),
            username=agent3_data.get("username", ""),
            message_text=agent3_data.get("message", ""),
            final_verdict=final_verdict,
            confidence=confidence,
            reasoning=reasoning,
            agent3_verdict=agent3.to_verdict_type(),
            agent4_verdict=agent4.to_verdict_type(),
            was_conflict=has_conflict,
            timestamp=datetime.now()
        )
        
        self.processed_count += 1
        return decision

# ============================================================================
# –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ú–û–î–ï–†–ê–¢–û–†–û–í
# ============================================================================
def send_notification_to_moderators(decision: Agent5Decision) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –æ –ø—Ä–∏–Ω—è—Ç–æ–º —Ä–µ—à–µ–Ω–∏–∏"""
    if decision.final_verdict != VerdictType.BAN:
        return True  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = (
            f"üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ —á–∞—Ç–µ!</b>\n\n"
            f"üí¨ <b>–ß–∞—Ç ID:</b> {decision.chat_id}\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {decision.username}\n"
            f"üìÑ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {decision.message_text[:200]}{'...' if len(decision.message_text) > 200 else ''}\n"
            f"‚öñÔ∏è <b>–†–µ—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ 5:</b> {decision.final_verdict.value.upper()}\n"
            f"üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {decision.confidence:.1%}\n"
            f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {decision.reasoning[:300]}{'...' if len(decision.reasoning) > 300 else ''}\n"
            f"ü§ñ <b>Agent3:</b> {decision.agent3_verdict.value}, <b>Agent4:</b> {decision.agent4_verdict.value}\n"
            f"‚ö° <b>–ö–æ–Ω—Ñ–ª–∏–∫—Ç:</b> {'–î–∞' if decision.was_conflict else '–ù–µ—Ç'}\n"
            f"üß† <b>–ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä:</b> Mistral AI ({MISTRAL_MODEL})\n"
            f"‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b> Environment variables (.env)\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {decision.timestamp.strftime('%H:%M:%S')}"
        )
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –ë–î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ª–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞ {decision.chat_id}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

# ============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–ì–ï–ù–¢–ê 5
# ============================================================================
def moderation_agent_5(agent3_data: Dict[str, Any], agent4_data: Dict[str, Any]):
    """
    –ê–ì–ï–ù–¢ 5 ‚Äî –ê—Ä–±–∏—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å Mistral AI (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç)
    """
    arbiter = ModerationArbiter()
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
    decision = arbiter.make_decision(agent3_data, agent4_data)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    notification_sent = send_notification_to_moderators(decision)
    
    output = {
        "agent_id": 5,
        "decision_id": decision.decision_id,
        "final_verdict": decision.final_verdict.value,
        "ban": decision.final_verdict == VerdictType.BAN,
        "confidence": decision.confidence,
        "reasoning": decision.reasoning,
        "message": decision.message_text,
        "user_id": decision.user_id,
        "username": decision.username,
        "chat_id": decision.chat_id,
        "message_id": decision.message_id,
        "agent3_verdict": decision.agent3_verdict.value,
        "agent4_verdict": decision.agent4_verdict.value,
        "was_conflict": decision.was_conflict,
        "notification_sent": notification_sent,
        "ai_provider": f"Mistral AI ({MISTRAL_MODEL})",
        "prompt_version": "v2.0 - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
        "configuration": "Environment variables (.env)",
        "status": "success",
        "timestamp": decision.timestamp.isoformat()
    }
    
    if decision.final_verdict == VerdictType.BAN:
        logger.warning(f"üö® –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï (Mistral AI): –ë–ê–ù –¥–ª—è @{decision.username} –≤ —á–∞—Ç–µ {decision.chat_id}")
    else:
        logger.info(f"‚úÖ –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï (Mistral AI): –ù–ï –ë–ê–ù–ò–¢–¨ @{decision.username} –≤ —á–∞—Ç–µ {decision.chat_id}")
    
    return output

# ============================================================================
# –†–ê–ë–û–¢–ê –° REDIS
# ============================================================================
class Agent5Worker:
    def __init__(self):
        try:
            redis_config = get_redis_config()
            self.redis_client = redis.Redis(**redis_config)
            self.redis_client.ping()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
            raise
        
        self.pending_decisions = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤
    
    def process_agent_result(self, message_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ 3 –∏–ª–∏ 4"""
        try:
            agent_data = json.loads(message_data)
            agent_id = agent_data.get("agent_id")
            message_id = agent_data.get("message_id")
            
            if not message_id:
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç message_id –≤ –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞
            if message_id not in self.pending_decisions:
                self.pending_decisions[message_id] = {}
            
            self.pending_decisions[message_id][f"agent_{agent_id}"] = agent_data
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ #{agent_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –æ–±–æ–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
            decision_data = self.pending_decisions[message_id]
            if "agent_3" in decision_data and "agent_4" in decision_data:
                # –ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –æ–±–æ–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ - –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
                logger.info(f"üéØ –ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –æ–±–æ–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
                
                agent3_data = decision_data["agent_3"]
                agent4_data = decision_data["agent_4"]
                
                final_decision = moderation_agent_5(agent3_data, agent4_data)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
                del self.pending_decisions[message_id]
                
                return final_decision
                
            else:
                logger.info(f"‚è≥ –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
                return None
                
        except json.JSONDecodeError as e:
            logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
            return None
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç 5 –∑–∞–ø—É—â–µ–Ω (Mistral AI –∞—Ä–±–∏—Ç—Ä v5.4)")
        logger.info(f"   –ú–æ–¥–µ–ª—å: {MISTRAL_MODEL}")
        logger.info(f"   –°–ª—É—à–∞—é –æ—á–µ—Ä–µ–¥—å: {QUEUE_AGENT_5_INPUT}")
        logger.info(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ v2.0: {DEFAULT_RULES}")
        logger.info(f"   –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä: Mistral AI")
        logger.info("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        try:
            while True:
                try:
                    result = self.redis_client.blpop(QUEUE_AGENT_5_INPUT, timeout=1)
                    if result is None:
                        continue
                    
                    queue_name, message_data = result
                    
                    output = self.process_agent_result(message_data)
                    
                    if output:
                        logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ\n")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                    time.sleep(1)
                    
        except KeyboardInterrupt:
            logger.info("\n‚ùå –ê–≥–µ–Ω—Ç 5 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Ctrl+C)")
        finally:
            logger.info("–ê–≥–µ–Ω—Ç 5 –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

# ============================================================================
# HEALTH CHECK ENDPOINT
# ============================================================================
def create_health_check_server():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–∞"""
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import threading
    
    class HealthCheckHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health':
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                health_info = {
                    "status": "online",
                    "agent_id": 5,
                    "name": "–ê–≥–µ–Ω—Ç ‚Ññ5 (–ê—Ä–±–∏—Ç—Ä Mistral AI)",
                    "version": "5.4 (Mistral)",
                    "ai_provider": f"Mistral AI ({MISTRAL_MODEL})",
                    "prompt_version": "v2.0 - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                    "configuration": "Environment variables (.env)",
                    "default_rules": DEFAULT_RULES,
                    "timestamp": datetime.now().isoformat(),
                    "redis_queue": QUEUE_AGENT_5_INPUT,
                    "uptime_seconds": int(time.time())
                }
                self.wfile.write(json.dumps(health_info, ensure_ascii=False).encode())
            else:
                self.send_response(404)
                self.end_headers()
        
        def log_message(self, format, *args):
            # –ü–æ–¥–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
            pass
    
    server = HTTPServer(('localhost', AGENT_PORTS[5]), HealthCheckHandler)
    thread = threading.Thread(target=server.serve_forever, daemon=True)
    thread.start()
    logger.info(f"‚úÖ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {AGENT_PORTS[5]}")

# ============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ============================================================================
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        mode = sys.argv[1]
        if mode == "test":
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            agent3_data = {
                "agent_id": 3,
                "ban": True,
                "reason": "–í–µ—Ä–¥–∏–∫—Ç: –±–∞–Ω–∏—Ç—å\n–ü—Ä–∏—á–∏–Ω–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–µ —Å–ª–æ–≤–æ\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 85%",
                "confidence": 0.85,
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º",
                "user_id": 123,
                "username": "test_user",
                "chat_id": -100,
                "message_id": 1,
                "rules": DEFAULT_RULES
            }
            
            agent4_data = {
                "agent_id": 4,
                "ban": False,
                "reason": "–í–µ—Ä–¥–∏–∫—Ç: –Ω–µ –±–∞–Ω–∏—Ç—å\n–ü—Ä–∏—á–∏–Ω–∞: –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 70%",
                "confidence": 0.70,
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º",
                "user_id": 123,
                "username": "test_user", 
                "chat_id": -100,
                "message_id": 1,
                "rules": DEFAULT_RULES
            }
            
            result = moderation_agent_5(agent3_data, agent4_data)
            print(json.dumps(result, ensure_ascii=False, indent=2))
    else:
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            create_health_check_server()
            worker = Agent5Worker()
            worker.run()
        except KeyboardInterrupt:
            logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")