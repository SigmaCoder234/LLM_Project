#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
=============================================================================
–ß–ê–¢-–ê–ì–ï–ù–¢ ‚Ññ5 —Å PostgreSQL - –ê—Ä–±–∏—Ç—Ä –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
=============================================================================
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª–∏ –ë–î –∏–∑ first_agent.py –∏ teteguard_bot.py
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PostgreSQL —á–µ—Ä–µ–∑ SQLAlchemy ORM
- –ê—Ä–±–∏—Ç—Ä–∞–∂ —Ä–µ—à–µ–Ω–∏–π –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ 3 –∏ 4
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
=============================================================================
"""

import asyncio
import json
import os
import uuid
from dataclasses import dataclass, asdict
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

import aiohttp
from loguru import logger

# SQLAlchemy imports - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –º–æ–¥–µ–ª–∏ —á—Ç–æ –∏ –≤ –ø–µ—Ä–≤–æ–º –∞–≥–µ–Ω—Ç–µ
from sqlalchemy import create_engine, select
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.orm import sessionmaker
from sqlalchemy.sql import func

# –û–±—â–∏–µ –º–æ–¥–µ–ª–∏ –ë–î - —Ç–µ –∂–µ —á—Ç–æ –≤ first_agent.py –∏ teteguard_bot.py
from sqlalchemy import Column, Integer, BigInteger, String, Text, Boolean, ForeignKey, DateTime, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

class Chat(Base):
    __tablename__ = "chats"
    id = Column(Integer, primary_key=True)
    tg_chat_id = Column(String, unique=True, nullable=False)
    messages = relationship('Message', back_populates='chat', cascade="all, delete")
    moderators = relationship('Moderator', back_populates='chat', cascade="all, delete")
    negative_messages = relationship('NegativeMessage', back_populates='chat', cascade="all, delete")

class Message(Base):
    __tablename__ = "messages"
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    sender_username = Column(String)
    sender_id = Column(BigInteger)
    message_text = Column(String)
    message_link = Column(String)
    created_at = Column(DateTime, default=func.now())
    chat = relationship('Chat', back_populates='messages')

class Moderator(Base):
    __tablename__ = "moderators"
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    username = Column(String)
    telegram_user_id = Column(BigInteger)
    is_active = Column(Boolean, default=True)
    chat = relationship('Chat', back_populates='moderators')

class NegativeMessage(Base):
    __tablename__ = "negative_messages"
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    message_link = Column(String)
    sender_username = Column(String)
    negative_reason = Column(String)
    is_sent_to_moderators = Column(Boolean, default=False)
    created_at = Column(DateTime, default=func.now())
    chat = relationship('Chat', back_populates='negative_messages')

# =========================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =========================
from pathlib import Path
Path("logs").mkdir(exist_ok=True)

logger.remove()
logger.add(
    "logs/agent_5_{time:YYYY-MM-DD}.log",
    rotation="1 day",
    retention="30 days",
    level="INFO",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name}:{function}:{line} | {message}"
)
logger.add(lambda msg: print(msg, end=""), level="INFO", format="{time:HH:mm:ss} | {level} | {message}")

# =========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =========================
class Agent5Config:
    # PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —Ç–µ –∂–µ —á—Ç–æ –≤ teteguard_bot.py
    POSTGRES_HOST = "176.108.248.211"
    POSTGRES_PORT = 5432
    POSTGRES_DB = "teleguard_db"
    POSTGRES_USER = "tguser"
    POSTGRES_PASSWORD = "mnvm7110"
    
    # Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    TELEGRAM_BOT_TOKEN = "8320009669:AAHiVLu-Em8EOXBNHYrJ0UhVX3mMMTm8S_g"
    TELEGRAM_API_URL = "https://api.telegram.org/bot"
    
    @property
    def database_url(self) -> str:
        return f"postgresql+asyncpg://{self.POSTGRES_USER}:{self.POSTGRES_PASSWORD}@{self.POSTGRES_HOST}:{self.POSTGRES_PORT}/{self.POSTGRES_DB}"
    
    @property
    def sync_database_url(self) -> str:
        return f"postgresql://{self.POSTGRES_USER}:{self.POSTGRES_PASSWORD}@{self.POSTGRES_HOST}:{self.POSTGRES_PORT}/{self.POSTGRES_DB}"

# =========================
# –ö–ª–∞—Å—Å—ã –¥–∞–Ω–Ω—ã—Ö
# =========================
class VerdictType(Enum):
    """–¢–∏–ø—ã –≤–µ—Ä–¥–∏–∫—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    APPROVE = "approve"
    REJECT = "reject"
    WARNING = "warning"
    BAN = "ban"
    UNCERTAIN = "uncertain"

@dataclass
class AgentVerdict:
    """–í–µ—Ä–¥–∏–∫—Ç –æ—Ç –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (‚Ññ3 –∏–ª–∏ ‚Ññ4)"""
    agent_id: int
    ban: bool
    reason: str
    confidence: float
    timestamp: datetime
    
    def to_verdict_type(self) -> VerdictType:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ VerdictType"""
        if self.ban:
            return VerdictType.BAN
        else:
            return VerdictType.APPROVE

@dataclass
class Agent5Decision:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞ ‚Ññ5"""
    decision_id: str
    message_id: int
    chat_id: int
    user_id: int
    username: str
    message_text: str
    final_verdict: VerdictType
    confidence: float
    reasoning: str
    agent3_verdict: VerdictType
    agent4_verdict: VerdictType
    was_conflict: bool
    timestamp: datetime

    def to_dict(self) -> Dict[str, Any]:
        return {
            'decision_id': self.decision_id,
            'message_id': self.message_id,
            'chat_id': self.chat_id,
            'user_id': self.user_id,
            'username': self.username,
            'message_text': self.message_text,
            'final_verdict': self.final_verdict.value,
            'confidence': self.confidence,
            'reasoning': self.reasoning,
            'agent3_verdict': self.agent3_verdict.value,
            'agent4_verdict': self.agent4_verdict.value,
            'was_conflict': self.was_conflict,
            'timestamp': self.timestamp.isoformat()
        }

# =========================
# Database Manager
# =========================
class Agent5DatabaseManager:
    def __init__(self, config: Agent5Config):
        self.config = config
        self.engine = None
        self.async_session_factory = None
    
    async def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            sync_engine = create_engine(self.config.sync_database_url, echo=False)
            Base.metadata.create_all(sync_engine)
            sync_engine.dispose()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ PostgreSQL
            self.engine = create_async_engine(
                self.config.database_url,
                echo=False,
                future=True,
                pool_pre_ping=True,
                pool_recycle=3600
            )
            
            self.async_session_factory = async_sessionmaker(
                self.engine,
                class_=AsyncSession,
                expire_on_commit=False
            )
            
            logger.success(f"üóÑÔ∏è –ê–≥–µ–Ω—Ç 5: PostgreSQL –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –ê–≥–µ–Ω—Ç 5: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PostgreSQL: {e}")
            raise
    
    async def close_database(self):
        if self.engine:
            await self.engine.dispose()
            logger.info("üóÑÔ∏è –ê–≥–µ–Ω—Ç 5: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")
    
    def get_session(self) -> AsyncSession:
        if not self.async_session_factory:
            raise RuntimeError("PostgreSQL database not initialized")
        return self.async_session_factory()
    
    async def get_chat_moderators(self, chat_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞"""
        try:
            async with self.get_session() as session:
                # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º chat –ø–æ tg_chat_id
                chat_result = await session.execute(
                    select(Chat).where(Chat.tg_chat_id == str(chat_id))
                )
                chat = chat_result.scalar_one_or_none()
                
                if not chat:
                    logger.warning(f"‚ö†Ô∏è –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    return []
                
                # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
                moderators_result = await session.execute(
                    select(Moderator).where(
                        Moderator.chat_id == chat.id,
                        Moderator.is_active == True
                    )
                )
                
                moderators = moderators_result.scalars().all()
                
                return [
                    {
                        "id": mod.id,
                        "username": mod.username,
                        "telegram_user_id": mod.telegram_user_id
                    }
                    for mod in moderators
                ]
        except Exception as e:
            logger.error(f"‚ùå –ê–≥–µ–Ω—Ç 5: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return []
    
    async def save_negative_message(self, decision: Agent5Decision) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î"""
        if decision.final_verdict != VerdictType.BAN:
            return False
        
        try:
            async with self.get_session() as session:
                # –ù–∞–π–¥–µ–º chat
                chat_result = await session.execute(
                    select(Chat).where(Chat.tg_chat_id == str(decision.chat_id))
                )
                chat = chat_result.scalar_one_or_none()
                
                if not chat:
                    # –°–æ–∑–¥–∞–µ–º —á–∞—Ç, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    chat = Chat(tg_chat_id=str(decision.chat_id))
                    session.add(chat)
                    await session.flush()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                existing_result = await session.execute(
                    select(NegativeMessage).where(
                        NegativeMessage.chat_id == chat.id,
                        NegativeMessage.sender_username == decision.username
                    )
                )
                existing = existing_result.scalar_one_or_none()
                
                if not existing:
                    negative_msg = NegativeMessage(
                        chat_id=chat.id,
                        message_link=f"chat_id:{decision.chat_id}/message_id:{decision.message_id}",
                        sender_username=decision.username,
                        negative_reason=decision.reasoning,
                        is_sent_to_moderators=False
                    )
                    
                    session.add(negative_msg)
                    await session.commit()
                    logger.success(f"üíæ –ê–≥–µ–Ω—Ç 5: –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
                    return True
                
                return False
        except Exception as e:
            logger.error(f"‚ùå –ê–≥–µ–Ω—Ç 5: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

# =========================
# Telegram Notifier
# =========================
class TelegramNotifier:
    def __init__(self, config: Agent5Config):
        self.config = config
        self.http_session: Optional[aiohttp.ClientSession] = None
    
    async def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏"""
        timeout = aiohttp.ClientTimeout(total=30)
        self.http_session = aiohttp.ClientSession(timeout=timeout)
        logger.info("üì° Telegram Notifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.http_session:
            await self.http_session.close()
            logger.info("üì° Telegram Notifier –∑–∞–∫—Ä—ã—Ç")
    
    async def send_notification(self, telegram_user_id: int, message: str, max_retries: int = 3) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É"""
        if not self.http_session:
            logger.error("‚ùå HTTP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        url = f"{self.config.TELEGRAM_API_URL}{self.config.TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': telegram_user_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        for attempt in range(1, max_retries + 1):
            try:
                async with self.http_session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            logger.success(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_user_id}")
                            return True
                        else:
                            logger.error(f"‚ùå Telegram API –æ—à–∏–±–∫–∞: {result.get('description')}")
                    elif response.status >= 500:
                        # –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ - retry
                        logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ {response.status}, –ø–æ–≤—Ç–æ—Ä {attempt}/{max_retries}")
                        if attempt < max_retries:
                            await asyncio.sleep(2 ** attempt)
                            continue
                    else:
                        # –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {response.status}: {error_text}")
                        return False
            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                if attempt < max_retries:
                    await asyncio.sleep(2 ** attempt)
                    continue
        
        return False

# =========================
# –û—Å–Ω–æ–≤–Ω–æ–π –ê–≥–µ–Ω—Ç ‚Ññ5
# =========================
class ChatAgent5:
    def __init__(self):
        self.config = Agent5Config()
        self.db = Agent5DatabaseManager(self.config)
        self.telegram = TelegramNotifier(self.config)
        self.processed_count = 0
        self.start_time = datetime.now()
        logger.info("üöÄ –ß–∞—Ç-–∞–≥–µ–Ω—Ç ‚Ññ5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        await self.db.init_database()
        await self.telegram.init()
        logger.success("‚úÖ –ê–≥–µ–Ω—Ç ‚Ññ5 –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        await self.db.close_database()
        await self.telegram.close()
        logger.info("üëã –ê–≥–µ–Ω—Ç ‚Ññ5 –∑–∞–∫—Ä—ã—Ç")
    
    def parse_agent_verdict(self, agent_data: Dict[str, Any]) -> AgentVerdict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä–¥–∏–∫—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        return AgentVerdict(
            agent_id=agent_data.get("agent_id", 0),
            ban=agent_data.get("ban", False),
            reason=agent_data.get("reason", ""),
            confidence=agent_data.get("confidence", 0.5),
            timestamp=datetime.now()
        )
    
    def has_conflict(self, agent3: AgentVerdict, agent4: AgentVerdict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –µ—Å–ª–∏ –≤–µ—Ä–¥–∏–∫—Ç—ã —Ä–∞–∑–Ω—ã–µ –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è
        verdicts_differ = agent3.ban != agent4.ban
        low_confidence = agent3.confidence < 0.7 or agent4.confidence < 0.7
        return verdicts_differ or low_confidence
    
    def resolve_conflict(self, agent3: AgentVerdict, agent4: AgentVerdict, message_text: str) -> tuple[VerdictType, float, str]:
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        logger.info("üîç –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏...")
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        weight3 = agent3.confidence
        weight4 = agent4.confidence
        
        # –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –¥—Ä—É–≥–æ–≥–æ
        if weight3 > 0.8 and weight4 < 0.6:
            verdict = VerdictType.BAN if agent3.ban else VerdictType.APPROVE
            confidence = agent3.confidence * 0.9
            reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ê–≥–µ–Ω—Ç–∞ ‚Ññ3 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {weight3:.2f}). {agent3.reason}"
        elif weight4 > 0.8 and weight3 < 0.6:
            verdict = VerdictType.BAN if agent4.ban else VerdictType.APPROVE
            confidence = agent4.confidence * 0.9
            reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ê–≥–µ–Ω—Ç–∞ ‚Ññ4 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {weight4:.2f}). {agent4.reason}"
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä–µ—Ç—å—è –º–æ–¥–µ–ª—å –ò–ò
            spam_keywords = ['–∫—É–ø–∏—Ç—å', '—Å–∫–∏–¥–∫–∞', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∫–ª–∏–∫–∞–π', '–ø–µ—Ä–µ—Ö–æ–¥–∏', '–≤—Å—Ç—É–ø–∞–π']
            toxic_keywords = ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '–Ω–µ–Ω–∞–≤–∏–∂—É', '—Ö—É–π', '–±–ª—è—Ç—å']
            
            message_lower = message_text.lower()
            spam_count = sum(1 for keyword in spam_keywords if keyword in message_lower)
            toxic_count = sum(1 for keyword in toxic_keywords if keyword in message_lower)
            
            if toxic_count > 0:
                verdict = VerdictType.BAN
                confidence = 0.75
                reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–æ–∫—Å–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞ ({toxic_count})"
            elif spam_count >= 2:
                verdict = VerdictType.BAN
                confidence = 0.70
                reasoning = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º: –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Å–ø–∞–º ({spam_count} —Å–ø–∞–º-–º–∞—Ä–∫–µ—Ä–æ–≤)"
            else:
                verdict = VerdictType.APPROVE
                confidence = 0.65
                reasoning = "–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º: —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º"
        
        logger.info(f"‚öñÔ∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω: {verdict.value} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        return verdict, confidence, reasoning
    
    def make_decision(self, agent3: AgentVerdict, agent4: AgentVerdict, message_data: Dict[str, Any]) -> Agent5Decision:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        logger.info(f"ü§î –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤: Agent3={'–ë–ê–ù' if agent3.ban else '–ù–ï –ë–ê–ù–ò–¢–¨'} ({agent3.confidence:.2f}), "
                   f"Agent4={'–ë–ê–ù' if agent4.ban else '–ù–ï –ë–ê–ù–ò–¢–¨'} ({agent4.confidence:.2f})")
        
        has_conflict = self.has_conflict(agent3, agent4)
        
        if not has_conflict:
            # –í–µ—Ä–¥–∏–∫—Ç—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã
            final_verdict = VerdictType.BAN if agent3.ban else VerdictType.APPROVE
            confidence = (agent3.confidence + agent4.confidence) / 2
            reasoning = (
                f"–ê–≥–µ–Ω—Ç—ã ‚Ññ3 –∏ ‚Ññ4 —Å–æ–≥–ª–∞—Å–Ω—ã. –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}. "
                f"Agent3: {agent3.reason}. Agent4: {agent4.reason}."
            )
            logger.info("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –Ω–µ—Ç, –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        else:
            # –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏!")
            final_verdict, confidence, reasoning = self.resolve_conflict(
                agent3, agent4, message_data.get("message", "")
            )
        
        decision_id = f"decision_{message_data.get('message_id', 0)}_{int(datetime.now().timestamp())}"
        
        return Agent5Decision(
            decision_id=decision_id,
            message_id=message_data.get("message_id", 0),
            chat_id=message_data.get("chat_id", 0),
            user_id=message_data.get("user_id", 0),
            username=message_data.get("username", ""),
            message_text=message_data.get("message", ""),
            final_verdict=final_verdict,
            confidence=confidence,
            reasoning=reasoning,
            agent3_verdict=agent3.to_verdict_type(),
            agent4_verdict=agent4.to_verdict_type(),
            was_conflict=has_conflict,
            timestamp=datetime.now()
        )
    
    async def notify_moderators(self, decision: Agent5Decision) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ä–µ—à–µ–Ω–∏–∏"""
        if decision.final_verdict != VerdictType.BAN:
            return True  # –ù–µ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        
        moderators = await self.db.get_chat_moderators(decision.chat_id)
        
        if not moderators:
            logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —á–∞—Ç–∞ {decision.chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = (
            f"üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ!</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {decision.username}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {decision.message_text[:200]}{'...' if len(decision.message_text) > 200 else ''}\n"
            f"‚öñÔ∏è <b>–†–µ—à–µ–Ω–∏–µ:</b> {decision.final_verdict.value.upper()}\n"
            f"üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {decision.confidence:.1%}\n"
            f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {decision.reasoning[:300]}{'...' if len(decision.reasoning) > 300 else ''}\n"
            f"ü§ñ <b>Agent3:</b> {decision.agent3_verdict.value}, <b>Agent4:</b> {decision.agent4_verdict.value}\n"
            f"‚ö° <b>–ö–æ–Ω—Ñ–ª–∏–∫—Ç:</b> {'–î–∞' if decision.was_conflict else '–ù–µ—Ç'}"
        )
        
        success_count = 0
        for moderator in moderators:
            if moderator.get("telegram_user_id"):
                success = await self.telegram.send_notification(
                    moderator["telegram_user_id"], notification
                )
                if success:
                    success_count += 1
        
        logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count}/{len(moderators)} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º")
        return success_count > 0
    
    async def process_agent_reports(self, agent3_data: Dict[str, Any], agent4_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤ 3 –∏ 4"""
        try:
            # –ü–∞—Ä—Å–∏–º –≤–µ—Ä–¥–∏–∫—Ç—ã
            agent3 = self.parse_agent_verdict(agent3_data)
            agent4 = self.parse_agent_verdict(agent4_data)
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            decision = self.make_decision(agent3, agent4, agent3_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if decision.final_verdict == VerdictType.BAN:
                await self.db.save_negative_message(decision)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            notification_sent = await self.notify_moderators(decision)
            
            self.processed_count += 1
            
            result = {
                "status": "processed",
                "decision": decision.to_dict(),
                "notification_sent": notification_sent
            }
            
            logger.success(f"‚úÖ –ê–≥–µ–Ω—Ç 5: –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ - {decision.final_verdict.value}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ê–≥–µ–Ω—Ç 5: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
            return {"status": "error", "reason": str(e)}
    
    def get_health_metrics(self) -> Dict[str, Any]:
        uptime = datetime.now() - self.start_time
        return {
            "agent_id": 5,
            "status": "healthy",
            "uptime_seconds": int(uptime.total_seconds()),
            "processed_decisions": self.processed_count,
            "database_connected": self.db.engine is not None,
            "telegram_ready": self.telegram.http_session is not None,
        }

# =========================
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# =========================
async def test_agent_5():
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ 5"""
    logger.info("=== –¢–ï–°–¢ –ê–ì–ï–ù–¢–ê 5 ===")
    
    agent = ChatAgent5()
    await agent.init()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤ 3 –∏ 4
    agent3_data = {
        "agent_id": 3,
        "ban": True,
        "reason": "–í–µ—Ä–¥–∏–∫—Ç: –¥–∞. –ü—Ä–∏—á–∏–Ω–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
        "message": "–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç @spamchannel!",
        "user_id": 123456789,
        "username": "@test_user",
        "chat_id": -1001234567890,
        "message_id": 42,
        "confidence": 0.85,
        "timestamp": datetime.now().isoformat()
    }
    
    agent4_data = {
        "agent_id": 4,
        "ban": False,
        "reason": "–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞.",
        "message": "–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç @spamchannel!",
        "user_id": 123456789,
        "username": "@test_user",
        "chat_id": -1001234567890,
        "message_id": 42,
        "confidence": 0.70,
        "timestamp": datetime.now().isoformat()
    }
    
    result = await agent.process_agent_reports(agent3_data, agent4_data)
    
    logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(json.dumps(result, ensure_ascii=False, indent=2))
    
    await agent.close()

# =========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =========================
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    agent = ChatAgent5()
    try:
        await agent.init()
        logger.info("üöÄ –ê–≥–µ–Ω—Ç ‚Ññ5 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤ 3 –∏ 4
        # —á–µ—Ä–µ–∑ Redis –∏–ª–∏ –¥—Ä—É–≥—É—é —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π
        while True:
            await asyncio.sleep(1)
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤
            
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await agent.close()

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        asyncio.run(test_agent_5())
    else:
        asyncio.run(main())