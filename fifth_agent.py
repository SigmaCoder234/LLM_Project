# -*- coding: utf-8 -*-
"""
–ê–ì–ï–ù–¢ ‚Ññ5 - –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏–π (–ì–û–¢–û–í–´–ô ACCESS TOKEN)
–ê–≥–µ–Ω—Ç ‚Ññ5 –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –ê–≥–µ–Ω—Ç–æ–≤ 2, 3 –∏ 4, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ REST API.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π Access Token –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
(—Ö–æ—Ç—è —Å–∞–º –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ì–∏–≥–∞–ß–∞—Ç –Ω–∞–ø—Ä—è–º—É—é)
"""

import asyncio
import logging
from dataclasses import dataclass, asdict
from typing import Optional, List, Dict, Any
from enum import Enum
from datetime import datetime
import asyncpg
import aiohttp
import os
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('Agent5')

# === –ù–ê–°–¢–†–û–ô–ö–ò (–ì–û–¢–û–í–´–ô ACCESS TOKEN) ===
# –ì–∏–≥–∞–ß–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ì–û–¢–û–í–´–ô ACCESS TOKEN (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
from token import TOKEN
GIGACHAT_ACCESS_TOKEN = TOKEN
# === ENUM –ò DATACLASS ===
class VerdictType(Enum):
    APPROVE = "approve"
    REJECT = "reject"
    WARNING = "warning"
    BAN = "ban"
    UNCERTAIN = "uncertain"

@dataclass
class AgentVerdict:
    """–†–µ—à–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤ 3 –∏–ª–∏ 4"""
    agent_id: int  # ID –∞–≥–µ–Ω—Ç–∞ (3 –∏–ª–∏ 4)
    verdict: VerdictType
    confidence: float  # 0.0-1.0
    reasoning: str
    timestamp: datetime
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JSON –¥–ª—è API"""
        return {
            'agent_id': self.agent_id,
            'verdict': self.verdict.value,
            'confidence': self.confidence,
            'reasoning': self.reasoning,
            'timestamp': self.timestamp.isoformat()
        }

@dataclass
class Agent2Report:
    """–û—Ç—á–µ—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ 2"""
    report_id: str  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞
    message_id: int  # ID —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    chat_id: int  # ID —á–∞—Ç–∞
    user_id: int  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_text: str
    agent3_verdict: AgentVerdict  # –†–µ—à–µ–Ω–∏–µ –æ—Ç –ê–≥–µ–Ω—Ç–∞ 3
    agent4_verdict: AgentVerdict  # –†–µ—à–µ–Ω–∏–µ –æ—Ç –ê–≥–µ–Ω—Ç–∞ 4
    is_conflicting: bool
    metadata: Dict[str, Any]
    
    def has_conflict(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        # –ê–≥–µ–Ω—Ç—ã –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä–¥–∏–∫—Ç—ã
        verdicts_differ = self.agent3_verdict.verdict != self.agent4_verdict.verdict
        # –ò–ª–∏ –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —É –æ–¥–Ω–æ–≥–æ –∏–∑ –∞–≥–µ–Ω—Ç–æ–≤
        low_confidence = self.agent3_verdict.confidence < 0.7 or self.agent4_verdict.confidence < 0.7
        return verdicts_differ or low_confidence

@dataclass
class Agent5Decision:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç –ê–≥–µ–Ω—Ç–∞ 5"""
    decision_id: str  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ä–µ—à–µ–Ω–∏—è
    report_id: str  # ID –æ—Ç—á–µ—Ç–∞ –∏–∑ Agent2Report
    final_verdict: VerdictType
    confidence: float
    reasoning: str
    agent3_verdict: VerdictType  # –†–µ—à–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞ 3
    agent4_verdict: VerdictType  # –†–µ—à–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞ 4
    was_conflict: bool
    timestamp: datetime
    
    def to_json(self) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JSON –¥–ª—è API"""
        return json.dumps({
            'decision_id': self.decision_id,
            'report_id': self.report_id,
            'final_verdict': self.final_verdict.value,
            'confidence': self.confidence,
            'reasoning': self.reasoning,
            'agent3_verdict': self.agent3_verdict.value,
            'agent4_verdict': self.agent4_verdict.value,
            'was_conflict': self.was_conflict,
            'timestamp': self.timestamp.isoformat()
        })

@dataclass
class ModeratorInfo:
    moderator_id: int  # ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    telegram_id: int  # Telegram ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    username: str  # Username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    is_active: bool
    api_endpoint: Optional[str]  # API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# === –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ê–ì–ï–ù–¢–ê 5 ===
class Agent5:
    """
    –ê–≥–µ–Ω—Ç ‚Ññ5 - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏–π.
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –ê–≥–µ–Ω—Ç–æ–≤ 3 –∏ 4, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ REST API.
    """
    
    def __init__(self, db_config: Dict[str, Any], api_base_url: str, api_timeout: int = 30, max_retries: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ê–≥–µ–Ω—Ç–∞ 5
        
        Args:
            db_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
            api_base_url: –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è REST API
            api_timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        self.db_config = db_config
        self.api_base_url = api_base_url
        self.api_timeout = api_timeout
        self.max_retries = max_retries
        
        # Connection pool –¥–ª—è PostgreSQL
        self.db_pool: Optional[asyncpg.Pool] = None
        
        # HTTP —Å–µ—Å—Å–∏—è –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
        self.http_session: Optional[aiohttp.ClientSession] = None
        
        logger.info("ü§ñ –ê–≥–µ–Ω—Ç 5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Å–æ–≤–º–µ—Å—Ç–∏–º —Å –≥–æ—Ç–æ–≤—ã–º Access Token)")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –∏ HTTP API"""
        try:
            # –°–æ–∑–¥–∞–µ–º connection pool –¥–ª—è PostgreSQL
            self.db_pool = await asyncpg.create_pool(**self.db_config, min_size=5, max_size=20, command_timeout=60)
            logger.info("‚úÖ PostgreSQL connection pool —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è connection pool –¥–ª—è PostgreSQL: {e}")
            raise
        
        # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
        timeout = aiohttp.ClientTimeout(total=self.api_timeout)
        self.http_session = aiohttp.ClientSession(timeout=timeout)
        logger.info("‚úÖ HTTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.db_pool:
            await self.db_pool.close()
            logger.info("üóÑÔ∏è  PostgreSQL connection pool –∑–∞–∫—Ä—ã—Ç")
        
        if self.http_session:
            await self.http_session.close()
            logger.info("üåê HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
    
    async def process_report(self, report: Agent2Report) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç –ê–≥–µ–Ω—Ç–∞ 2
        
        Args:
            report: –û—Ç—á–µ—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ 2
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        """
        logger.info(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç {report.report_id} –æ—Ç –ê–≥–µ–Ω—Ç–∞ 2")
        
        try:
            # 1. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            decision = await self.make_decision(report)
            logger.info(f"‚öñÔ∏è  –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {decision.final_verdict.value}")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            moderator = await self.get_moderator(report.chat_id)
            if not moderator:
                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —á–∞—Ç–∞ {report.chat_id}")
                return False
            
            logger.info(f"üë§ –ù–∞–π–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{moderator.username}")
            
            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ REST API
            success = await self.send_to_moderator(decision, moderator)
            if success:
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É @{moderator.username}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
            return False
    
    async def make_decision(self, report: Agent2Report) -> Agent5Decision:
        """
        –ü—Ä–∏–Ω—è—Ç–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –ê–≥–µ–Ω—Ç–æ–≤ 3 –∏ 4
        
        1. –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω—ã - –ø—Ä–∏–Ω–∏–º–∞–µ–º –∏—Ö —Ä–µ—à–µ–Ω–∏–µ
        2. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        3. –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç—É 5
        
        Args:
            report: –û—Ç—á–µ—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ 2
        
        Returns:
            Agent5Decision: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        """
        agent3 = report.agent3_verdict
        agent4 = report.agent4_verdict
        
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: Agent3={agent3.verdict.value}({agent3.confidence:.2f}), Agent4={agent4.verdict.value}({agent4.confidence:.2f})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        has_conflict = report.has_conflict()
        
        if not has_conflict:
            # –ê–≥–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω—ã - –ø—Ä–∏–Ω–∏–º–∞–µ–º –∏—Ö —Ä–µ—à–µ–Ω–∏–µ
            final_verdict = agent3.verdict
            confidence = (agent3.confidence + agent4.confidence) / 2
            reasoning = f"–ê–≥–µ–Ω—Ç—ã 3 –∏ 4 —Å–æ–≥–ª–∞—Å–Ω—ã. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}. " \
                       f"Agent3: {agent3.reasoning}. Agent4: {agent4.reasoning}."
            logger.info("‚úÖ –ê–≥–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –Ω–µ—Ç")
        else:
            # –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç - —Ä–∞–∑—Ä–µ—à–∞–µ–º –µ–≥–æ
            logger.warning("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏!")
            final_verdict, confidence, reasoning = await self.resolve_conflict(report, agent3, agent4)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        decision_id = f"decision_{report.report_id}_{int(datetime.now().timestamp())}"
        decision = Agent5Decision(
            decision_id=decision_id,
            report_id=report.report_id,
            final_verdict=final_verdict,
            confidence=confidence,
            reasoning=reasoning,
            agent3_verdict=agent3.verdict,
            agent4_verdict=agent4.verdict,
            was_conflict=has_conflict,
            timestamp=datetime.now()
        )
        
        return decision
    
    async def resolve_conflict(self, report: Agent2Report, agent3: AgentVerdict, agent4: AgentVerdict) -> tuple[VerdictType, float, str]:
        """
        –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –ê–≥–µ–Ω—Ç–∞–º–∏ 3 –∏ 4
        
        1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
        2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
        3. –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –ê–≥–µ–Ω—Ç–∞ 5
        
        Args:
            report: –û—Ç—á–µ—Ç
            agent3: –†–µ—à–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞ 3
            agent4: –†–µ—à–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞ 4
        
        Returns:
            tuple: (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π_–≤–µ—Ä–¥–∏–∫—Ç, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ)
        """
        logger.info("üîß –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –ê–≥–µ–Ω—Ç–∞ 5
        message_analysis = await self.analyze_message(report.message_text) 
        
        # –í–∑–≤–µ—à–∏–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        weight3 = agent3.confidence
        weight4 = agent4.confidence
        
        # –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç –æ—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω, –∞ –¥—Ä—É–≥–æ–π –Ω–µ—Ç
        if weight3 > 0.8 and weight4 < 0.6:
            final_verdict = agent3.verdict
            confidence = agent3.confidence * 0.9
            reasoning = f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ê–≥–µ–Ω—Ç—É 3 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {weight3:.2f}). {agent3.reasoning}"
        elif weight4 > 0.8 and weight3 < 0.6:
            final_verdict = agent4.verdict
            confidence = agent4.confidence * 0.9
            reasoning = f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ê–≥–µ–Ω—Ç—É 4 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {weight4:.2f}). {agent4.reasoning}"
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ –ê–≥–µ–Ω—Ç–∞ 5
            final_verdict = message_analysis['verdict']
            confidence = message_analysis['confidence']
            reasoning = f"–†–µ—à–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞ 5 –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞. Agent3: {agent3.verdict.value} ({weight3:.2f}), Agent4: {agent4.verdict.value} ({weight4:.2f}). {message_analysis['reason']}"
        
        logger.info(f"‚öñÔ∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω: {final_verdict.value} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        return final_verdict, confidence, reasoning
    
    async def analyze_message(self, message_text: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏–ª–∞–º–∏ –ê–≥–µ–Ω—Ç–∞ 5.
        –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.
        
        - –ú–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ ML –º–æ–¥–µ–ª—å
        - –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π Access Token –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        - –ú–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        
        Args:
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            dict: {'verdict': VerdictType, 'confidence': float, 'reason': str}
        """
        # –ü—Ä–æ—Å—Ç—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        spam_keywords = ['–¥–µ—à–µ–≤–æ', '—Å–∫–∏–¥–∫–∞', '–∫—É–ø–∏', '–ø—Ä–æ–¥–∞–∂', '—Ä–µ–∫–ª–∞–º', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∞–∫—Ü–∏—è']
        toxic_keywords = ['–∏–¥–∏–æ—Ç', '–¥—É—Ä–∞–∫', '—Ç—É–ø–æ–π', '—É—Ä–æ–¥', '–∫–æ–∑—ë–ª']
        profanity_keywords = ['–±–ª—è', '—Ö—É–π', '–ø–∏–∑–¥', '–µ–±–∞–ª']
        
        message_lower = message_text.lower()
        
        spam_count = sum(1 for keyword in spam_keywords if keyword in message_lower)
        toxic_count = sum(1 for keyword in toxic_keywords if keyword in message_lower)
        profanity_count = sum(1 for keyword in profanity_keywords if keyword in message_lower)
        
        if profanity_count > 0:
            return {
                'verdict': VerdictType.BAN,
                'confidence': 0.85,
                'reason': f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç: {profanity_count} —Å–ª–æ–≤"
            }
        elif toxic_count > 0:
            return {
                'verdict': VerdictType.WARNING,
                'confidence': 0.75,
                'reason': f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–æ–∫—Å–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞: {toxic_count}"
            }
        elif spam_count >= 2:
            return {
                'verdict': VerdictType.REJECT,
                'confidence': 0.70,
                'reason': f"–í–µ—Ä–æ—è—Ç–Ω—ã–π —Å–ø–∞–º - –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {spam_count}"
            }
        else:
            return {
                'verdict': VerdictType.APPROVE,
                'confidence': 0.65,
                'reason': "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ê–≥–µ–Ω—Ç–∞ 5"
            }
    
    async def get_moderator(self, chat_id: int) -> Optional[ModeratorInfo]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ –∏–∑ PostgreSQL
        
        Args:
            chat_id: ID —á–∞—Ç–∞ Telegram
        
        Returns:
            ModeratorInfo –∏–ª–∏ None –µ—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not self.db_pool:
            raise RuntimeError("Database pool –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        try:
            async with self.db_pool.acquire() as conn:
                # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —á–∞—Ç–∞, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–≥–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                query = """
                    SELECT m.id as moderator_id, m.telegram_id, m.username, m.is_active, m.api_endpoint
                    FROM moderators m 
                    JOIN chat_moderators cm ON m.id = cm.moderator_id 
                    WHERE cm.chat_id = $1 AND m.is_active = true 
                    ORDER BY m.priority DESC 
                    LIMIT 1
                """
                
                row = await conn.fetchrow(query, chat_id)
                
                if row:
                    moderator = ModeratorInfo(
                        moderator_id=row['moderator_id'],
                        telegram_id=row['telegram_id'],
                        username=row['username'],
                        is_active=row['is_active'],
                        api_endpoint=row.get('api_endpoint')
                    )
                    logger.info(f"üë§ –ù–∞–π–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{moderator.username}")
                    return moderator
                else:
                    logger.warning(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                    return None
                    
        except asyncpg.PostgresError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {e}", exc_info=True)
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            return None
    
    async def send_to_moderator(self, decision: Agent5Decision, moderator: ModeratorInfo) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ REST API —Å retry –ª–æ–≥–∏–∫–æ–π
        
        Args:
            decision: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            moderator: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ
        
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.http_session:
            # HTTP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            raise RuntimeError("HTTP session –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if moderator.api_endpoint:
            url = moderator.api_endpoint
        else:
            url = f"{self.api_base_url}/moderator/{moderator.moderator_id}/verdict"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è API
        payload = {
            'decision': asdict(decision),
            'moderator_id': moderator.moderator_id, 
            'telegram_id': moderator.telegram_id,
            'timestamp': datetime.now().isoformat()
        }
        
        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'TelegramModerationBot-Agent5/1.0'
        }
        
        # Retry –ª–æ–≥–∏–∫–∞
        for attempt in range(1, self.max_retries + 1):
            try:
                logger.info(f"üåê –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries}: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ {url}")
                
                async with self.http_session.post(url, json=payload, headers=headers) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"‚úÖ API –æ—Ç–≤–µ—Ç: {result}")
                        return True
                    elif response.status >= 500:
                        # –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ - –º–æ–∂–Ω–æ retry
                        logger.warning(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ {response.status}, –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞...")
                        if attempt < self.max_retries:
                            await asyncio.sleep(2 ** attempt)  # Exponential backoff
                            continue
                    else:
                        # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –Ω–µ retry
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API {response.status}: {error_text}")
                        return False
                        
            except aiohttp.ClientError as e:
                logger.error(f"‚ùå HTTP –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                if attempt < self.max_retries:
                    await asyncio.sleep(2 ** attempt)
                    continue
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                if attempt < self.max_retries:
                    await asyncio.sleep(2 ** attempt)
                    continue
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
                return False
        
        logger.error(f"‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ {self.max_retries} –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return False

# === MAIN –§–£–ù–ö–¶–ò–Ø ===
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ê–≥–µ–Ω—Ç–∞ 5"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
    db_config = {
        'host': os.getenv('DB_HOST', '176.108.248.211'),
        'port': int(os.getenv('DB_PORT', 5432)),
        'user': os.getenv('DB_USER', 'tguser'),
        'password': os.getenv('DB_PASSWORD', 'mnvm7110'),
        'database': os.getenv('DB_NAME', 'teleguard_db')
    }
    
    # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è REST API
    api_base_url = os.getenv('API_BASE_URL', 'http://localhost:8000/api/v1')
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ê–≥–µ–Ω—Ç–∞ 5
    agent = Agent5(
        db_config=db_config,
        api_base_url=api_base_url,
        api_timeout=30,
        max_retries=3
    )
    
    try:
        await agent.initialize()
        logger.info("üöÄ –ê–≥–µ–Ω—Ç 5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        test_report = Agent2Report(
            report_id="report_12345",
            message_id=98765,
            chat_id=-1001234567890,
            user_id=123456789,
            message_text="–ö—É–ø–∏—Ç–µ –¥–µ—à–µ–≤—ã–µ –∞–π—Ñ–æ–Ω—ã! –°–∫–∏–¥–∫–∏!!!",
            agent3_verdict=AgentVerdict(
                agent_id=3,
                verdict=VerdictType.REJECT,
                confidence=0.85,
                reasoning="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ - –∑–∞–ø—Ä–µ—â–µ–Ω–æ",
                timestamp=datetime.now()
            ),
            agent4_verdict=AgentVerdict(
                agent_id=4,
                verdict=VerdictType.WARNING,
                confidence=0.65,
                reasoning="–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ",
                timestamp=datetime.now()
            ),
            is_conflicting=True,
            metadata={}
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ RabbitMQ, Kafka –∏ —Ç.–¥.
        success = await agent.process_report(test_report)
        
        if success:
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        await agent.cleanup()
        logger.info("üëã –ê–≥–µ–Ω—Ç 5 –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    print("=" * 60)
    print("üîß –ê–ì–ï–ù–¢ ‚Ññ5 - –ì–û–¢–û–í–´–ô ACCESS TOKEN")
    print("=" * 60)
    print("ü§ñ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏–π")
    print("üîë –°–æ–≤–º–µ—Å—Ç–∏–º —Å –≥–æ—Ç–æ–≤—ã–º Access Token")
    print(f"üìè –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(GIGACHAT_ACCESS_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")
    print("üß™ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ Telegram –±–æ—Ç–∞")
    print()
    print("‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–µ—à–µ–Ω–∏–π –æ—Ç –ê–≥–µ–Ω—Ç–æ–≤ 3 –∏ 4")
    print("   ‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏")
    print("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º")
    print("   ‚Ä¢ PostgreSQL –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    print("   ‚Ä¢ REST API –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è")
    print()
    print("üìù –•–æ—Ç—è –ê–≥–µ–Ω—Ç 5 –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ì–∏–≥–∞–ß–∞—Ç –Ω–∞–ø—Ä—è–º—É—é,")
    print("    –æ–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
    print()
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ê–≥–µ–Ω—Ç 5...")
    print("=" * 60)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
