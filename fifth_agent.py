"""
–ê–≥–µ–Ω—Ç ‚Ññ5 - –ê—Ä–±–∏—Ç—Ä –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞

–≠—Ç–æ—Ç –∞–≥–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç—á–µ—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ ‚Ññ2, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Ä–¥–∏–∫—Ç—ã –ê–≥–µ–Ω—Ç–æ–≤ ‚Ññ3 –∏ ‚Ññ4,
–≤ —Å–ª—É—á–∞–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–∞—Ö–æ–¥–∏—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ PostgreSQL
–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç —á–µ—Ä–µ–∑ REST API.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- Python 3.10+
- asyncpg
- aiohttp

–£—Å—Ç–∞–Ω–æ–≤–∫–∞:
pip install asyncpg aiohttp python-dotenv
"""

import asyncio
import logging
from dataclasses import dataclass, asdict
from typing import Optional, List, Dict, Any
from enum import Enum
from datetime import datetime
import asyncpg
import aiohttp
import os
import json


# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò
# ============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('Agent5')


# ============================================================================
# –ö–õ–ê–°–°–´ –î–ê–ù–ù–´–• (DATACLASSES)
# ============================================================================

class VerdictType(Enum):
    """–¢–∏–ø—ã –≤–µ—Ä–¥–∏–∫—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    APPROVE = "approve"          # –û–¥–æ–±—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    REJECT = "reject"            # –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    WARNING = "warning"          # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    BAN = "ban"                  # –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UNCERTAIN = "uncertain"      # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ


@dataclass
class AgentVerdict:
    """–í–µ—Ä–¥–∏–∫—Ç –æ—Ç –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (‚Ññ3 –∏–ª–∏ ‚Ññ4)"""
    agent_id: int                    # ID –∞–≥–µ–Ω—Ç–∞ (3 –∏–ª–∏ 4)
    verdict: VerdictType             # –¢–∏–ø –≤–µ—Ä–¥–∏–∫—Ç–∞
    confidence: float                # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ—à–µ–Ω–∏–∏ (0.0-1.0)
    reasoning: str                   # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
    timestamp: datetime              # –í—Ä–µ–º—è –≤—ã–Ω–µ—Å–µ–Ω–∏—è –≤–µ—Ä–¥–∏–∫—Ç–∞

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        return {
            'agent_id': self.agent_id,
            'verdict': self.verdict.value,
            'confidence': self.confidence,
            'reasoning': self.reasoning,
            'timestamp': self.timestamp.isoformat()
        }


@dataclass
class Agent2Report:
    """–û—Ç—á–µ—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ ‚Ññ2"""
    report_id: str                      # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞
    message_id: int                     # ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    chat_id: int                        # ID —á–∞—Ç–∞
    user_id: int                        # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_text: str                   # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    agent3_verdict: AgentVerdict        # –í–µ—Ä–¥–∏–∫—Ç –∞–≥–µ–Ω—Ç–∞ ‚Ññ3
    agent4_verdict: AgentVerdict        # –í–µ—Ä–¥–∏–∫—Ç –∞–≥–µ–Ω—Ç–∞ ‚Ññ4
    is_conflicting: bool                # –ï—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
    metadata: Dict[str, Any]            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

    def has_conflict(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –≤–µ—Ä–¥–∏–∫—Ç–∞–º–∏"""
        # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –µ—Å–ª–∏ –≤–µ—Ä–¥–∏–∫—Ç—ã —Ä–∞–∑–Ω—ã–µ –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è
        verdicts_differ = self.agent3_verdict.verdict != self.agent4_verdict.verdict
        low_confidence = (
            self.agent3_verdict.confidence < 0.7 or 
            self.agent4_verdict.confidence < 0.7
        )
        return verdicts_differ or low_confidence


@dataclass
class Agent5Decision:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞ ‚Ññ5"""
    decision_id: str                 # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ä–µ—à–µ–Ω–∏—è
    report_id: str                   # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    final_verdict: VerdictType       # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    confidence: float                # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ—à–µ–Ω–∏–∏
    reasoning: str                   # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
    agent3_verdict: VerdictType      # –í–µ—Ä–¥–∏–∫—Ç –∞–≥–µ–Ω—Ç–∞ ‚Ññ3
    agent4_verdict: VerdictType      # –í–µ—Ä–¥–∏–∫—Ç –∞–≥–µ–Ω—Ç–∞ ‚Ññ4
    was_conflict: bool               # –ë—ã–ª –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç
    timestamp: datetime              # –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è

    def to_json(self) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API"""
        return json.dumps({
            'decision_id': self.decision_id,
            'report_id': self.report_id,
            'final_verdict': self.final_verdict.value,
            'confidence': self.confidence,
            'reasoning': self.reasoning,
            'agent3_verdict': self.agent3_verdict.value,
            'agent4_verdict': self.agent4_verdict.value,
            'was_conflict': self.was_conflict,
            'timestamp': self.timestamp.isoformat()
        })


@dataclass
class ModeratorInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ –∏–∑ –ë–î"""
    moderator_id: int                # ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    telegram_id: int                 # Telegram ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    username: str                    # Username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    is_active: bool                  # –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    api_endpoint: Optional[str]      # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API endpoint (–µ—Å–ª–∏ –µ—Å—Ç—å)


# ============================================================================
# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ê–ì–ï–ù–¢–ê ‚Ññ5
# ============================================================================

class Agent5:
    """
    –ê–≥–µ–Ω—Ç ‚Ññ5 - –ê—Ä–±–∏—Ç—Ä –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ —Å–ø–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –º–µ–∂–¥—É –ê–≥–µ–Ω—Ç–∞–º–∏ ‚Ññ3 –∏ ‚Ññ4,
    –Ω–∞—Ö–æ–¥–∏—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—Ä–¥–∏–∫—Ç —á–µ—Ä–µ–∑ REST API.
    """

    def __init__(
        self,
        db_config: Dict[str, Any],
        api_base_url: str,
        api_timeout: int = 30,
        max_retries: int = 3
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ê–≥–µ–Ω—Ç–∞ ‚Ññ5

        Args:
            db_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
            api_base_url: –ë–∞–∑–æ–≤—ã–π URL REST API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤
            api_timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–µ–∫—É–Ω–¥—ã)
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        self.db_config = db_config
        self.api_base_url = api_base_url
        self.api_timeout = api_timeout
        self.max_retries = max_retries

        # Connection pool –¥–ª—è PostgreSQL (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        self.db_pool: Optional[asyncpg.Pool] = None

        # HTTP —Å–µ—Å—Å–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        self.http_session: Optional[aiohttp.ClientSession] = None

        logger.info("–ê–≥–µ–Ω—Ç ‚Ññ5 —Å–æ–∑–¥–∞–Ω")

    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        # –°–æ–∑–¥–∞–Ω–∏–µ connection pool –¥–ª—è PostgreSQL
        try:
            self.db_pool = await asyncpg.create_pool(
                **self.db_config,
                min_size=5,
                max_size=20,
                command_timeout=60
            )
            logger.info("‚úÖ PostgreSQL connection pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise

        # –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏
        timeout = aiohttp.ClientTimeout(total=self.api_timeout)
        self.http_session = aiohttp.ClientSession(timeout=timeout)
        logger.info("‚úÖ HTTP —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def cleanup(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.db_pool:
            await self.db_pool.close()
            logger.info("PostgreSQL connection pool –∑–∞–∫—Ä—ã—Ç")

        if self.http_session:
            await self.http_session.close()
            logger.info("HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")

    async def process_report(self, report: Agent2Report) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç –ê–≥–µ–Ω—Ç–∞ ‚Ññ2

        Args:
            report: –û—Ç—á–µ—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ ‚Ññ2

        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç {report.report_id} –æ—Ç –ê–≥–µ–Ω—Ç–∞ ‚Ññ2")

        try:
            # 1. –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
            decision = await self.make_decision(report)
            logger.info(f"‚öñÔ∏è  –ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ: {decision.final_verdict.value}")

            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ
            moderator = await self.get_moderator(report.chat_id)
            if not moderator:
                logger.error(f"‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —á–∞—Ç–∞ {report.chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            logger.info(f"üë§ –ù–∞–π–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: {moderator.username}")

            # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—Ä–¥–∏–∫—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ API
            success = await self.send_to_moderator(decision, moderator)

            if success:
                logger.info(f"‚úÖ –í–µ—Ä–¥–∏–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator.username}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ä–¥–∏–∫—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É")

            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
            return False

    async def make_decision(self, report: Agent2Report) -> Agent5Decision:
        """
        –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤ –ê–≥–µ–Ω—Ç–æ–≤ ‚Ññ3 –∏ ‚Ññ4

        –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è:
        1. –ï—Å–ª–∏ –≤–µ—Ä–¥–∏–∫—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è - –ø—Ä–∏–Ω–∏–º–∞–µ–º –∏—Ö —Ä–µ—à–µ–Ω–∏–µ
        2. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –ø—Ä–æ–≤–æ–¥–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤

        Args:
            report: –û—Ç—á–µ—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ ‚Ññ2

        Returns:
            Agent5Decision: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        """
        agent3 = report.agent3_verdict
        agent4 = report.agent4_verdict

        logger.info(f"ü§î –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤: Agent3={agent3.verdict.value} ({agent3.confidence:.2f}), "
                   f"Agent4={agent4.verdict.value} ({agent4.confidence:.2f})")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç
        has_conflict = report.has_conflict()

        if not has_conflict:
            # –í–µ—Ä–¥–∏–∫—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è
            final_verdict = agent3.verdict
            confidence = (agent3.confidence + agent4.confidence) / 2
            reasoning = (
                f"–ê–≥–µ–Ω—Ç—ã ‚Ññ3 –∏ ‚Ññ4 —Å–æ–≥–ª–∞—Å–Ω—ã. "
                f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}. "
                f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ Agent3: {agent3.reasoning}. "
                f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ Agent4: {agent4.reasoning}."
            )
            logger.info("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –Ω–µ—Ç, –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        else:
            # –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –ø—Ä–æ–≤–æ–¥–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            logger.warning("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏!")
            final_verdict, confidence, reasoning = await self._resolve_conflict(
                report, agent3, agent4
            )

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Ä–µ—à–µ–Ω–∏—è
        decision_id = f"decision_{report.report_id}_{int(datetime.now().timestamp())}"

        decision = Agent5Decision(
            decision_id=decision_id,
            report_id=report.report_id,
            final_verdict=final_verdict,
            confidence=confidence,
            reasoning=reasoning,
            agent3_verdict=agent3.verdict,
            agent4_verdict=agent4.verdict,
            was_conflict=has_conflict,
            timestamp=datetime.now()
        )

        return decision

    async def _resolve_conflict(
        self,
        report: Agent2Report,
        agent3: AgentVerdict,
        agent4: AgentVerdict
    ) -> tuple[VerdictType, float, str]:
        """
        –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏

        –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
        1. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        2. –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
        3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –ê–≥–µ–Ω—Ç–∞ ‚Ññ5

        Args:
            report: –û—Ç—á–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            agent3: –í–µ—Ä–¥–∏–∫—Ç –∞–≥–µ–Ω—Ç–∞ ‚Ññ3
            agent4: –í–µ—Ä–¥–∏–∫—Ç –∞–≥–µ–Ω—Ç–∞ ‚Ññ4

        Returns:
            tuple: (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π_–≤–µ—Ä–¥–∏–∫—Ç, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ)
        """
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞...")

        # –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        message_analysis = await self._analyze_message(report.message_text)

        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        weight3 = agent3.confidence
        weight4 = agent4.confidence
        total_weight = weight3 + weight4

        # –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –¥—Ä—É–≥–æ–≥–æ
        if weight3 > 0.8 and weight4 < 0.6:
            final_verdict = agent3.verdict
            confidence = agent3.confidence * 0.9  # –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            reasoning = (
                f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ê–≥–µ–Ω—Ç–∞ ‚Ññ3 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {weight3:.2f}). "
                f"{agent3.reasoning}"
            )
        elif weight4 > 0.8 and weight3 < 0.6:
            final_verdict = agent4.verdict
            confidence = agent4.confidence * 0.9
            reasoning = (
                f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ê–≥–µ–Ω—Ç–∞ ‚Ññ4 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {weight4:.2f}). "
                f"{agent4.reasoning}"
            )
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            final_verdict = message_analysis['verdict']
            confidence = message_analysis['confidence']
            reasoning = (
                f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –ê–≥–µ–Ω—Ç–∞ ‚Ññ5. "
                f"Agent3: {agent3.verdict.value} ({weight3:.2f}), "
                f"Agent4: {agent4.verdict.value} ({weight4:.2f}). "
                f"–†–µ—à–µ–Ω–∏–µ: {message_analysis['reason']}"
            )

        logger.info(f"‚öñÔ∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω: {final_verdict.value} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")

        return final_verdict, confidence, reasoning

    async def _analyze_message(self, message_text: str) -> Dict[str, Any]:
        """
        –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ê–≥–µ–Ω—Ç–æ–º ‚Ññ5

        –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å:
        - ML –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–∞–∑–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        - –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        - –ò —Ç.–¥.

        Args:
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã

        spam_keywords = ['–∫—É–ø–∏—Ç—å', '—Å–∫–∏–¥–∫–∞', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∫–ª–∏–∫–∞–π', '–ø–µ—Ä–µ—Ö–æ–¥–∏']
        toxic_keywords = ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '–Ω–µ–Ω–∞–≤–∏–∂—É']

        message_lower = message_text.lower()

        spam_count = sum(1 for keyword in spam_keywords if keyword in message_lower)
        toxic_count = sum(1 for keyword in toxic_keywords if keyword in message_lower)

        if toxic_count > 0:
            return {
                'verdict': VerdictType.WARNING,
                'confidence': 0.75,
                'reason': f'–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–æ–∫—Å–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞ ({toxic_count})'
            }
        elif spam_count >= 2:
            return {
                'verdict': VerdictType.REJECT,
                'confidence': 0.70,
                'reason': f'–í–µ—Ä–æ—è—Ç–Ω—ã–π —Å–ø–∞–º ({spam_count} —Å–ø–∞–º-–º–∞—Ä–∫–µ—Ä–æ–≤)'
            }
        else:
            return {
                'verdict': VerdictType.APPROVE,
                'confidence': 0.65,
                'reason': '–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º'
            }

    async def get_moderator(self, chat_id: int) -> Optional[ModeratorInfo]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ –∏–∑ PostgreSQL

        Args:
            chat_id: ID —á–∞—Ç–∞ –≤ Telegram

        Returns:
            ModeratorInfo –∏–ª–∏ None –µ—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not self.db_pool:
            raise RuntimeError("Database pool –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        try:
            async with self.db_pool.acquire() as conn:
                # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                query = """
                    SELECT 
                        m.id as moderator_id,
                        m.telegram_id,
                        m.username,
                        m.is_active,
                        m.api_endpoint
                    FROM moderators m
                    JOIN chat_moderators cm ON m.id = cm.moderator_id
                    WHERE cm.chat_id = $1 AND m.is_active = true
                    ORDER BY m.priority DESC
                    LIMIT 1
                """

                row = await conn.fetchrow(query, chat_id)

                if row:
                    moderator = ModeratorInfo(
                        moderator_id=row['moderator_id'],
                        telegram_id=row['telegram_id'],
                        username=row['username'],
                        is_active=row['is_active'],
                        api_endpoint=row.get('api_endpoint')
                    )
                    logger.info(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: {moderator.username}")
                    return moderator
                else:
                    logger.warning(f"‚ö†Ô∏è  –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    return None

        except asyncpg.PostgresError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {e}", exc_info=True)
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}", exc_info=True)
            return None

    async def send_to_moderator(
        self,
        decision: Agent5Decision,
        moderator: ModeratorInfo
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—Ä–¥–∏–∫—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ REST API

        –†–µ–∞–ª–∏–∑—É–µ—Ç retry –ª–æ–≥–∏–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫

        Args:
            decision: –†–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            moderator: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        if not self.http_session:
            raise RuntimeError("HTTP session –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–ª–∏ –æ–±—â–∏–π)
        if moderator.api_endpoint:
            url = moderator.api_endpoint
        else:
            url = f"{self.api_base_url}/moderator/{moderator.moderator_id}/verdict"

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        payload = {
            'decision': decision.to_json(),
            'moderator_id': moderator.moderator_id,
            'telegram_id': moderator.telegram_id,
            'timestamp': datetime.now().isoformat()
        }

        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'TelegramModerationBot-Agent5/1.0'
        }

        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å retry
        for attempt in range(1, self.max_retries + 1):
            try:
                logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries}: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ {url}")

                async with self.http_session.post(
                    url,
                    json=payload,
                    headers=headers
                ) as response:

                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"‚úÖ –í–µ—Ä–¥–∏–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result}")
                        return True
                    elif response.status >= 500:
                        # –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ - retry
                        logger.warning(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ {response.status}, –ø–æ–≤—Ç–æ—Ä...")
                        if attempt < self.max_retries:
                            await asyncio.sleep(2 ** attempt)  # Exponential backoff
                            continue
                    else:
                        # –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ retry
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API {response.status}: {error_text}")
                        return False

            except aiohttp.ClientError as e:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                if attempt < self.max_retries:
                    await asyncio.sleep(2 ** attempt)
                    continue
            except asyncio.TimeoutError:
                logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                if attempt < self.max_retries:
                    await asyncio.sleep(2 ** attempt)
                    continue
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
                return False

        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ä–¥–∏–∫—Ç –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False


# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

async def main():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ê–≥–µ–Ω—Ç–∞ ‚Ññ5
    """
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    db_config = {
        'host': os.getenv('DB_HOST', 'localhost'),
        'port': int(os.getenv('DB_PORT', 5432)),
        'user': os.getenv('DB_USER', 'postgres'),
        'password': os.getenv('DB_PASSWORD', 'password'),
        'database': os.getenv('DB_NAME', 'telegram_moderation')
    }

    # –ë–∞–∑–æ–≤—ã–π URL REST API
    api_base_url = os.getenv('API_BASE_URL', 'http://localhost:8000/api/v1')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    agent = Agent5(
        db_config=db_config,
        api_base_url=api_base_url,
        api_timeout=30,
        max_retries=3
    )

    try:
        await agent.initialize()
        logger.info("üöÄ –ê–≥–µ–Ω—Ç ‚Ññ5 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        # –ü—Ä–∏–º–µ—Ä: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ—Ç –ê–≥–µ–Ω—Ç–∞ ‚Ññ2
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (RabbitMQ, Kafka –∏ —Ç.–¥.)

        test_report = Agent2Report(
            report_id="report_12345",
            message_id=98765,
            chat_id=-1001234567890,
            user_id=123456789,
            message_text="–ö—É–ø–∏—Ç—å –¥–µ—à–µ–≤–æ! –ö–ª–∏–∫–∞–π –∑–¥–µ—Å—å –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞!",
            agent3_verdict=AgentVerdict(
                agent_id=3,
                verdict=VerdictType.REJECT,
                confidence=0.85,
                reasoning="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã",
                timestamp=datetime.now()
            ),
            agent4_verdict=AgentVerdict(
                agent_id=4,
                verdict=VerdictType.WARNING,
                confidence=0.65,
                reasoning="–í–æ–∑–º–æ–∂–Ω—ã–π —Å–ø–∞–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
                timestamp=datetime.now()
            ),
            is_conflicting=True,
            metadata={}
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞
        success = await agent.process_report(test_report)

        if success:
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞")

        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä:
        # while True:
        #     report = await get_report_from_queue()
        #     await agent.process_report(report)

    except KeyboardInterrupt:
        logger.info("‚è∏Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        await agent.cleanup()
        logger.info("üëã –ê–≥–µ–Ω—Ç ‚Ññ5 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
    """
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
