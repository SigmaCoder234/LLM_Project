#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ß–ê–¢-–ê–ì–ï–ù–¢ ‚Ññ5 - –§–∏–Ω–∞–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä
"""

import asyncio
import logging
import redis
import json

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

REDIS_HOST = "localhost"
REDIS_PORT = 6379

class Agent5:
    def __init__(self):
        try:
            self.redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)
            self.redis_client.ping()
            logger.info("üöÄ –ê–≥–µ–Ω—Ç ‚Ññ5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
            self.redis_client = None
    
    def run(self):
        logger.info("‚úÖ –ê–≥–µ–Ω—Ç ‚Ññ5 –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å")
        asyncio.run(self.listen())
    
    async def make_decision(self, agent3_result, agent4_result):
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ"""
        if agent3_result or agent4_result:
            return True
        return False
    
    async def listen(self):
        try:
            while True:
                if self.redis_client:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤
                        msg3 = self.redis_client.blpop("queue:agent3_output", timeout=1)
                        msg4 = self.redis_client.blpop("queue:agent4_output", timeout=1)
                        
                        if msg3 or msg4:
                            logger.info(f"üì® –ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤")
                    except:
                        pass
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("‚ùå –ê–≥–µ–Ω—Ç ‚Ññ5 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    agent = Agent5()
    agent.run()
