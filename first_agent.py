#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ß–ê–¢-–ê–ì–ï–ù–¢ ‚Ññ1 —Å PostgreSQL - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä (–ì–û–¢–û–í–´–ô ACCESS TOKEN)
"""

import asyncio
import json
import os
import time
import uuid
from contextlib import asynccontextmanager
from dataclasses import dataclass, asdict, field
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import httpx
import uvicorn
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from loguru import logger
import redis

# SQLAlchemy imports
from sqlalchemy import (
    create_engine, Column, Integer, BigInteger, String, Text, Boolean,
    Float, DateTime, JSON, ForeignKey, Index, UniqueConstraint
)
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.sql import func
from sqlalchemy.future import select
from sqlalchemy.dialects.postgresql import UUID as PostgresUUID, INTERVAL

# =========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ì–û–¢–û–í–´–ô ACCESS TOKEN)
# =========================
class Config:
    GIGACHAT_API_URL = "https://gigachat.devices.sberbank.ru/api/v1"
    
    # PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    POSTGRES_HOST = os.getenv("POSTGRES_HOST", "176.108.248.211")
    POSTGRES_PORT = int(os.getenv("POSTGRES_PORT", "5432"))
    POSTGRES_DB = os.getenv("POSTGRES_DB", "teleguard_db")
    POSTGRES_USER = os.getenv("POSTGRES_USER", "tguser")
    POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD", "mnvm7110")
    
    # Redis –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379")
    
    # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    API_HOST = os.getenv("API_HOST", "0.0.0.0")
    API_PORT = int(os.getenv("API_PORT", "8001"))
    
    # Redis –æ—á–µ—Ä–µ–¥–∏/–∫–∞–Ω–∞–ª—ã
    QUEUE_TO_AGENT_2 = "queue:agent1_to_agent2"
    CHANNEL_STATUS_UPDATES = "channel:status_updates"
    CHANNEL_ERROR_NOTIFICATIONS = "channel:errors"
    CHANNEL_HEALTH_CHECKS = "channel:health_checks"
    
    # –õ–∏–º–∏—Ç—ã GigaChat
    MAX_TOKENS_PER_REQUEST = 1024
    MAX_REQUESTS_PER_SECOND = 8
    
    # –ì–∏–≥–∞–ß–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ì–û–¢–û–í–´–ô ACCESS TOKEN
    from token inport TOKEN
    GIGACHAT_ACCESS_TOKEN = TOKEN
    @property
    def database_url(self) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π URL –¥–ª—è PostgreSQL"""
        return f"postgresql+asyncpg://{self.POSTGRES_USER}:{self.POSTGRES_PASSWORD}@{self.POSTGRES_HOST}:{self.POSTGRES_PORT}/{self.POSTGRES_DB}"
    
    @property
    def sync_database_url(self) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü PostgreSQL"""
        return f"postgresql://{self.POSTGRES_USER}:{self.POSTGRES_PASSWORD}@{self.POSTGRES_HOST}:{self.POSTGRES_PORT}/{self.POSTGRES_DB}"

# =========================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =========================
Path("logs").mkdir(exist_ok=True)
logger.remove()
logger.add(
    "logs/agent_1_{time:YYYY-MM-DD}.log",
    rotation="1 day",
    retention="30 days",
    level="INFO",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name}:{function}:{line} | {message}"
)
logger.add(lambda msg: print(msg, end=""), level="INFO", format="{time:HH:mm:ss} | {level} | {message}")

# =========================
# SQLAlchemy Models
# =========================
Base = declarative_base()

class Chat(Base):
    __tablename__ = "chats"
    chat_id = Column(BigInteger, primary_key=True, index=True)
    title = Column(String(255), nullable=True)
    chat_type = Column(String(50), default="group")
    added_at = Column(DateTime(timezone=True), default=func.now())
    ruleset_id = Column(Integer, ForeignKey("chat_rulesets.id"), nullable=True)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime(timezone=True), default=func.now())
    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())
    
    # Relationships
    moderators = relationship("Moderator", back_populates="chat")
    messages = relationship("Message", back_populates="chat")
    rulesets = relationship("ChatRuleset", back_populates="chat")
    logs = relationship("ModerationLog", back_populates="chat")

class Moderator(Base):
    __tablename__ = "moderators"
    chat_id = Column(BigInteger, ForeignKey("chats.chat_id"), primary_key=True)
    user_id = Column(BigInteger, primary_key=True, index=True)
    username = Column(String(255), nullable=True)
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    added_by = Column(BigInteger, nullable=True)
    added_at = Column(DateTime(timezone=True), default=func.now())
    is_active = Column(Boolean, default=True)
    permissions = Column(JSON, default=dict)
    
    # Relationships
    chat = relationship("Chat", back_populates="moderators")

class Message(Base):
    __tablename__ = "messages"
    id = Column(Integer, primary_key=True, autoincrement=True)
    chat_id = Column(BigInteger, ForeignKey("chats.chat_id"), nullable=False, index=True)
    message_id = Column(BigInteger, nullable=False, index=True)
    user_id = Column(BigInteger, nullable=False, index=True)
    username = Column(String(255), nullable=True)
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    message_text = Column(Text, nullable=True)
    message_type = Column(String(50), default="text")
    links_json = Column(JSON, default=list)
    created_at = Column(DateTime(timezone=True), default=func.now(), index=True)
    
    # –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    normalized_text = Column(Text, nullable=True)
    rules_applied = Column(JSON, default=list)
    confidence_score = Column(Float, default=0.0)
    processing_time_ms = Column(Integer, default=0)
    correlation_id = Column(String(36), nullable=True, index=True)
    processed_by = Column(String(50), default="agent_1")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    verdict = Column(String(50), nullable=True)
    action_taken = Column(String(100), nullable=True)
    ai_response = Column(Text, nullable=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    error_message = Column(Text, nullable=True)
    processed_at = Column(DateTime(timezone=True), nullable=True)
    
    # Relationships
    chat = relationship("Chat", back_populates="messages")
    
    __table_args__ = (UniqueConstraint('chat_id', 'message_id', name='uq_chat_message'),)

# =========================
# GigaChat –∫–ª–∏–µ–Ω—Ç (–ì–û–¢–û–í–´–ô ACCESS TOKEN)
# =========================
class GigaChatClient:
    def __init__(self, access_token: str):
        self.access_token = access_token
        self._request_count = 0
        self._last_request_time = 0.0
        logger.info("üîß GigaChat –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –≥–æ—Ç–æ–≤—ã–º Access Token")
    
    async def _ensure_rate_limit(self):
        now = time.time()
        min_interval = 1.0 / Config.MAX_REQUESTS_PER_SECOND
        delta = now - self._last_request_time
        if delta < min_interval:
            await asyncio.sleep(min_interval - delta)
        self._last_request_time = time.time()
    
    async def test_token(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Access Token"""
        test_url = f"{Config.GIGACHAT_API_URL}/models"
        
        headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Accept": "application/json",
        }
        
        try:
            async with httpx.AsyncClient(verify=False, timeout=15.0) as client:
                response = await client.get(test_url, headers=headers)
                
                if response.status_code == 200:
                    models = response.json()
                    logger.success(f"‚úÖ Access Token —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models.get('data', []))}")
                    return True
                else:
                    logger.error(f"‚ùå Access Token –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    async def chat_completion(self, messages: List[Dict[str, str]], model: str = "GigaChat") -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat API —Å –≥–æ—Ç–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
        await self._ensure_rate_limit()
        
        headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Content-Type": "application/json",
            "Accept": "application/json",
        }
        
        payload = {
            "model": model,
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": Config.MAX_TOKENS_PER_REQUEST,
            "stream": False,
        }
        
        try:
            async with httpx.AsyncClient(verify=False, timeout=30.0) as client:
                response = await client.post(f"{Config.GIGACHAT_API_URL}/chat/completions", headers=headers, json=payload)
                logger.debug(f"üß† GigaChat completion request: status={response.status_code}")
                response.raise_for_status()
                
                result = response.json()
                self._request_count += 1
                logger.debug(f"‚úÖ GigaChat –∑–∞–ø—Ä–æ—Å #{self._request_count} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ GigaChat API: {e}")
            raise

# =========================
# Database Manager —Å PostgreSQL
# =========================
class DatabaseManager:
    def __init__(self, database_url: str, sync_database_url: str):
        self.database_url = database_url
        self.sync_database_url = sync_database_url
        self.engine = None
        self.async_session_factory = None
    
    async def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            sync_engine = create_engine(self.sync_database_url, echo=False)
            Base.metadata.create_all(sync_engine)
            sync_engine.dispose()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ PostgreSQL
            self.engine = create_async_engine(
                self.database_url,
                echo=False,
                future=True,
                pool_pre_ping=True,
                pool_recycle=3600,
                pool_size=10,
                max_overflow=20
            )
            
            self.async_session_factory = async_sessionmaker(
                self.engine,
                class_=AsyncSession,
                expire_on_commit=False
            )
            
            logger.success(f"üóÑÔ∏è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.database_url}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PostgreSQL: {e}")
            raise
    
    async def close_database(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL"""
        if self.engine:
            await self.engine.dispose()
            logger.info("üóÑÔ∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")

# =========================
# –û—Å–Ω–æ–≤–Ω–æ–π –ê–≥–µ–Ω—Ç ‚Ññ1 (–ì–û–¢–û–í–´–ô ACCESS TOKEN)
# =========================
class ChatAgent1:
    def __init__(self, access_token: str, redis_url: str, database_manager):
        self.gigachat = GigaChatClient(access_token)
        self.db = database_manager
        self.agent_id = "agent_1"
        self.start_time = datetime.now()
        self.processed_messages_count = 0
        self.error_count = 0
        logger.info("üöÄ –ß–∞—Ç-–∞–≥–µ–Ω—Ç ‚Ññ1 —Å PostgreSQL –∑–∞–ø—É—â–µ–Ω —Å –≥–æ—Ç–æ–≤—ã–º Access Token")

# =========================
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# =========================
agent: Optional[ChatAgent1] = None
database_manager = None
config = Config()

# =========================
# –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π lifespan FastAPI (–ì–û–¢–û–í–´–ô ACCESS TOKEN)
# =========================
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    global agent, database_manager
    
    access_token = config.GIGACHAT_ACCESS_TOKEN
    
    logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π Access Token: {access_token[:50]}...")
    logger.info(f"üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL: {config.database_url}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL
    database_manager = DatabaseManager(config.database_url, config.sync_database_url)
    await database_manager.init_database()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    agent = ChatAgent1(access_token, config.REDIS_URL, database_manager)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    if await agent.gigachat.test_token():
        logger.success("‚úÖ –ê–≥–µ–Ω—Ç ‚Ññ1 —Å PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (—Å –≥–æ—Ç–æ–≤—ã–º Access Token)")
    else:
        logger.error("‚ùå Access Token –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        raise RuntimeError("Invalid Access Token")
    
    yield
    
    # Shutdown
    if database_manager:
        await database_manager.close_database()
    logger.info("üõë –ê–≥–µ–Ω—Ç ‚Ññ1 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# =========================
# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ì–û–¢–û–í–´–ô ACCESS TOKEN)
# =========================
app = FastAPI(
    title="ü§ñ –ß–∞—Ç-–∞–≥–µ–Ω—Ç ‚Ññ1 —Å PostgreSQL (–ì–æ—Ç–æ–≤—ã–π Access Token)",
    description="–ê–≥–µ–Ω—Ç ‚Ññ1: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –ø—Ä–∞–≤–∏–ª–∞, GigaChat —Å –≥–æ—Ç–æ–≤—ã–º Access Token, PostgreSQL",
    version="7.0.0",
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)

@app.get("/")
async def root():
    return {
        "service": "–ß–∞—Ç-–∞–≥–µ–Ω—Ç ‚Ññ1 —Å PostgreSQL (–ì–æ—Ç–æ–≤—ã–π Access Token)",
        "version": "7.0.0",
        "status": "running",
        "updates": [
            "üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π Access Token –≤–º–µ—Å—Ç–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è",
            "‚ö° –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
            "üìù Access Token –≤—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–¥",
            "üß™ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–æ—Ç–∞"
        ],
        "features": [
            "üóÑÔ∏è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å SQLAlchemy ORM",
            "üîß –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π lifespan FastAPI",
            "üîë GigaChat —Å –≥–æ—Ç–æ–≤—ã–º Access Token",
            "üìä –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏",
            "üõ°Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        ],
        "database": {
            "type": "postgresql",
            "host": config.POSTGRES_HOST,
            "port": config.POSTGRES_PORT,
            "database": config.POSTGRES_DB,
            "orm": "SQLAlchemy 2.0 + async sessions"
        },
        "gigachat_auth": {
            "method": "ready_access_token",
            "token_length": len(config.GIGACHAT_ACCESS_TOKEN),
            "note": "–¢–æ–∫–µ–Ω –≤—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–¥"
        }
    }

@app.get("/health")
async def health():
    if not agent:
        return {"status": "error", "message": "–ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token_valid = await agent.gigachat.test_token()
    
    return {
        "status": "healthy" if token_valid else "degraded",
        "agent_id": agent.agent_id,
        "uptime_seconds": int((datetime.now() - agent.start_time).total_seconds()),
        "processed_messages": agent.processed_messages_count,
        "error_count": agent.error_count,
        "gigachat_auth": "ready_access_token",
        "token_valid": token_valid,
        "database": "postgresql",
        "version": "7.0.0"
    }

# =========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–ì–û–¢–û–í–´–ô ACCESS TOKEN)
# =========================
if __name__ == "__main__":
    print("=" * 70)
    print("üöÄ –ß–ê–¢-–ê–ì–ï–ù–¢ ‚Ññ1 —Å PostgreSQL - READY ACCESS TOKEN")
    print("=" * 70)
    print("üîë Access Token –≤—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–¥ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("‚ö° –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("üß™ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram –±–æ—Ç–∞")
    print("‚è∞ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Access Token –º–æ–∂–µ—Ç –∏—Å—Ç–µ—á—å —á–µ—Ä–µ–∑ ~30 –º–∏–Ω—É—Ç")
    print()
    print("üîÑ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑:")
    print("   python get_gigachat_token.py")
    print()
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ê–≥–µ–Ω—Ç ‚Ññ1...")
    print("=" * 70)
    
    uvicorn.run(
        app,
        host=config.API_HOST,
        port=config.API_PORT,
        reload=False,
        access_log=True,
        log_level="info",
    )
