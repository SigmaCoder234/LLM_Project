#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–ì–ï–ù–¢ ‚Ññ1 ‚Äî –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ - —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã)
"""

import requests
import json
import redis
import time
import logging
from typing import Dict, Any
import urllib3
from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, ForeignKey, BigInteger, Text
from sqlalchemy.orm import declarative_base, sessionmaker, relationship
import asyncio
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import threading

# –û—Ç–∫–ª—é—á–∞–µ–º warning SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ============================================================================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ============================================================================
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [–ê–ì–ï–ù–¢ 1] %(levelname)s: %(message)s'
)
logger = logging.getLogger(__name__)

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–î (–û–î–ò–ù–ê–ö–û–í–ê–Ø –° –ê–ì–ï–ù–¢–û–ú 3.2)
# ============================================================================
POSTGRES_URL = 'postgresql://tguser:mnvm7110@176.108.248.211:5432/teleguard_db?sslmode=disable'

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø REDIS
# ============================================================================
REDIS_HOST = "localhost"
REDIS_PORT = 6379
REDIS_DB = 0
REDIS_PASSWORD = None

# –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
QUEUE_AGENT_1_INPUT = "queue:agent1:input"
QUEUE_AGENT_2_INPUT = "queue:agent2:input"
QUEUE_TELEGRAM_INPUT = "queue:telegram:input"

# ============================================================================
# –ú–û–î–ï–õ–ò –ë–î (–ï–î–ò–ù–´–ï –î–õ–Ø –í–°–ï–• –ê–ì–ï–ù–¢–û–í)
# ============================================================================
Base = declarative_base()

class Chat(Base):
    __tablename__ = 'chats'
    id = Column(Integer, primary_key=True)
    tg_chat_id = Column(String, unique=True, nullable=False)
    title = Column(String, nullable=True)
    chat_type = Column(String, default='group')
    added_at = Column(DateTime, default=datetime.utcnow)
    is_active = Column(Boolean, default=True)
    
    messages = relationship('Message', back_populates='chat', cascade="all, delete")
    moderators = relationship('Moderator', back_populates='chat', cascade="all, delete")
    negative_messages = relationship('NegativeMessage', back_populates='chat', cascade="all, delete")

class Message(Base):
    __tablename__ = 'messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    message_id = Column(BigInteger, nullable=False)
    sender_username = Column(String)
    sender_id = Column(BigInteger)
    message_text = Column(Text)
    message_link = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)
    processed_at = Column(DateTime)
    ai_response = Column(Text)
    
    chat = relationship('Chat', back_populates='messages')

class Moderator(Base):
    __tablename__ = 'moderators'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    username = Column(String)
    telegram_user_id = Column(BigInteger)
    is_active = Column(Boolean, default=True)
    added_at = Column(DateTime, default=datetime.utcnow)
    
    chat = relationship('Chat', back_populates='moderators')

class NegativeMessage(Base):
    __tablename__ = 'negative_messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    message_link = Column(String)
    sender_username = Column(String)
    sender_id = Column(BigInteger)
    negative_reason = Column(Text)
    is_sent_to_moderators = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    agent_id = Column(Integer)
    
    chat = relationship('Chat', back_populates='negative_messages')

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î –ò REDIS
# ============================================================================
engine = create_engine(POSTGRES_URL)
Base.metadata.create_all(engine)
SessionLocal = sessionmaker(bind=engine)

def get_db_session():
    return SessionLocal()

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –¢–ò–ü–ê –ß–ê–¢–ê
# ============================================================================
def is_group_chat(chat_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–≤—ã–º"""
    return chat_type in ['group', 'supergroup', 'channel']

def is_group_chat_id(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ chat_id –≥—Ä—É–ø–ø–æ–≤—ã–º (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID)"""
    return chat_id < 0

# ============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–ì–ï–ù–¢–ê 1 (–¢–û–õ–¨–ö–û –ì–†–£–ü–ü–û–í–´–ï –ß–ê–¢–´)
# ============================================================================
def coordination_agent_1(input_data, db_session):
    """
    –ê–ì–ï–ù–¢ 1 ‚Äî –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¢–û–õ–¨–ö–û –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏ –≥–æ—Ç–æ–≤–∏—Ç –∏—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    message = input_data.get("message", "")
    user_id = input_data.get("user_id")
    username = input_data.get("username", "")
    chat_id = input_data.get("chat_id")
    message_id = input_data.get("message_id")
    message_link = input_data.get("message_link", "")
    
    logger.info(f"–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} –≤ —á–∞—Ç–µ {chat_id}")
    
    # –ü–†–û–í–ï–†–Ø–ï–ú: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
    if not is_group_chat_id(chat_id):
        logger.info(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ {chat_id} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return {
            "agent_id": 1,
            "action": "skip",
            "reason": f"–õ–∏—á–Ω—ã–µ —á–∞—Ç—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è. Chat ID: {chat_id}",
            "message": message,
            "user_id": user_id,
            "username": username,
            "chat_id": chat_id,
            "message_id": message_id,
            "status": "skipped_private_chat"
        }
    
    if not message:
        return {
            "agent_id": 1,
            "action": "skip",
            "reason": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message": "",
            "user_id": user_id,
            "username": username,
            "chat_id": chat_id,
            "message_id": message_id,
            "status": "skipped"
        }
    
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞
    rules = [
        "–ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤",
        "–ó–∞–ø—Ä–µ—â–µ–Ω—ã –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        "–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è –ø–æ –ª—é–±—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º (–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, —Ä–∞—Å–∞, —Ä–µ–ª–∏–≥–∏—è)",
        "–ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º, —Ñ–ª—É–¥ –∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "–ó–∞–ø—Ä–µ—â–µ–Ω—ã —É–≥—Ä–æ–∑—ã –∏ –ø—Ä–∏–∑—ã–≤—ã –∫ –Ω–∞—Å–∏–ª–∏—é"
    ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î (—Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã)
    try:
        chat = db_session.query(Chat).filter_by(tg_chat_id=str(chat_id)).first()
        if not chat:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –ø–æ ID
            chat_type = "supergroup" if chat_id < -1000000000000 else "group"
            
            chat = Chat(
                tg_chat_id=str(chat_id),
                chat_type=chat_type
            )
            db_session.add(chat)
            db_session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –ø–æ —Ç–∏–ø—É –∏–∑ –ë–î
        if not is_group_chat(chat.chat_type):
            logger.info(f"üö´ –ß–∞—Ç {chat_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–≤—ã–º (—Ç–∏–ø: {chat.chat_type})")
            return {
                "agent_id": 1,
                "action": "skip",
                "reason": f"–ß–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–≤—ã–º. –¢–∏–ø: {chat.chat_type}",
                "message": message,
                "user_id": user_id,
                "username": username,
                "chat_id": chat_id,
                "message_id": message_id,
                "status": "skipped_non_group"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        existing_message = db_session.query(Message).filter_by(
            chat_id=chat.id, 
            message_id=message_id
        ).first()
        
        if not existing_message:
            msg = Message(
                chat_id=chat.id,
                message_id=message_id,
                sender_username=username,
                sender_id=user_id,
                message_text=message,
                message_link=message_link,
                processed_at=datetime.utcnow()
            )
            db_session.add(msg)
            db_session.commit()
            logger.info("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ê–≥–µ–Ω—Ç–∞ 2
    agent_data = {
        "message": message,
        "rules": rules,
        "user_id": user_id,
        "username": username,
        "chat_id": chat_id,
        "message_id": message_id,
        "message_link": message_link,
        "timestamp": datetime.now().isoformat()
    }
    
    output = {
        "agent_id": 1,
        "action": "forward",
        "reason": "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç—É 2 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        "message": message,
        "user_id": user_id,
        "username": username,
        "chat_id": chat_id,
        "message_id": message_id,
        "message_link": message_link,
        "rules": rules,
        "agent_data": agent_data,
        "status": "success",
        "timestamp": datetime.now().isoformat()
    }
    
    logger.info(f"üìã –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ {chat_id} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    return output

# ============================================================================
# REDIS WORKER
# ============================================================================
class Agent1Worker:
    def __init__(self):
        try:
            redis_config = {
                "host": REDIS_HOST,
                "port": REDIS_PORT,
                "db": REDIS_DB,
                "password": REDIS_PASSWORD,
                "decode_responses": True
            }
            self.redis_client = redis.Redis(**redis_config)
            self.redis_client.ping()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ: {REDIS_HOST}:{REDIS_PORT}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
            raise
    
    def process_message(self, message_data, db_session):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ö–æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏"""
        try:
            input_data = json.loads(message_data)
            result = coordination_agent_1(input_data, db_session)
            return result
        except json.JSONDecodeError as e:
            logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")
            return {
                "agent_id": 1,
                "action": "error",
                "reason": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}",
                "message": "",
                "status": "json_error"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                "agent_id": 1,
                "action": "error",
                "reason": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ 1: {e}",
                "message": "",
                "status": "error"
            }
    
    def send_to_agent_2(self, result):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É 2 (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç)"""
        if result.get("action") == "forward":
            try:
                agent_data = result.get("agent_data", {})
                result_json = json.dumps(agent_data, ensure_ascii=False)
                self.redis_client.rpush(QUEUE_AGENT_2_INPUT, result_json)
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç—É 2")
                return True
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç—É 2: {e}")
                return False
        elif result.get("action") == "skip":
            logger.info(f"‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')}")
        return False
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç 1 –∑–∞–ø—É—â–µ–Ω (—Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã)")
        logger.info(f"   –°–ª—É—à–∞—é –æ—á–µ—Ä–µ–¥—å: {QUEUE_AGENT_1_INPUT}")
        logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –ê–≥–µ–Ω—Ç–∞ 2: {QUEUE_AGENT_2_INPUT}")
        logger.info("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        db_session = None
        try:
            while True:
                try:
                    result = self.redis_client.blpop(QUEUE_AGENT_1_INPUT, timeout=1)
                    if result is None:
                        continue
                    
                    queue_name, message_data = result
                    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    db_session = get_db_session()
                    output = self.process_message(message_data, db_session)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç—É 2 (—Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã)
                    sent_to_agent2 = self.send_to_agent_2(output)
                    
                    db_session.close()
                    
                    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                    if db_session:
                        db_session.close()
                    time.sleep(1)
                    
        except KeyboardInterrupt:
            logger.info("\n‚ùå –ê–≥–µ–Ω—Ç 1 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Ctrl+C)")
        finally:
            if db_session:
                db_session.close()
            logger.info("–ê–≥–µ–Ω—Ç 1 –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

# ============================================================================
# FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# ============================================================================
app = FastAPI(
    title="ü§ñ –ê–≥–µ–Ω—Ç ‚Ññ1 - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä",
    description="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã)",
    version="1.1"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "online",
        "agent_id": 1,
        "name": "–ê–≥–µ–Ω—Ç ‚Ññ1 (–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä)",
        "version": "1.1",
        "description": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã",
        "timestamp": datetime.now().isoformat(),
        "redis_queue": QUEUE_AGENT_1_INPUT,
        "uptime_seconds": int(time.time())
    }

@app.post("/process_message")
async def process_message_endpoint(message_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API"""
    db_session = get_db_session()
    try:
        result = coordination_agent_1(message_data, db_session)
        return result
    finally:
        db_session.close()

@app.get("/stats")
async def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã)"""
    db_session = get_db_session()
    try:
        # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
        group_chats = db_session.query(Chat).filter(
            Chat.chat_type.in_(['group', 'supergroup', 'channel'])
        ).all()
        
        total_messages = 0
        processed_today = 0
        
        for chat in group_chats:
            chat_messages = db_session.query(Message).filter_by(chat_id=chat.id).count()
            total_messages += chat_messages
            
            today_messages = db_session.query(Message).filter(
                Message.chat_id == chat.id,
                Message.processed_at >= datetime.now().date()
            ).count()
            processed_today += today_messages
        
        return {
            "total_messages": total_messages,
            "processed_today": processed_today,
            "group_chats_count": len(group_chats),
            "agent_id": 1,
            "timestamp": datetime.now().isoformat()
        }
    finally:
        db_session.close()

# ============================================================================
# –ó–ê–ü–£–°–ö FASTAPI –í –û–¢–î–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï
# ============================================================================
def run_fastapi():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
    uvicorn.run(app, host="localhost", port=8001, log_level="info")

# ============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ============================================================================
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        mode = sys.argv[1]
        if mode == "test":
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≥—Ä—É–ø–ø–æ–≤—ã–º —á–∞—Ç–æ–º
            test_input = {
                "message": "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?",
                "user_id": 123,
                "username": "test_user",
                "chat_id": -1001234567890,  # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID)
                "message_id": 1,
                "message_link": "https://t.me/test/1"
            }
            
            db_session = get_db_session()
            result = coordination_agent_1(test_input, db_session)
            db_session.close()
            print(json.dumps(result, ensure_ascii=False, indent=2))
            
            # –¢–µ—Å—Ç —Å –ª–∏—á–Ω—ã–º —á–∞—Ç–æ–º (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω)
            test_private = {
                "message": "–ü—Ä–∏–≤–µ—Ç –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞!",
                "user_id": 123,
                "username": "test_user",
                "chat_id": 1234567890,  # –õ–∏—á–Ω—ã–π —á–∞—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID)
                "message_id": 2,
                "message_link": "https://t.me/test/2"
            }
            
            db_session = get_db_session()
            result_private = coordination_agent_1(test_private, db_session)
            db_session.close()
            print("\n--- –¢–µ—Å—Ç –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ ---")
            print(json.dumps(result_private, ensure_ascii=False, indent=2))
            
        elif mode == "api":
            # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ FastAPI
            run_fastapi()
    else:
        # –ó–∞–ø—É—Å–∫ FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        fastapi_thread = threading.Thread(target=run_fastapi, daemon=True)
        fastapi_thread.start()
        logger.info("‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001")
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Redis worker
        try:
            worker = Agent1Worker()
            worker.run()
        except KeyboardInterrupt:
            logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")