#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
=============================================================================
–ß–ê–¢-–ê–ì–ï–ù–¢ ‚Ññ2 —Å PostgreSQL - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
=============================================================================
- –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram Bot
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–µ—Ä–µ–∑ GigaChat API
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ê–≥–µ–Ω—Ç–æ–≤ ‚Ññ3 –∏ ‚Ññ4
- REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–Ω–∞–ª–∏–∑
=============================================================================
"""

import asyncio
import json
import os
import time
import uuid
from dataclasses import dataclass, field
from datetime import datetime
from typing import Any, Dict, List, Optional

import httpx
import uvicorn
from fastapi import FastAPI, HTTPException
from loguru import logger

import redis

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===

@dataclass
class Agent2Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ê–≥–µ–Ω—Ç–∞ ‚Ññ2"""
    redis_url: str = os.getenv("REDIS_URL", "redis://localhost:6379")
    gigachat_credentials: str = os.getenv("GIGACHAT_CREDENTIALS", "")
    api_host: str = os.getenv("API_HOST", "0.0.0.0")
    api_port: int = int(os.getenv("API_PORT_2", "8002"))
    
    # Redis –æ—á–µ—Ä–µ–¥–∏
    queue_agent_3_input: str = "queue:agent3:input"
    queue_agent_4_input: str = "queue:agent4:input"
    queue_results: str = "queue:agent2:results"

config = Agent2Config()

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===

logger.add(
    f"agent2_{datetime.now().strftime('%Y-%m-%d')}.log",
    format="<level>{time:HH:mm:ss}</level> | <level>{level}</level> | {message}",
    level="INFO"
)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

app = FastAPI(title="TeleGuard Agent 2 - Message Analyzer")
redis_client = None

class GigaChatClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat API"""
    
    def __init__(self, credentials: str):
        self.credentials = credentials
        self.token = None
        self.token_expiry = None
    
    async def get_token(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GigaChat"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    "https://ngw.devices.sberbank.ru:443/api/v2/oauth",
                    headers={
                        "RqUID": str(uuid.uuid4()),
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    data={"scope": "GIGACHAT_API_PERS"},
                    auth=(self.credentials, "")
                )
                if response.status_code == 200:
                    data = response.json()
                    self.token = data.get("access_token")
                    logger.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω GigaChat")
                    return self.token
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None
    
    async def analyze_message(self, message_text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GigaChat"""
        if not self.token:
            self.token = await self.get_token()
        
        try:
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏:
            
–°–æ–æ–±—â–µ–Ω–∏–µ: "{message_text}"

–ü—Ä–æ–≤–µ—Ä—å –Ω–∞:
1. –ú–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
2. –°–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞
3. –°—Å—ã–ª–∫–∏ –∏ —Ñ–∏—à–∏–Ω–≥
4. –≠–∫—Å—Ç—Ä–µ–º–∏–∑–º
5. –§–µ–π–∫ –∏ –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–î–∞–π –≤–µ—Ä–¥–∏–∫—Ç: –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç?"""

            async with httpx.AsyncClient(verify=False) as client:
                response = await client.post(
                    "https://gigachat.devices.sberbank.ru/api/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {self.token}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": "GigaChat",
                        "messages": [{"role": "user", "content": prompt}],
                        "temperature": 0.7,
                        "max_tokens": 200
                    },
                    timeout=30
                )
                
                if response.status_code == 200:
                    data = response.json()
                    content = data.get("choices", [{}])[0].get("message", {}).get("content", "")
                    logger.success(f"ü§ñ –û—Ç–≤–µ—Ç GigaChat: {content[:100]}...")
                    return content
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ GigaChat: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        return ""

# === REDIS KOMMUNICATION ===

def send_to_queue(queue_name: str, data: dict) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Redis –æ—á–µ—Ä–µ–¥—å"""
    try:
        redis_client.lpush(queue_name, json.dumps(data, ensure_ascii=False))
        logger.success(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {queue_name}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
        return False

# === REST API ===

gigachat_client = GigaChatClient(config.gigachat_credentials)
message_count = 0
start_time = datetime.now()

@app.post("/process_message")
async def process_message(data: dict):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ"""
    global message_count
    
    try:
        message_text = data.get("message", "")
        user_id = data.get("user_id", 0)
        username = data.get("username", "unknown")
        chat_id = data.get("chat_id", 0)
        message_id = data.get("message_id", 0)
        
        if not message_text:
            raise HTTPException(status_code=400, detail="Message is required")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        analysis_result = await gigachat_client.analyze_message(message_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º
        is_violation = any(word in analysis_result.lower() for word in [
            "–≤–µ—Ä–¥–∏–∫—Ç: –¥–∞", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ", "–Ω–∞—Ä—É—à–∞–µ—Ç", "–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ", 
            "—Å–ø–∞–º", "—Ä–µ–∫–ª–∞–º–∞", "–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", "–º–∞—Ç"
        ])
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "message_id": message_id,
            "chat_id": chat_id,
            "user_id": user_id,
            "username": username,
            "message_text": message_text,
            "is_violation": is_violation,
            "analysis": analysis_result,
            "confidence": 0.8 if is_violation else 0.7,
            "timestamp": datetime.now().isoformat(),
            "correlation_id": str(uuid.uuid4())
        }
        
        # –ï—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏ –∞–≥–µ–Ω—Ç–æ–≤ ‚Ññ3 –∏ ‚Ññ4
        if is_violation:
            send_to_queue(config.queue_agent_3_input, result)
            send_to_queue(config.queue_agent_4_input, result)
            logger.warning(f"üö® –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –æ—Ç @{username}")
        else:
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å—Ç–æ–µ –æ—Ç @{username}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        send_to_queue(config.queue_results, result)
        
        message_count += 1
        
        return {
            "status": "success",
            "is_violation": is_violation,
            "confidence": result["confidence"],
            "message_id": message_id,
            "correlation_id": result["correlation_id"]
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        redis_client.ping()
        redis_connected = True
    except:
        redis_connected = False
    
    uptime = (datetime.now() - start_time).total_seconds()
    
    return {
        "agent_id": 2,
        "status": "healthy",
        "uptime_seconds": int(uptime),
        "processed_messages": message_count,
        "database_connected": True,
        "redis_connected": redis_connected,
        "gigachat_token_valid": gigachat_client.token is not None
    }

@app.get("/metrics")
async def metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    uptime = (datetime.now() - start_time).total_seconds()
    
    try:
        queue_size_3 = redis_client.llen(config.queue_agent_3_input)
        queue_size_4 = redis_client.llen(config.queue_agent_4_input)
    except:
        queue_size_3 = queue_size_4 = 0
    
    return {
        "agent_id": 2,
        "uptime_seconds": int(uptime),
        "processed_messages": message_count,
        "queue_agent3_size": queue_size_3,
        "queue_agent4_size": queue_size_4,
        "messages_per_second": message_count / max(uptime, 1)
    }

@app.get("/")
async def root():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return {
        "name": "TeleGuard Agent 2",
        "version": "2.0",
        "description": "Message Analyzer and Moderator",
        "status": "running"
    }

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

@app.on_event("startup")
async def startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global redis_client
    
    try:
        redis_client = redis.from_url(config.redis_url, decode_responses=True)
        redis_client.ping()
        logger.success(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis: {config.redis_url}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω GigaChat
    token = await gigachat_client.get_token()
    if token:
        logger.success("‚úÖ GigaChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        logger.warning("‚ö†Ô∏è GigaChat –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    logger.success("üöÄ –ê–≥–µ–Ω—Ç ‚Ññ2 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# === –ó–ê–ü–£–°–ö ===

if __name__ == "__main__":
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ê–≥–µ–Ω—Ç–∞ ‚Ññ2 –Ω–∞ {config.api_host}:{config.api_port}...")
    uvicorn.run(app, host=config.api_host, port=config.api_port)
