# -*- coding: utf-8 -*-
"""
–ê–ì–ï–ù–¢ ‚Ññ2 —Å PostgreSQL - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–ì–û–¢–û–í–´–ô ACCESS TOKEN)
"""

import requests
from sqlalchemy import create_engine, Column, Integer, BigInteger, String, Text, Boolean, ForeignKey, TIMESTAMP, func
from sqlalchemy.orm import declarative_base, sessionmaker

# === –ù–ê–°–¢–†–û–ô–ö–ò (–ì–û–¢–û–í–´–ô ACCESS TOKEN) ===
DB_URL = "postgresql://tguser:mnvm7110@176.108.248.211:5432/teleguard_db?sslmode=disable"

# –ì–∏–≥–∞–ß–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ì–û–¢–û–í–´–ô ACCESS TOKEN
from token import TOKEN
GIGACHAT_ACCESS_TOKEN = TOKEN
# === SQLAlchemy ORM ===
engine = create_engine(DB_URL)
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()

class Message(Base):
    __tablename__ = 'messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id', ondelete='CASCADE'), nullable=False)
    sender_username = Column(String)
    sender_id = Column(BigInteger)
    message_text = Column(Text)
    message_link = Column(String)
    created_at = Column(TIMESTAMP, server_default=func.now())

class NegativeMessage(Base):
    __tablename__ = 'negative_messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id', ondelete='CASCADE'), nullable=False)
    message_link = Column(String)
    sender_username = Column(String)
    negative_reason = Column(Text)
    is_sent_to_moderators = Column(Boolean, default=False)
    created_at = Column(TIMESTAMP, server_default=func.now())

# === GIGACHAT FUNCTIONS (–ì–û–¢–û–í–´–ô ACCESS TOKEN) ===
def check_message_with_gigachat(message, rules, prompt, access_token):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GigaChat API —Å –≥–æ—Ç–æ–≤—ã–º Access Token
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        rules: –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞
        prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        access_token: Access Token –¥–ª—è GigaChat API
    
    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç GigaChat –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    
    rules_text = "\n".join(rules)
    system_msg = f"{rules_text}\n{prompt}"
    user_msg = f"{message}"
    
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    
    data = {
        'model': 'GigaChat',
        'messages': [
            {'role': 'system', 'content': system_msg},
            {'role': 'user', 'content': user_msg}
        ],
        'temperature': 0.2,
        'max_tokens': 256
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, verify=False, timeout=30)
        response.raise_for_status()
        result = response.json()
        content = result['choices'][0]['message']['content']
        return content
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat API: {e}")
        return f"–û—à–∏–±–∫–∞ API: {e}"

def parse_gigachat_response(text):
    """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GigaChat"""
    text_lower = text.lower()
    ban = any(word in text_lower for word in ['–∑–∞–ø—Ä–µ—Ç–∏—Ç—å', '–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', '–±–∞–Ω', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ'])
    return {'ban': ban, 'reason': text.strip()}

# === MAIN AGENT FUNCTION (–ì–û–¢–û–í–´–ô TOKEN) ===
def agent_main(chat_id, rules):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ê–≥–µ–Ω—Ç–∞ 2 –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        rules: –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞
    """
    session = SessionLocal()
    
    print("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π Access Token")
    
    prompt = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞. –û—Ç–≤–µ—Ç—å '–∑–∞–ø—Ä–µ—Ç–∏—Ç—å' –µ—Å–ª–∏ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, '—Ä–∞–∑—Ä–µ—à–∏—Ç—å' –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç."
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞
    messages = session.query(Message).filter_by(chat_id=chat_id).order_by(Message.created_at.desc()).limit(100).all()
    
    print(f"üîç –ê–≥–µ–Ω—Ç 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id}")
    
    processed_count = 0
    blocked_count = 0
    
    for msg in messages:
        if not msg.message_text:
            continue
            
        print(f"üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: '{msg.message_text[:50]}...'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GigaChat —Å –≥–æ—Ç–æ–≤—ã–º Access Token
        response_text = check_message_with_gigachat(msg.message_text, rules, prompt, GIGACHAT_ACCESS_TOKEN)
        result = parse_gigachat_response(response_text)
        
        processed_count += 1
        
        if result['ban']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            exists = session.query(NegativeMessage).filter_by(message_link=msg.message_link).first()
            if not exists:
                neg_msg = NegativeMessage(
                    chat_id=msg.chat_id,
                    message_link=msg.message_link,
                    sender_username=msg.sender_username,
                    negative_reason=result['reason']
                )
                session.add(neg_msg)
                blocked_count += 1
                print(f"üö® –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.message_link} - {result['reason']}")
            else:
                print(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {msg.message_link}")
        else:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {result['reason']}")
    
    session.commit()
    session.close()
    
    print(f"üìä –ê–≥–µ–Ω—Ç 2 –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É:")
    print(f"   üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {processed_count}")
    print(f"   üö® –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_count}")
    print(f"   ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ: {processed_count - blocked_count}")

def test_access_token(access_token):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Access Token
    
    Args:
        access_token: Access Token –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    test_url = "https://gigachat.devices.sberbank.ru/api/v1/models"
    
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Accept': 'application/json'
    }
    
    try:
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π Access Token...")
        
        response = requests.get(test_url, headers=headers, verify=False, timeout=15)
        
        if response.status_code == 200:
            models = response.json()
            print(f"‚úÖ Access Token —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models.get('data', []))}")
            return True
        else:
            print(f"‚ùå Access Token –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    print("=" * 60)
    print("üîß –ê–ì–ï–ù–¢ ‚Ññ2 - –ì–û–¢–û–í–´–ô ACCESS TOKEN")
    print("=" * 60)
    print("üîë Access Token –≤—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–¥")
    print(f"üìè –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(GIGACHAT_ACCESS_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")
    print("üß™ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ Telegram –±–æ—Ç–∞")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if test_access_token(GIGACHAT_ACCESS_TOKEN):
        print("‚úÖ Access Token —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å Access Token. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
        exit(1)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    rules = [
        '–ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞', 
        '–ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º', 
        '–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞',
        '–ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è'
    ]
    
    chat_id = 1  # ID —á–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞—Ç–∞ {chat_id}")
    print("=" * 60)
    agent_main(chat_id, rules)
