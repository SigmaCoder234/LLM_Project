# -*- coding: utf-8 -*-
"""
–ê–ì–ï–ù–¢ ‚Ññ3 —Å GigaChat - –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ì–û–¢–û–í–´–ô ACCESS TOKEN)
"""
import requests
import json
import redis
import time
from typing import Dict, Any

# === –ù–ê–°–¢–†–û–ô–ö–ò (–ì–û–¢–û–í–´–ô ACCESS TOKEN) ===
# –ì–∏–≥–∞–ß–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ì–û–¢–û–í–´–ô ACCESS TOKEN
from token inport TOKEN
GIGACHAT_ACCESS_TOKEN = TOKEN
# Redis –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
REDIS_HOST = "localhost"
REDIS_PORT = 6379
REDIS_DB = 0
REDIS_PASSWORD = None  # None –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

# Redis –æ—á–µ—Ä–µ–¥–∏
QUEUE_AGENT3_INPUT = "queue:agent3_input"  # –û—á–µ—Ä–µ–¥—å –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ê–≥–µ–Ω—Ç–∞ 3
QUEUE_AGENT3_OUTPUT = "queue:agent3_output"  # –û—á–µ—Ä–µ–¥—å –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ê–≥–µ–Ω—Ç–∞ 3

# === GIGACHAT FUNCTIONS (–ì–û–¢–û–í–´–ô ACCESS TOKEN) ===
def check_message_with_gigachat(message, rules, prompt, access_token):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GigaChat API —Å –≥–æ—Ç–æ–≤—ã–º Access Token.
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞.
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        rules: –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞
        prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        access_token: Access Token –¥–ª—è GigaChat API
    
    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç GigaChat –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    
    rules_text = "\n".join(rules)
    system_msg = f"{rules_text}\n{prompt}"
    user_msg = f"{message}"
    
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    
    data = {
        'model': 'GigaChat',
        'messages': [
            {'role': 'system', 'content': system_msg},
            {'role': 'user', 'content': user_msg}
        ],
        'temperature': 0.2,
        'max_tokens': 256
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, verify=False, timeout=30)
        response.raise_for_status()
        result = response.json()
        content = result['choices'][0]['message']['content']
        return content
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ GigaChat API: {e}"
        print(error_msg)
        return error_msg

def parse_gigachat_response(text):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GigaChat –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∏ –ø—Ä–∏—á–∏–Ω—É.
    """
    text_lower = text.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    ban_keywords = ['–∑–∞–ø—Ä–µ—Ç–∏—Ç—å', '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', '–±–∞–Ω', '–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ']
    no_ban_keywords = ['—Ä–∞–∑—Ä–µ—à–∏—Ç—å', '–¥–æ–ø—É—Å—Ç–∏–º–æ', '–Ω–æ—Ä–º–∞–ª—å–Ω–æ', '–º–æ–∂–Ω–æ']
    
    # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
    ban = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–æ–≤–∞ "–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
    if any(word in text_lower for word in no_ban_keywords):
        ban = False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–æ–≤–∞ "–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
    elif any(word in text_lower for word in ban_keywords):
        ban = True
    
    return {'ban': ban, 'reason': text.strip()}

def test_access_token(access_token):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Access Token
    
    Args:
        access_token: Access Token –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    test_url = "https://gigachat.devices.sberbank.ru/api/v1/models"
    
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Accept': 'application/json'
    }
    
    try:
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π Access Token...")
        
        response = requests.get(test_url, headers=headers, verify=False, timeout=15)
        
        if response.status_code == 200:
            models = response.json()
            print(f"‚úÖ Access Token —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models.get('data', []))}")
            return True
        else:
            print(f"‚ùå Access Token –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

def moderation_agent3(input_data, access_token: str):
    """
    –§—É–Ω–∫—Ü–∏—è –ê–≥–µ–Ω—Ç–∞ 3 –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≥–æ—Ç–æ–≤—ã–º Access Token.
    
    Args:
        input_data (–æ—Ç –ê–≥–µ–Ω—Ç–∞ 2): {
            'message': '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
            'rules': ['–ø—Ä–∞–≤–∏–ª–æ 1', '–ø—Ä–∞–≤–∏–ª–æ 2', ...],
            'user_id': 12345,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            'username': 'username',  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            'chat_id': -1001234567890,  # ID —á–∞—Ç–∞
            'message_id': 42  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        access_token: –ì–æ—Ç–æ–≤—ã–π Access Token –¥–ª—è GigaChat API
    
    Returns:
        dict: {
            'agent_id': 3,
            'ban': True/False,
            'reason': '–ø—Ä–∏—á–∏–Ω–∞ —Ä–µ—à–µ–Ω–∏—è –æ—Ç –ê–≥–µ–Ω—Ç–∞ 3',
            'message': '–∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            'user_id': 12345,
            'username': 'username',
            'chat_id': -1001234567890,
            'message_id': 42
        }
    """
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    message = input_data.get('message', '')
    rules = input_data.get('rules', [])
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    user_id = input_data.get('user_id')
    username = input_data.get('username')
    chat_id = input_data.get('chat_id')
    message_id = input_data.get('message_id')
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if not message:
        return {
            'agent_id': 3,
            'ban': False,
            'reason': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            'message': '',
            'user_id': user_id,
            'username': username,
            'chat_id': chat_id,
            'message_id': message_id
        }
    
    if not rules:
        return {
            'agent_id': 3,
            'ban': False,
            'reason': '–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
            'message': message,
            'user_id': user_id,
            'username': username,
            'chat_id': chat_id,
            'message_id': message_id
        }
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è GigaChat
    prompt = """
    –¢—ã ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä Telegram-—á–∞—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.
    –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "–∑–∞–ø—Ä–µ—Ç–∏—Ç—å" –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, "—Ä–∞–∑—Ä–µ—à–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ—Ç.
    1. –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∞, —Å–ø–∞–º, —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å
    2. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –º–∞—Ç, —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å  
    3. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∑—ã–≤—ã –∫ –Ω–∞—Ä—É—à–µ–Ω–∏—é –∑–∞–∫–æ–Ω–∞ - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å
    4. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ - —Ä–∞–∑—Ä–µ—à–∏—Ç—å
    5. –í —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ª—É—á—à–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å.
    """
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ê–≥–µ–Ω—Ç–æ–º 3
    print(f"üîç –ê–≥–µ–Ω—Ç 3 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: '{message[:50]}...' —Å –≥–æ—Ç–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GigaChat
    verdict_text = check_message_with_gigachat(message, rules, prompt, access_token)
    
    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç GigaChat
    result = parse_gigachat_response(verdict_text)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    output = {
        'agent_id': 3,
        'ban': result['ban'],
        'reason': result['reason'],
        'message': message,
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        'user_id': user_id,
        'username': username,
        'chat_id': chat_id,
        'message_id': message_id
    }
    
    print(f"‚úÖ –ê–≥–µ–Ω—Ç 3: {'–ë–õ–û–ö–ò–†–û–í–ê–¢–¨' if result['ban'] else '–†–ê–ó–†–ï–®–ò–¢–¨'}")
    return output

class Agent3RedisWorker:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã –ê–≥–µ–Ω—Ç–∞ 3 —Å Redis –æ—á–µ—Ä–µ–¥—è–º–∏.
    """
    
    def __init__(self, access_token: str, redis_config=None):
        """
        Args:
            access_token: –ì–æ—Ç–æ–≤—ã–π Access Token –¥–ª—è –ì–∏–≥–∞–ß–∞—Ç–∞
            redis_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
        """
        self.access_token = access_token
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
        if redis_config is None:
            redis_config = {
                'host': REDIS_HOST,
                'port': REDIS_PORT,
                'db': REDIS_DB,
                'password': REDIS_PASSWORD,
                'decode_responses': True
            }
        
        try:
            self.redis_client = redis.Redis(**redis_config)
            self.redis_client.ping()
            print(f"‚úÖ –ê–≥–µ–Ω—Ç 3 –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Redis {REDIS_HOST}:{REDIS_PORT}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            raise
    
    def process_message(self, message_data):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            message_data: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
            input_data = json.loads(message_data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            result = moderation_agent3(input_data, self.access_token)
            return result
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return {
                'agent_id': 3,
                'ban': False,
                'reason': f'–û—à–∏–±–∫–∞ JSON: {e}',
                'message': ''
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return {
                'agent_id': 3,
                'ban': False,
                'reason': f'–û—à–∏–±–∫–∞ –ê–≥–µ–Ω—Ç–∞ 3: {e}',
                'message': ''
            }
    
    def send_result(self, result):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Redis –æ—á–µ—Ä–µ–¥—å –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            result: dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            result_json = json.dumps(result, ensure_ascii=False)
            self.redis_client.rpush(QUEUE_AGENT3_OUTPUT, result_json)
            print(f"üì§ –ê–≥–µ–Ω—Ç 3 –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ {QUEUE_AGENT3_OUTPUT}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Redis: {e}")
    
    def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –ê–≥–µ–Ω—Ç–∞ 3.
        –°–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å QUEUE_AGENT3_INPUT –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        print(f"üöÄ –ê–≥–µ–Ω—Ç 3 –∑–∞–ø—É—â–µ–Ω —Å –≥–æ—Ç–æ–≤—ã–º Access Token.")
        print(f"üëÇ –°–ª—É—à–∞–µ–º –æ—á–µ—Ä–µ–¥—å: {QUEUE_AGENT3_INPUT}")
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {QUEUE_AGENT3_OUTPUT}")
        print("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C")
        
        while True:
            try:
                # –ë–ª–æ–∫–∏—Ä—É—é—â–µ–µ —á—Ç–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (timeout 1 —Å–µ–∫)
                result = self.redis_client.blpop(QUEUE_AGENT3_INPUT, timeout=1)
                
                if result is None:
                    # –ï—Å–ª–∏ BLPOP –≤–µ—Ä–Ω—É–ª None, –∑–Ω–∞—á–∏—Ç —Ç–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫
                    continue
                    
                queue_name, message_data = result
                print(f"üì® –ê–≥–µ–Ω—Ç 3 –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {queue_name}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                output = self.process_message(message_data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.send_result(output)
                
                print(f"‚úÖ –ê–≥–µ–Ω—Ç 3 –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É")
                
            except KeyboardInterrupt:
                print("\nüõë –ê–≥–µ–Ω—Ç 3 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Ctrl+C)")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(1)
        
        print("üëã –ê–≥–µ–Ω—Ç 3 –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

def test_agent3_local():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –ê–≥–µ–Ω—Ç–∞ 3 –±–µ–∑ Redis."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞ 3 –ë–ï–ó REDIS")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_input = {
        'message': '–ö—É–ø–∏—Ç–µ –¥–µ—à–µ–≤—ã–µ –∞–π—Ñ–æ–Ω—ã! –°–∫–∏–¥–∫–∏!!!',
        'rules': ['–ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞', '–ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º', '–ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å—Å—ã–ª–∫–∏'],
        'user_id': 123456789,
        'username': 'testuser',
        'chat_id': -1001234567890,
        'message_id': 42
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ê–≥–µ–Ω—Ç 3
    result = moderation_agent3(test_input, GIGACHAT_ACCESS_TOKEN)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ê–≥–µ–Ω—Ç–∞ 3:")
    print(json.dumps(result, ensure_ascii=False, indent=2))

def test_agent3_with_redis():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –ê–≥–µ–Ω—Ç–∞ 3 –° Redis."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞ 3 –° REDIS")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
    r = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB, password=REDIS_PASSWORD, decode_responses=True)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_input = {
        'message': '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?',
        'rules': ['–ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞', '–ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º'],
        'user_id': 987654321,
        'username': 'normaluser',
        'chat_id': -1009876543210,
        'message_id': 100
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    test_json = json.dumps(test_input, ensure_ascii=False)
    r.rpush(QUEUE_AGENT3_INPUT, test_json)
    print(f"üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {QUEUE_AGENT3_INPUT}")
    
    print("üîÑ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python third_agent.py")
    print(f"üì• –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏: {QUEUE_AGENT3_OUTPUT}")

if __name__ == "__main__":
    import sys
    
    print("=" * 60)
    print("üîß –ê–ì–ï–ù–¢ ‚Ññ3 - –ì–û–¢–û–í–´–ô ACCESS TOKEN")
    print("=" * 60)
    print("üîë Access Token –≤—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–¥")
    print(f"üìè –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(GIGACHAT_ACCESS_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")
    print("üß™ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ Telegram –±–æ—Ç–∞")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not test_access_token(GIGACHAT_ACCESS_TOKEN):
        print("‚ùå Access Token –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
        exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        mode = sys.argv[1]
        
        if mode == "test":
            # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ Redis
            test_agent3_local()
        elif mode == "send-test":
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis
            test_agent3_with_redis()
        else:
            print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.")
            print("python third_agent.py - –∑–∞–ø—É—Å–∫ –ê–≥–µ–Ω—Ç–∞ 3")
            print("python third_agent.py test - –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ Redis")  
            print("python third_agent.py send-test - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis")
    else:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å Redis
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ê–≥–µ–Ω—Ç 3 —Å –≥–æ—Ç–æ–≤—ã–º Access Token...")
        print("=" * 60)
        worker = Agent3RedisWorker(access_token=GIGACHAT_ACCESS_TOKEN)
        worker.run()
