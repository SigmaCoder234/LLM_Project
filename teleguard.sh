#!/bin/bash

###############################################################################
# üöÄ TeleGuard Automation Script
# –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ Telegram
# 
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   bash teleguard.sh start      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É
#   bash teleguard.sh stop       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É
#   bash teleguard.sh restart    - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
#   bash teleguard.sh status     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
#   bash teleguard.sh logs       - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
#   bash teleguard.sh clean      - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#   bash teleguard.sh delete     - –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É LLM_Project
#   bash teleguard.sh clone      - –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ
#   bash teleguard.sh full-setup - –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –Ω—É–ª—è
###############################################################################

set -e

# === –¶–í–ï–¢–ê –î–õ–Ø –í–´–í–û–î–ê ===
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
PROJECT_DIR="$HOME/LLM_Project"
REPO_URL="https://github.com/SigmaCoder234/LLM_Project.git"
POSTGRES_HOST="176.108.248.211"
POSTGRES_PORT="5432"
POSTGRES_DB="teleguard_db"
POSTGRES_USER="tguser"
POSTGRES_PASS="mnvm7110"
REDIS_HOST="localhost"
REDIS_PORT="6379"

# === –§–£–ù–ö–¶–ò–ò ===

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ===

check_dependencies() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    print_success "Python 3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(python3 --version)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL –∫–ª–∏–µ–Ω—Ç–∞
    if ! command -v psql &> /dev/null; then
        print_warning "psql –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install postgresql-client"
    else
        print_success "psql —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis CLI
    if ! command -v redis-cli &> /dev/null; then
        print_warning "redis-cli –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install redis-tools"
    else
        print_success "redis-cli —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# === –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===

check_postgres() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..."
    if psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT 1" &> /dev/null; then
        print_success "PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        print_error "PostgreSQL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

check_redis() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis..."
    if redis-cli -h $REDIS_HOST -p $REDIS_PORT ping &> /dev/null; then
        print_success "Redis –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        print_error "Redis –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# === –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô PYTHON ===

install_dependencies() {
    print_header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python"
    
    cd $PROJECT_DIR
    pip install aiogram sqlalchemy psycopg2-binary fastapi "uvicorn[standard]" httpx loguru redis aiohttp requests
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# === –ü–û–î–ì–û–¢–û–í–ö–ê –ë–î ===

prepare_database() {
    print_header "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    
    sudo -u postgres psql -d $POSTGRES_DB << EOF
GRANT ALL PRIVILEGES ON SCHEMA public TO $POSTGRES_USER;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $POSTGRES_USER;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $POSTGRES_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $POSTGRES_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $POSTGRES_USER;
EOF
    
    print_success "–ë–î –≥–æ—Ç–æ–≤–∞"
}

# === –ó–ê–ü–£–°–ö –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===

start_postgres() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
    if sudo systemctl is-active --quiet postgresql; then
        print_success "PostgreSQL —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
    else
        print_info "–ó–∞–ø—É—Å–∫ PostgreSQL..."
        sudo systemctl start postgresql
        sleep 2
        print_success "PostgreSQL –∑–∞–ø—É—â–µ–Ω"
    fi
}

start_redis() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis..."
    if sudo systemctl is-active --quiet redis-server; then
        print_success "Redis —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
    else
        print_info "–ó–∞–ø—É—Å–∫ Redis..."
        sudo systemctl start redis-server
        sleep 1
        print_success "Redis –∑–∞–ø—É—â–µ–Ω"
    fi
}

start_all_agents() {
    print_header "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –±–æ—Ç–∞"
    
    cd $PROJECT_DIR
    
    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    pkill -f teteguard_bot.py || true
    pkill -f first_agent.py || true
    pkill -f second_agent.py || true
    pkill -f third_agent.py || true
    pkill -f fourth_agent.py || true
    pkill -f fifth_agent.py || true
    
    sleep 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–≥–µ–Ω—Ç—ã
    print_info "–ó–∞–ø—É—Å–∫ Telegram Bot..."
    nohup python3 teteguard_bot.py > bot.log 2>&1 &
    BOT_PID=$!
    print_success "Telegram Bot –∑–∞–ø—É—â–µ–Ω (PID: $BOT_PID)"
    
    print_info "–ó–∞–ø—É—Å–∫ –ê–≥–µ–Ω—Ç–∞ ‚Ññ1..."
    nohup python3 first_agent.py > agent1.log 2>&1 &
    AGENT1_PID=$!
    print_success "–ê–≥–µ–Ω—Ç ‚Ññ1 –∑–∞–ø—É—â–µ–Ω (PID: $AGENT1_PID)"
    
    print_info "–ó–∞–ø—É—Å–∫ –ê–≥–µ–Ω—Ç–∞ ‚Ññ2..."
    nohup python3 second_agent.py > agent2.log 2>&1 &
    AGENT2_PID=$!
    print_success "–ê–≥–µ–Ω—Ç ‚Ññ2 –∑–∞–ø—É—â–µ–Ω (PID: $AGENT2_PID)"
    
    print_info "–ó–∞–ø—É—Å–∫ –ê–≥–µ–Ω—Ç–∞ ‚Ññ3..."
    nohup python3 third_agent.py > agent3.log 2>&1 &
    AGENT3_PID=$!
    print_success "–ê–≥–µ–Ω—Ç ‚Ññ3 –∑–∞–ø—É—â–µ–Ω (PID: $AGENT3_PID)"
    
    print_info "–ó–∞–ø—É—Å–∫ –ê–≥–µ–Ω—Ç–∞ ‚Ññ4..."
    nohup python3 fourth_agent.py > agent4.log 2>&1 &
    AGENT4_PID=$!
    print_success "–ê–≥–µ–Ω—Ç ‚Ññ4 –∑–∞–ø—É—â–µ–Ω (PID: $AGENT4_PID)"
    
    print_info "–ó–∞–ø—É—Å–∫ –ê–≥–µ–Ω—Ç–∞ ‚Ññ5..."
    nohup python3 fifth_agent.py > agent5.log 2>&1 &
    AGENT5_PID=$!
    print_success "–ê–≥–µ–Ω—Ç ‚Ññ5 –∑–∞–ø—É—â–µ–Ω (PID: $AGENT5_PID)"
    
    sleep 2
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
    ps aux | grep -E "(teteguard_bot|first_agent|second_agent|third_agent|fourth_agent|fifth_agent)" | grep -v grep || print_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å"
}

stop_all_agents() {
    print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –±–æ—Ç–∞"
    
    pkill -f teteguard_bot.py || true
    pkill -f first_agent.py || true
    pkill -f second_agent.py || true
    pkill -f third_agent.py || true
    pkill -f fourth_agent.py || true
    pkill -f fifth_agent.py || true
    
    sleep 1
    print_success "–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# === –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê ===

check_status() {
    print_header "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
    
    echo -e "\n${BLUE}üóÑÔ∏è  PostgreSQL:${NC}"
    if check_postgres; then
        echo "–°—Ç–∞—Ç—É—Å: ‚úÖ Online"
    else
        echo "–°—Ç–∞—Ç—É—Å: ‚ùå Offline"
    fi
    
    echo -e "\n${BLUE}üî¥ Redis:${NC}"
    if check_redis; then
        echo "–°—Ç–∞—Ç—É—Å: ‚úÖ Online"
        REDIS_SIZE=$(redis-cli DBSIZE | grep keys | cut -d' ' -f1)
        echo "–†–∞–∑–º–µ—Ä –ë–î: $REDIS_SIZE –∫–ª—é—á–µ–π"
    else
        echo "–°—Ç–∞—Ç—É—Å: ‚ùå Offline"
    fi
    
    echo -e "\n${BLUE}ü§ñ –ü—Ä–æ—Ü–µ—Å—Å—ã:${NC}"
    RUNNING=$(ps aux | grep -E "(teteguard_bot|first_agent|second_agent|third_agent|fourth_agent|fifth_agent)" | grep -v grep | wc -l)
    echo "–ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $RUNNING"
    
    if [ $RUNNING -gt 0 ]; then
        echo -e "\n${BLUE}–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:${NC}"
        ps aux | grep -E "(teteguard_bot|first_agent|second_agent|third_agent|fourth_agent|fifth_agent)" | grep -v grep
    fi
    
    echo -e "\n${BLUE}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ê–≥–µ–Ω—Ç–∞ ‚Ññ2:${NC}"
    if curl -s http://localhost:8002/health &> /dev/null; then
        print_success "API –ê–≥–µ–Ω—Ç–∞ ‚Ññ2 –¥–æ—Å—Ç—É–ø–µ–Ω"
        curl -s http://localhost:8002/health | python3 -m json.tool 2>/dev/null || echo "API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_warning "API –ê–≥–µ–Ω—Ç–∞ ‚Ññ2 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# === –õ–û–ì–ò ===

show_logs() {
    print_header "–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"
    
    echo -e "\n${BLUE}üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ bot.log:${NC}"
    if [ -f "$PROJECT_DIR/bot.log" ]; then
        tail -20 "$PROJECT_DIR/bot.log"
    else
        print_warning "bot.log –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    echo -e "\n${BLUE}üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ agent2.log:${NC}"
    if [ -f "$PROJECT_DIR/agent2.log" ]; then
        tail -20 "$PROJECT_DIR/agent2.log"
    else
        print_warning "agent2.log –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# === –û–ß–ò–°–¢–ö–ê ===

clean_database() {
    print_header "–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    
    if ! check_postgres; then
        print_error "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    sudo -u postgres psql -d $POSTGRES_DB << EOF
DELETE FROM messages;
DELETE FROM negative_messages;
DELETE FROM moderators;
DELETE FROM chats;
EOF
    
    print_success "–ë–î –æ—á–∏—â–µ–Ω–∞"
}

clean_redis() {
    print_header "–û—á–∏—Å—Ç–∫–∞ Redis"
    
    if ! check_redis; then
        print_error "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    redis-cli FLUSHDB
    print_success "Redis –æ—á–∏—â–µ–Ω"
}

# === –£–î–ê–õ–ï–ù–ò–ï –ü–ê–ü–ö–ò ===

delete_project() {
    print_header "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
    
    if [ -d "$PROJECT_DIR" ]; then
        print_warning "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å $PROJECT_DIR? (yes/no)"
        read -r response
        
        if [ "$response" = "yes" ]; then
            rm -rf "$PROJECT_DIR"
            print_success "–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω"
        else
            print_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        fi
    else
        print_warning "–ü–∞–ø–∫–∞ $PROJECT_DIR –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# === –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï –†–ï–ü–û ===

clone_repo() {
    print_header "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    
    if [ -d "$PROJECT_DIR" ]; then
        print_warning "–ü–∞–ø–∫–∞ $PROJECT_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª–∏—Ç—å? (yes/no)"
        read -r response
        
        if [ "$response" = "yes" ]; then
            rm -rf "$PROJECT_DIR"
        else
            print_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            return 1
        fi
    fi
    
    print_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ $REPO_URL..."
    git clone "$REPO_URL" "$PROJECT_DIR"
    
    cd "$PROJECT_DIR"
    print_success "–†–µ–ø–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ"
}

# === –ü–û–õ–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê ===

full_setup() {
    print_header "üöÄ –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å –Ω—É–ª—è"
    
    check_dependencies
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–µ–∫—Ç –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ -d "$PROJECT_DIR" ]; then
        print_warning "–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–µ–∫—Ç..."
        rm -rf "$PROJECT_DIR"
    fi
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    clone_repo
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    start_postgres
    start_redis
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ë–î
    if check_postgres; then
        prepare_database
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
    install_dependencies
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    start_all_agents
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    check_status
    
    print_header "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
}

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===

main() {
    case "${1:-help}" in
        start)
            print_header "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
            start_postgres
            start_redis
            sleep 1
            start_all_agents
            check_status
            ;;
        stop)
            print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
            stop_all_agents
            ;;
        restart)
            print_header "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
            stop_all_agents
            sleep 2
            start_postgres
            start_redis
            sleep 1
            start_all_agents
            check_status
            ;;
        status)
            check_status
            ;;
        logs)
            show_logs
            ;;
        clean)
            print_header "–û—á–∏—Å—Ç–∫–∞"
            clean_database
            clean_redis
            ;;
        delete)
            delete_project
            ;;
        clone)
            clone_repo
            ;;
        full-setup)
            full_setup
            ;;
        check-deps)
            check_dependencies
            ;;
        *)
            print_header "ü§ñ TeleGuard - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            echo ""
            echo -e "${BLUE}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
            echo ""
            echo -e "  ${GREEN}bash teleguard.sh start${NC}        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É"
            echo -e "  ${GREEN}bash teleguard.sh stop${NC}         - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É"
            echo -e "  ${GREEN}bash teleguard.sh restart${NC}      - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
            echo -e "  ${GREEN}bash teleguard.sh status${NC}       - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
            echo -e "  ${GREEN}bash teleguard.sh logs${NC}         - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
            echo -e "  ${GREEN}bash teleguard.sh clean${NC}        - –û—á–∏—Å—Ç–∏—Ç—å –ë–î –∏ Redis"
            echo -e "  ${GREEN}bash teleguard.sh delete${NC}       - –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞"
            echo -e "  ${GREEN}bash teleguard.sh clone${NC}        - –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ"
            echo -e "  ${GREEN}bash teleguard.sh full-setup${NC}   - –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –Ω—É–ª—è"
            echo -e "  ${GREEN}bash teleguard.sh check-deps${NC}   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
            echo ""
            echo -e "${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
            echo -e "  bash teleguard.sh start"
            echo -e "  bash teleguard.sh status"
            echo -e "  bash teleguard.sh logs | tail -50"
            echo ""
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
