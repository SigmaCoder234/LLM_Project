#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TELEGRAM BOT —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ - —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã)
"""

import logging
import asyncio
import json
import time
import redis
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.orm import declarative_base
from sqlalchemy import Column, Integer, String, ForeignKey, BigInteger, Boolean, DateTime, create_engine, Text
from sqlalchemy.orm import relationship, sessionmaker
import requests

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò
# ============================================================================
TOKEN = '8320009669:AAHiVLu-Em8EOXBNHYrJ0UhVX3mMMTm8S_g'
POSTGRES_URL = 'postgresql://tguser:mnvm7110@176.108.248.211:5432/teleguard_db?sslmode=disable'

# REDIS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
REDIS_HOST = "localhost"
REDIS_PORT = 6379
REDIS_DB = 0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [TELEGRAM BOT] %(levelname)s: %(message)s'
)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()
Base = declarative_base()

# ============================================================================
# –ú–û–î–ï–õ–ò –ë–î (–û–î–ò–ù–ê–ö–û–í–´–ï –° –ê–ì–ï–ù–¢–ê–ú–ò)
# ============================================================================
class Chat(Base):
    __tablename__ = 'chats'
    id = Column(Integer, primary_key=True)
    tg_chat_id = Column(String, unique=True, nullable=False)
    title = Column(String, nullable=True)
    chat_type = Column(String, default='group')
    added_at = Column(DateTime, default=datetime.utcnow)
    is_active = Column(Boolean, default=True)
    
    messages = relationship('Message', back_populates='chat', cascade="all, delete")
    moderators = relationship('Moderator', back_populates='chat', cascade="all, delete")
    negative_messages = relationship('NegativeMessage', back_populates='chat', cascade="all, delete")

class Message(Base):
    __tablename__ = 'messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    message_id = Column(BigInteger, nullable=False)
    sender_username = Column(String)
    sender_id = Column(BigInteger)
    message_text = Column(Text)
    message_link = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)
    processed_at = Column(DateTime)
    ai_response = Column(Text)
    
    chat = relationship('Chat', back_populates='messages')

class Moderator(Base):
    __tablename__ = 'moderators'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    username = Column(String)
    telegram_user_id = Column(BigInteger)
    is_active = Column(Boolean, default=True)
    added_at = Column(DateTime, default=datetime.utcnow)
    
    chat = relationship('Chat', back_populates='moderators')

class NegativeMessage(Base):
    __tablename__ = 'negative_messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    message_link = Column(String)
    sender_username = Column(String)
    sender_id = Column(BigInteger)
    negative_reason = Column(Text)
    is_sent_to_moderators = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    agent_id = Column(Integer)
    
    chat = relationship('Chat', back_populates='negative_messages')

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î –ò REDIS
# ============================================================================
engine = create_engine(POSTGRES_URL)
Base.metadata.create_all(engine)
SessionLocal = sessionmaker(bind=engine)

def get_db_session():
    return SessionLocal()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
try:
    redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB, decode_responses=True)
    redis_client.ping()
    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ: {REDIS_HOST}:{REDIS_PORT}")
except Exception as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
    redis_client = None

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –¢–ò–ü–ê –ß–ê–¢–ê
# ============================================================================
def is_group_chat(chat_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–≤—ã–º"""
    return chat_type in ['group', 'supergroup', 'channel']

def should_process_chat(message: types.Message) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞"""
    return is_group_chat(message.chat.type)

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø –ê–ì–ï–ù–¢–û–í
# ============================================================================
def check_agent_health(agent_id: int, port: int) -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ health check"""
    try:
        url = f"http://localhost:{port}/health"
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            return {"status": "error", "message": f"HTTP {response.status_code}"}
    except Exception as e:
        return {"status": "offline", "message": str(e)}

def get_all_agents_status() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    agents = {
        1: {"name": "–ê–≥–µ–Ω—Ç ‚Ññ1 (–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä)", "port": 8001},
        2: {"name": "–ê–≥–µ–Ω—Ç ‚Ññ2 (–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä)", "port": 8002},
        3: {"name": "–ê–≥–µ–Ω—Ç ‚Ññ3 (GigaChat)", "port": 8003},
        4: {"name": "–ê–≥–µ–Ω—Ç ‚Ññ4 (–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π)", "port": 8004},
        5: {"name": "–ê–≥–µ–Ω—Ç ‚Ññ5 (–ê—Ä–±–∏—Ç—Ä)", "port": 8005}
    }
    
    status = {}
    for agent_id, info in agents.items():
        health = check_agent_health(agent_id, info["port"])
        status[agent_id] = {
            "name": info["name"],
            "port": info["port"],
            "status": health.get("status", "unknown"),
            "message": health.get("message", ""),
            "uptime": health.get("uptime_seconds", 0) if health.get("status") == "online" else 0
        }
    
    return status

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–ì–ï–ù–¢–û–í
# ============================================================================
def test_agents_with_message(test_message: str, user_id: int, username: str, chat_id: int) -> dict:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ 3.2, 4 –∏ 5 —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    if not redis_client:
        return {"error": "Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "message": test_message,
        "rules": [
            "–ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤",
            "–ó–∞–ø—Ä–µ—â–µ–Ω—ã –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è",
            "–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è –ø–æ –ª—é–±—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º",
            "–ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º –∏ —Ñ–ª—É–¥"
        ],
        "user_id": user_id,
        "username": username,
        "chat_id": chat_id,
        "message_id": int(time.time()),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
        "message_link": f"https://t.me/test/{int(time.time())}"
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏ –∞–≥–µ–Ω—Ç–æ–≤ 3 –∏ 4 –ù–ê–ü–†–Ø–ú–£–Æ (–º–∏–Ω—É—è –∞–≥–µ–Ω—Ç 1 –∏ 2 –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
        test_json = json.dumps(test_data, ensure_ascii=False)
        
        redis_client.rpush("queue:agent3:input", test_json)
        redis_client.rpush("queue:agent4:input", test_json)
        
        logger.info(f"üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç–∞–º 3 –∏ 4")
        
        results = {"sent": True, "message_id": test_data["message_id"]}
        
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return {"error": str(e)}

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò –ò–ó –ë–î (–¢–û–õ–¨–ö–û –ì–†–£–ü–ü–û–í–´–ï –ß–ê–¢–´)
# ============================================================================
def get_recent_messages(chat_id: int, limit: int = 10) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ì–†–£–ü–ü–û–í–û–ì–û —á–∞—Ç–∞"""
    try:
        db_session = get_db_session()
        
        chat = db_session.query(Chat).filter_by(tg_chat_id=str(chat_id)).first()
        if not chat:
            return []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        if not is_group_chat(chat.chat_type):
            db_session.close()
            return []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ –≠–¢–û–ì–û –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        messages = db_session.query(Message).filter_by(chat_id=chat.id).order_by(
            Message.created_at.desc()
        ).limit(limit).all()
        
        result = []
        for msg in messages:
            result.append({
                "id": msg.id,
                "message_id": msg.message_id,
                "sender_username": msg.sender_username,
                "sender_id": msg.sender_id,
                "message_text": msg.message_text[:100] + "..." if len(msg.message_text or "") > 100 else msg.message_text,
                "created_at": msg.created_at.strftime("%d.%m.%Y %H:%M:%S"),
                "ai_response": msg.ai_response[:50] + "..." if msg.ai_response and len(msg.ai_response) > 50 else msg.ai_response,
                "chat_id": chat_id,
                "chat_type": chat.chat_type
            })
        
        db_session.close()
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return []

def get_negative_messages(chat_id: int, limit: int = 10) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ì–†–£–ü–ü–û–í–û–ì–û —á–∞—Ç–∞"""
    try:
        db_session = get_db_session()
        
        chat = db_session.query(Chat).filter_by(tg_chat_id=str(chat_id)).first()
        if not chat:
            return []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        if not is_group_chat(chat.chat_type):
            db_session.close()
            return []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ –≠–¢–û–ì–û –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        neg_messages = db_session.query(NegativeMessage).filter_by(chat_id=chat.id).order_by(
            NegativeMessage.created_at.desc()
        ).limit(limit).all()
        
        result = []
        for msg in neg_messages:
            result.append({
                "id": msg.id,
                "sender_username": msg.sender_username,
                "sender_id": msg.sender_id,
                "negative_reason": msg.negative_reason[:100] + "..." if len(msg.negative_reason or "") > 100 else msg.negative_reason,
                "agent_id": msg.agent_id,
                "created_at": msg.created_at.strftime("%d.%m.%Y %H:%M:%S"),
                "is_sent_to_moderators": msg.is_sent_to_moderators,
                "chat_id": chat_id,
                "chat_type": chat.chat_type
            })
        
        db_session.close()
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return []

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ß–ê–¢–ê–ú–ò –ò –ú–û–î–ï–†–ê–¢–û–†–ê–ú–ò (–¢–û–õ–¨–ö–û –ì–†–£–ü–ü–û–í–´–ï –ß–ê–¢–´)
# ============================================================================
def add_chat_to_db(chat_id: int, title: str = None, chat_type: str = "group") -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ì–†–£–ü–ü–û–í–û–ô —á–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if not is_group_chat(chat_type):
        logger.info(f"‚ùå –ß–∞—Ç {chat_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω - —ç—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç (—Ç–∏–ø: {chat_type})")
        return False
    
    try:
        db_session = get_db_session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —á–∞—Ç
        existing_chat = db_session.query(Chat).filter_by(tg_chat_id=str(chat_id)).first()
        if existing_chat:
            db_session.close()
            return False  # –ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        new_chat = Chat(
            tg_chat_id=str(chat_id),
            title=title or f"–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç {chat_id}",
            chat_type=chat_type,
            is_active=True
        )
        
        db_session.add(new_chat)
        db_session.commit()
        db_session.close()
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç: {chat_id} ({title}) - —Ç–∏–ø: {chat_type}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        return False

def add_moderator_to_chat(chat_id: int, user_id: int, username: str) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∫ –ì–†–£–ü–ü–û–í–û–ú–£ —á–∞—Ç—É"""
    try:
        db_session = get_db_session()
        
        chat = db_session.query(Chat).filter_by(tg_chat_id=str(chat_id)).first()
        if not chat:
            db_session.close()
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        if not is_group_chat(chat.chat_type):
            db_session.close()
            logger.info(f"‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω - —ç—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç (—Ç–∏–ø: {chat.chat_type})")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        existing_mod = db_session.query(Moderator).filter_by(
            chat_id=chat.id, telegram_user_id=user_id
        ).first()
        
        if existing_mod:
            existing_mod.is_active = True  # –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º, –µ—Å–ª–∏ –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        else:
            new_moderator = Moderator(
                chat_id=chat.id,
                username=username,
                telegram_user_id=user_id,
                is_active=True
            )
            db_session.add(new_moderator)
        
        db_session.commit()
        db_session.close()
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä @{username} –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ {chat_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

# ============================================================================
# TELEGRAM BOT HANDLERS
# ============================================================================

@dp.message(Command('start'))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if not is_group_chat(message.chat.type):
        await message.answer(
            "ü§ñ <b>TeleGuard Bot</b>\n\n"
            "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ <b>–≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö</b>.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.",
            parse_mode='HTML'
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤", callback_data="status_agents")],
        [InlineKeyboardButton(text="üìù –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞", callback_data="chat_messages")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="negative_messages")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤", callback_data="test_agents")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat")]
    ])
    
    welcome_text = f"""
ü§ñ <b>TeleGuard Bot - –ú–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>

üìã <b>–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç:</b> {message.chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
üÜî <b>ID —á–∞—Ç–∞:</b> {message.chat.id}
üìä <b>–¢–∏–ø:</b> {message.chat.type}

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ (1-5)
üìù <b>–°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞</b> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
‚ö†Ô∏è <b>–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b> - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
üß™ <b>–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç</b> - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏

<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:</i>
    """
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode='HTML')

@dp.callback_query(lambda c: c.data == "status_agents")
async def show_agents_status(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤"""
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text(
            "‚ÑπÔ∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö."
        )
        return
    
    status = get_all_agents_status()
    
    status_text = "üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤:</b>\n\n"
    
    for agent_id, info in status.items():
        if info["status"] == "online":
            emoji = "üü¢"
            uptime_hours = info["uptime"] // 3600
            uptime_minutes = (info["uptime"] % 3600) // 60
            details = f"–†–∞–±–æ—Ç–∞–µ—Ç {uptime_hours}—á {uptime_minutes}–º"
        elif info["status"] == "offline":
            emoji = "üî¥"
            details = "–ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        else:
            emoji = "üü°"
            details = info.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        status_text += f"{emoji} <b>{info['name']}</b>\n"
        status_text += f"   –ü–æ—Ä—Ç: {info['port']}\n"
        status_text += f"   –°—Ç–∞—Ç—É—Å: {details}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    if redis_client:
        try:
            redis_client.ping()
            redis_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"
        except:
            redis_status = "üî¥ –û—à–∏–±–∫–∞"
    else:
        redis_status = "üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
    
    status_text += f"üì° <b>Redis:</b> {redis_status}\n"
    status_text += f"üóÑÔ∏è <b>PostgreSQL:</b> üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status_agents")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback_query.message.edit_text(status_text, reply_markup=keyboard, parse_mode='HTML')

@dp.callback_query(lambda c: c.data == "chat_messages")
async def show_chat_messages(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≠–¢–û–ì–û –ì–†–£–ü–ü–û–í–û–ì–û —á–∞—Ç–∞"""
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text(
            "‚ÑπÔ∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö."
        )
        return
    
    chat_id = callback_query.message.chat.id
    messages = get_recent_messages(chat_id, limit=5)
    
    if not messages:
        text = f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ {chat_id}:</b>\n\n–°–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = f"üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ {chat_id}:</b>\n\n"
        
        for i, msg in enumerate(messages, 1):
            text += f"<b>{i}.</b> @{msg['sender_username'] or 'unknown'}\n"
            text += f"   üí¨ {msg['message_text'] or '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}\n"
            text += f"   üïê {msg['created_at']}\n"
            if msg['ai_response']:
                text += f"   ü§ñ {msg['ai_response']}\n"
            text += "\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="chat_messages")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')

@dp.callback_query(lambda c: c.data == "negative_messages")
async def show_negative_messages(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≠–¢–û–ì–û –ì–†–£–ü–ü–û–í–û–ì–û —á–∞—Ç–∞"""
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text(
            "‚ÑπÔ∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö."
        )
        return
    
    chat_id = callback_query.message.chat.id
    neg_messages = get_negative_messages(chat_id, limit=5)
    
    if not neg_messages:
        text = f"‚ö†Ô∏è <b>–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ {chat_id}:</b>\n\n–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = f"‚ö†Ô∏è <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ {chat_id}:</b>\n\n"
        
        for i, msg in enumerate(neg_messages, 1):
            agent_name = f"–ê–≥–µ–Ω—Ç #{msg['agent_id']}" if msg['agent_id'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            sent_status = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if msg['is_sent_to_moderators'] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
            
            text += f"<b>{i}.</b> @{msg['sender_username'] or 'unknown'}\n"
            text += f"   üö´ {msg['negative_reason'] or '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã'}\n"
            text += f"   ü§ñ {agent_name}\n"
            text += f"   üì® {sent_status}\n"
            text += f"   üïê {msg['created_at']}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="negative_messages")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')

@dp.callback_query(lambda c: c.data == "test_agents")
async def test_agents_menu(callback_query: types.CallbackQuery):
    """–ú–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text(
            "‚ÑπÔ∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö."
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –¢–µ—Å—Ç: –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="test_normal")],
        [InlineKeyboardButton(text="üö´ –¢–µ—Å—Ç: –º–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è", callback_data="test_profanity")],
        [InlineKeyboardButton(text="üì¢ –¢–µ—Å—Ç: —Ä–µ–∫–ª–∞–º–∞ –∏ —Å–ø–∞–º", callback_data="test_spam")],
        [InlineKeyboardButton(text="‚ö° –¢–µ—Å—Ç: –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è", callback_data="test_discrimination")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    text = """
üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

‚úÖ <b>–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> - –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é
üö´ <b>–ú–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è</b> - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
üì¢ <b>–†–µ–∫–ª–∞–º–∞ –∏ —Å–ø–∞–º</b> - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ  
‚ö° <b>–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è</b> - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ

–¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ 3.2, 4 –∏ 5 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    """
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')

@dp.callback_query(lambda c: c.data == "add_chat")
async def add_chat_menu(callback_query: types.CallbackQuery):
    """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ì–†–£–ü–ü–û–í–û–ì–û —á–∞—Ç–∞"""
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if not is_group_chat(callback_query.message.chat.type):
        text = f"""
‚ÑπÔ∏è <b>–¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã</b>

TeleGuard Bot —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ —á–∞—Ç–∞–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

üìã <b>–¢–µ–∫—É—â–∏–π —á–∞—Ç:</b>
üÜî <b>ID:</b> {callback_query.message.chat.id}
üìä <b>–¢–∏–ø:</b> {callback_query.message.chat.type}

–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        return
    
    chat_id = callback_query.message.chat.id
    chat_title = getattr(callback_query.message.chat, 'title', f'–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç {chat_id}')
    chat_type = callback_query.message.chat.type
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = add_chat_to_db(chat_id, chat_title, chat_type)
    
    if success:
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or f"user_{user_id}"
        add_moderator_to_chat(chat_id, user_id, username)
        
        text = f"""
‚úÖ <b>–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>
üÜî <b>ID:</b> {chat_id}
üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat_title}
üìä <b>–¢–∏–ø:</b> {chat_type}
üë§ <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> @{username}

–¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ TeleGuard –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö.
        """
    else:
        text = f"""
‚ÑπÔ∏è <b>–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>
üÜî <b>ID:</b> {chat_id}
üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat_title}
üìä <b>–¢–∏–ø:</b> {chat_type}

–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ TeleGuard.
        """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')

# –¢–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.callback_query(lambda c: c.data == "test_normal")
async def test_normal_message(callback_query: types.CallbackQuery):
    await run_agent_test(callback_query, "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞? –•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è!", "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

@dp.callback_query(lambda c: c.data == "test_profanity")  
async def test_profanity_message(callback_query: types.CallbackQuery):
    await run_agent_test(callback_query, "–¢—ã –∏–¥–∏–æ—Ç –∏ –¥—É—Ä–∞–∫! –•—É–π —Ç–µ–±–µ –≤ –∂–æ–ø—É, —Å—É–∫–∞!", "üö´ –ú–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è")

@dp.callback_query(lambda c: c.data == "test_spam")
async def test_spam_message(callback_query: types.CallbackQuery):
    await run_agent_test(callback_query, "–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª @spamchannel! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ t.me/spam", "üì¢ –†–µ–∫–ª–∞–º–∞ –∏ —Å–ø–∞–º")

@dp.callback_query(lambda c: c.data == "test_discrimination")
async def test_discrimination_message(callback_query: types.CallbackQuery):
    await run_agent_test(callback_query, "–í—Å–µ —ç—Ç–∏ —á—É—Ä–∫–∏ –∏ —Ö–æ—Ö–ª—ã –¥–æ–ª–∂–Ω—ã —É–±–∏—Ä–∞—Ç—å—Å—è –æ—Ç—Å—é–¥–∞!", "‚ö° –î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è")

async def run_agent_test(callback_query: types.CallbackQuery, test_message: str, test_type: str):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö)"""
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text(
            "‚ÑπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω
    await callback_query.message.edit_text(
        f"üß™ <b>–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_type}</b>\n\n"
        f"üìù <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<i>{test_message}</i>\n\n"
        f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞–≥–µ–Ω—Ç–∞–º 3.2 –∏ 4...",
        parse_mode='HTML'
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "test_user"
    chat_id = callback_query.message.chat.id
    
    result = test_agents_with_message(test_message, user_id, username, chat_id)
    
    if "error" in result:
        result_text = f"‚ùå <b>–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:</b> {result['error']}"
    else:
        result_text = (
            f"‚úÖ <b>–¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <i>{test_message[:100]}...</i>\n"
            f"üÜî <b>ID —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {result.get('message_id', 'N/A')}\n\n"
            f"ü§ñ –ê–≥–µ–Ω—Ç—ã 3.2 –∏ 4 –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
            f"‚öñÔ∏è –ê–≥–µ–Ω—Ç 5 –ø—Ä–∏–º–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n\n"
            f"üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
            f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–∞–∫–∂–µ –ø–æ—è–≤—è—Ç—Å—è –≤ –ª–æ–≥–∞—Ö –∞–≥–µ–Ω—Ç–æ–≤"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="negative_messages")],
        [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–π —Ç–µ—Å—Ç", callback_data="test_agents")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback_query.message.edit_text(result_text, reply_markup=keyboard, parse_mode='HTML')

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text(
            "ü§ñ <b>TeleGuard Bot</b>\n\n"
            "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ <b>–≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö</b>.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.",
            parse_mode='HTML'
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤", callback_data="status_agents")],
        [InlineKeyboardButton(text="üìù –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞", callback_data="chat_messages")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="negative_messages")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤", callback_data="test_agents")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat")]
    ])
    
    chat_title = getattr(callback_query.message.chat, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    
    welcome_text = f"""
ü§ñ <b>TeleGuard Bot - –ú–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>

üìã <b>–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç:</b> {chat_title}
üÜî <b>ID —á–∞—Ç–∞:</b> {callback_query.message.chat.id}
üìä <b>–¢–∏–ø:</b> {callback_query.message.chat.type}

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ (1-5)
üìù <b>–°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞</b> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
‚ö†Ô∏è <b>–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b> - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
üß™ <b>–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç</b> - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏

<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:</i>
    """
    
    await callback_query.message.edit_text(welcome_text, reply_markup=keyboard, parse_mode='HTML')

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–´–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô (–¢–û–õ–¨–ö–û –ì–†–£–ü–ü–û–í–´–ï –ß–ê–¢–´)
# ============================================================================
@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)"""
    try:
        # –ü–†–û–í–ï–†–Ø–ï–ú: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
        if not should_process_chat(message):
            logger.info(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ {message.chat.id} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        db_session = get_db_session()
        
        chat = db_session.query(Chat).filter_by(tg_chat_id=str(message.chat.id)).first()
        if not chat:
            chat = Chat(
                tg_chat_id=str(message.chat.id),
                title=getattr(message.chat, 'title', None),
                chat_type=message.chat.type
            )
            db_session.add(chat)
            db_session.commit()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = Message(
            chat_id=chat.id,
            message_id=message.message_id,
            sender_username=message.from_user.username,
            sender_id=message.from_user.id,
            message_text=message.text,
            message_link=f"https://t.me/c/{str(message.chat.id).replace('-100', '')}/{message.message_id}"
        )
        db_session.add(msg)
        db_session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ê–≥–µ–Ω—Ç–∞ 1 –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞)
        if redis_client and message.text and not message.text.startswith('/'):
            test_data = {
                "message": message.text,
                "user_id": message.from_user.id,
                "username": message.from_user.username or f"user_{message.from_user.id}",
                "chat_id": message.chat.id,
                "message_id": message.message_id,
                "message_link": f"https://t.me/c/{str(message.chat.id).replace('-100', '')}/{message.message_id}"
            }
            
            test_json = json.dumps(test_data, ensure_ascii=False)
            redis_client.rpush("queue:agent1:input", test_json)
            logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ {message.chat.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∞–≥–µ–Ω—Ç–∞ 1")
        
        db_session.close()
        
        logger.info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ {message.chat.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {message.text[:50] if message.text else 'No text'}...")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ============================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ============================================================================
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ TeleGuard Bot (—Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã)...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        db_session = get_db_session()
        db_session.close()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())