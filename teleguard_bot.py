import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from sqlalchemy.orm import declarative_base
from sqlalchemy import Column, Integer, String, ForeignKey, BigInteger, Boolean, DateTime, create_engine, select
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from datetime import datetime
import httpx
import json

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = '8320009669:AAHiVLu-Em8EOXBNHYrJ0UhVX3mMMTm8S_g'
POSTGRES_URL = 'postgresql://tguser:mnvm7110@176.108.248.211:5432/teleguard_db?sslmode=disable'
POSTGRES_ASYNC_URL = 'postgresql+asyncpg://tguser:mnvm7110@176.108.248.211:5432/teleguard_db'
AGENT2_URL = 'http://176.108.248.211:8002'

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

Base = declarative_base()

# === –ú–û–î–ï–õ–ò –ë–î ===

class Chat(Base):
    __tablename__ = 'chats'
    id = Column(Integer, primary_key=True)
    tg_chat_id = Column(String, unique=True, nullable=False)
    messages = relationship('Message', back_populates='chat', cascade="all, delete-orphan")
    moderators = relationship('Moderator', back_populates='chat', cascade="all, delete-orphan")
    negative_messages = relationship('NegativeMessage', back_populates='chat', cascade="all, delete-orphan")

class Message(Base):
    __tablename__ = 'messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    sender_id = Column(BigInteger, nullable=False)
    sender_username = Column(String, nullable=True)
    message_text = Column(String, nullable=True)
    message_link = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    chat = relationship('Chat', back_populates='messages')

class NegativeMessage(Base):
    __tablename__ = 'negative_messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    sender_username = Column(String, nullable=True)
    negative_reason = Column(String, nullable=True)
    is_sent_to_moderators = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    chat = relationship('Chat', back_populates='negative_messages')

class Moderator(Base):
    __tablename__ = 'moderators'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    username = Column(String, nullable=False)
    telegram_user_id = Column(BigInteger, nullable=True)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    chat = relationship('Chat', back_populates='moderators')

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ===
engine = create_engine(POSTGRES_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
async_engine = create_async_engine(POSTGRES_ASYNC_URL)
AsyncSessionLocal = async_sessionmaker(async_engine, class_=AsyncSession, expire_on_commit=False)

Base.metadata.create_all(engine)

def get_session():
    return SessionLocal()

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def send_to_agent2(message_text: str, sender_id: int, username: str, chat_id: int, message_id: int) -> dict:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ –ê–≥–µ–Ω—Ç ‚Ññ2"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{AGENT2_URL}/process_message",
                json={
                    "message": message_text,
                    "user_id": sender_id,
                    "username": username,
                    "chat_id": chat_id,
                    "message_id": message_id
                },
                timeout=30
            )
            if response.status_code == 200:
                return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ê–≥–µ–Ω—Ç—É ‚Ññ2: {e}")
    return None

async def notify_moderators(chat_id: int, message_text: str, sender_username: str, reason: str, message_id: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞"""
    session = get_session()
    try:
        chat = session.query(Chat).filter_by(tg_chat_id=str(chat_id)).first()
        if not chat:
            return

        for moderator in chat.moderators:
            if moderator.telegram_user_id:
                try:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_{message_id}"),
                         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_delete_{message_id}")]
                    ])
                    
                    notification = f"""‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ!

üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_username}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:100]}...
üö® –ü—Ä–∏—á–∏–Ω–∞: {reason}

–ß—Ç–æ –¥–µ–ª–∞—Ç—å?"""
                    
                    await bot.send_message(
                        moderator.telegram_user_id,
                        notification,
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator.username}: {e}")
    finally:
        session.close()

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", callback_data="list_chats")],
        [InlineKeyboardButton(text="üë§ –ú–æ–π ID", callback_data="my_id")],
        [InlineKeyboardButton(text="üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="system_status")]
    ])
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeleGuard!\n\n"
        "–Ø —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Telegram –≥—Ä—É–ø–ø.\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboard
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
    help_text = """ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ TeleGuard

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/chats - –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —á–∞—Ç–æ–≤
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/messages - –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É:
1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É
2. –î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start –≤ –≥—Ä—É–ø–ø–µ
4. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚úÖ –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è"""
    
    await message.answer(help_text)

@dp.message(Command("messages"))
async def cmd_messages(message: Message):
    """–í—ã–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    session = get_session()
    try:
        messages = session.query(Message).order_by(Message.created_at.desc()).limit(20).all()
        
        if not messages:
            await message.answer("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
        for msg in reversed(messages):
            text += f"üë§ @{msg.sender_username or 'unknown'}\n"
            text += f"üí¨ {msg.message_text[:50]}...\n"
            text += f"‚è∞ {msg.created_at.strftime('%H:%M:%S')}\n"
            text += "---\n"
        
        await message.answer(text)
    finally:
        session.close()

@dp.message(Command("status"))
async def cmd_status(message: Message):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{AGENT2_URL}/health", timeout=5)
            if response.status_code == 200:
                health = response.json()
                status_text = f"""‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!

–ê–≥–µ–Ω—Ç ‚Ññ2: üü¢ Online
‚è±Ô∏è Uptime: {health.get('uptime_seconds', 0)}s
üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {health.get('processed_messages', 0)}
üóÑÔ∏è –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: {'‚úÖ' if health.get('database_connected') else '‚ùå'}
üî¥ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω: {'‚úÖ' if health.get('redis_connected') else '‚ùå'}
ü§ñ GigaChat –≥–æ—Ç–æ–≤: {'‚úÖ' if health.get('gigachat_token_valid') else '‚è≥'}"""
                await message.answer(status_text)
                return
    except:
        pass
    
    await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ê–≥–µ–Ω—Ç ‚Ññ2 –Ω–µ –∑–∞–ø—É—â–µ–Ω")

@dp.message(Command("chats"))
async def cmd_chats(message: Message):
    """–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–∏"""
    session = get_session()
    try:
        chats = session.query(Chat).all()
        
        if not chats:
            await message.answer("üì≠ –ß–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üí¨ {chat.tg_chat_id}", callback_data=f"chat_menu_{chat.id}")]
            for chat in chats
        ])
        
        await message.answer(f"üìã –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}", reply_markup=keyboard)
    finally:
        session.close()

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ö–ù–û–ü–û–ö ===

@dp.callback_query(lambda c: c.data == "list_chats")
async def cb_list_chats(callback: types.CallbackQuery):
    """–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"""
    session = get_session()
    try:
        chats = session.query(Chat).all()
        
        if not chats:
            await callback.message.answer("üì≠ –ß–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É!")
            await callback.answer()
            return
        
        text = "üìã –í–∞—à–∏ —á–∞—Ç—ã:\n\n"
        for chat in chats:
            text += f"üí¨ {chat.tg_chat_id}\n"
            text += f"   –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(chat.moderators)}\n"
            text += f"   –°–æ–æ–±—â–µ–Ω–∏–π: {len(chat.messages)}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üîß {chat.tg_chat_id}", callback_data=f"chat_menu_{chat.id}")]
            for chat in chats
        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    finally:
        session.close()
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("chat_menu_"))
async def cb_chat_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º"""
    chat_id = int(callback.data.split("_")[-1])
    session = get_session()
    try:
        chat = session.query(Chat).filter_by(id=chat_id).first()
        if not chat:
            await callback.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã", callback_data=f"show_mods_{chat_id}")],
            [InlineKeyboardButton(text="üìù –°–æ–æ–±—â–µ–Ω–∏—è", callback_data=f"show_msgs_{chat_id}")],
            [InlineKeyboardButton(text="üö® –ù–∞—Ä—É—à–µ–Ω–∏—è", callback_data=f"show_violations_{chat_id}")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data=f"add_mod_{chat_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_chats")]
        ])
        
        await callback.message.edit_text(
            f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º: {chat.tg_chat_id}\n\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(chat.moderators)}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(chat.messages)}\n"
            f"–ù–∞—Ä—É—à–µ–Ω–∏–π: {len(chat.negative_messages)}",
            reply_markup=keyboard
        )
    finally:
        session.close()
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("show_msgs_"))
async def cb_show_messages(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞"""
    chat_id = int(callback.data.split("_")[-1])
    session = get_session()
    try:
        chat = session.query(Chat).filter_by(id=chat_id).first()
        if not chat or not chat.messages:
            await callback.message.edit_text("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            await callback.answer()
            return
        
        text = f"üìã –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ {chat.tg_chat_id}:\n\n"
        for msg in chat.messages[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
            text += f"üë§ @{msg.sender_username}\n"
            text += f"üí¨ {msg.message_text[:80]}{'...' if len(msg.message_text) > 80 else ''}\n"
            text += f"‚è∞ {msg.created_at.strftime('%H:%M:%S')}\n---\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chat_menu_{chat_id}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    finally:
        session.close()
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("show_violations_"))
async def cb_show_violations(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è"""
    chat_id = int(callback.data.split("_")[-1])
    session = get_session()
    try:
        chat = session.query(Chat).filter_by(id=chat_id).first()
        if not chat or not chat.negative_messages:
            await callback.message.edit_text("‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await callback.answer()
            return
        
        text = f"üö® –ù–∞—Ä—É—à–µ–Ω–∏—è –≤ {chat.tg_chat_id}:\n\n"
        for neg_msg in chat.negative_messages[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
            text += f"üë§ @{neg_msg.sender_username}\n"
            text += f"‚ö†Ô∏è {neg_msg.negative_reason}\n"
            text += f"‚è∞ {neg_msg.created_at.strftime('%H:%M:%S')}\n---\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chat_menu_{chat_id}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    finally:
        session.close()
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("show_mods_"))
async def cb_show_mods(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    chat_id = int(callback.data.split("_")[-1])
    session = get_session()
    try:
        chat = session.query(Chat).filter_by(id=chat_id).first()
        if not chat or not chat.moderators:
            await callback.message.edit_text("üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_mod_{chat_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chat_menu_{chat_id}")]
            ])
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            await callback.answer()
            return
        
        text = f"üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã {chat.tg_chat_id}:\n\n"
        for mod in chat.moderators:
            status = "‚úÖ ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if mod.telegram_user_id else "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ /start"
            text += f"@{mod.username} {status}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"‚ùå @{mod.username}", callback_data=f"delete_mod_{mod.id}")]
            for mod in chat.moderators
        ] + [
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data=f"add_mod_{chat_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chat_menu_{chat_id}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    finally:
        session.close()
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("add_mod_"))
async def cb_add_mod(callback: types.CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    chat_id = int(callback.data.split("_")[-1])
    await callback.message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ü—Ä–∏–º–µ—Ä: @moderator1 @moderator2 @moderator3"
    )
    await callback.answer()

@dp.message()
async def handle_message(message: Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith("/"):
        return
    
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç
        chat = session.query(Chat).filter_by(tg_chat_id=str(message.chat.id)).first()
        if not chat:
            chat = Chat(tg_chat_id=str(message.chat.id))
            session.add(chat)
            session.commit()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = Message(
            chat_id=chat.id,
            sender_id=message.from_user.id,
            sender_username=message.from_user.username or "unknown",
            message_text=message.text or "[–º–µ–¥–∏–∞]",
            message_link=f"https://t.me/c/{message.chat.id}/{message.message_id}"
        )
        session.add(msg)
        session.commit()
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ: {message.from_user.username} - {message.text[:50]}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ –ê–≥–µ–Ω—Ç ‚Ññ2
        if message.text:
            asyncio.create_task(send_to_agent2(
                message.text,
                message.from_user.id,
                message.from_user.username or "unknown",
                message.chat.id,
                message.message_id
            ))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        session.close()

@dp.callback_query(lambda c: c.data == "my_id")
async def cb_my_id(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π Telegram ID"""
    session = get_session()
    try:
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        mod = session.query(Moderator).filter_by(telegram_user_id=callback.from_user.id).first()
        
        if not mod:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            mod = Moderator(
                chat_id=1,  # –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
                username=callback.from_user.username or "unknown",
                telegram_user_id=callback.from_user.id,
                is_active=True
            )
            session.add(mod)
            session.commit()
        
        await callback.message.answer(
            f"üë§ –í–∞—à Telegram ID: <code>{callback.from_user.id}</code>\n\n"
            f"Username: @{callback.from_user.username or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n\n"
            f"‚úÖ ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö!"
        )
    finally:
        session.close()
    await callback.answer()

@dp.callback_query(lambda c: c.data == "system_status")
async def cb_system_status(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{AGENT2_URL}/health", timeout=5)
            if response.status_code == 200:
                health = response.json()
                status_text = f"""‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!

ü§ñ –ê–≥–µ–Ω—Ç ‚Ññ2: üü¢ Online
‚è±Ô∏è Uptime: {health.get('uptime_seconds', 0)}s
üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {health.get('processed_messages', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π
üóÑÔ∏è –ë–î: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if health.get('database_connected') else '‚ùå –û—à–∏–±–∫–∞'}
üî¥ Redis: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if health.get('redis_connected') else '‚ùå –û—à–∏–±–∫–∞'}
ü§ñ GigaChat: {'‚úÖ –ì–æ—Ç–æ–≤' if health.get('gigachat_token_valid') else '‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'}"""
                await callback.message.answer(status_text)
                await callback.answer()
                return
    except:
        pass
    
    await callback.message.answer("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_main")
async def cb_back_main(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", callback_data="list_chats")],
        [InlineKeyboardButton(text="üë§ –ú–æ–π ID", callback_data="my_id")],
        [InlineKeyboardButton(text="üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="system_status")]
    ])
    await callback.message.edit_text(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é TeleGuard\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("delete_mod_"))
async def cb_delete_mod(callback: types.CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    mod_id = int(callback.data.split("_")[-1])
    session = get_session()
    try:
        mod = session.query(Moderator).filter_by(id=mod_id).first()
        if mod:
            chat_id = mod.chat_id
            session.delete(mod)
            session.commit()
            await callback.message.answer("‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —á–∞—Ç–∞
            await cb_show_mods(callback)
            callback.data = f"show_mods_{chat_id}"
    finally:
        session.close()
    await callback.answer()

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("üöÄ TeleGuard Bot –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(main())
