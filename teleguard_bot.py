#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TeleGuard - TELEGRAM BOT —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–≤–µ—Ä—Å–∏—è 2.5)
"""

import logging
import asyncio
import json
import time
import redis
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.orm import declarative_base
from sqlalchemy import Column, Integer, String, ForeignKey, BigInteger, Boolean, DateTime, create_engine, Text
from sqlalchemy.orm import relationship, sessionmaker
import requests

async def safe_edit_message(callback_query, text, reply_markup=None, parse_mode="HTML"):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    try:
        await callback_query.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º callback
            await callback_query.answer("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
        else:
            # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            raise e

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ============================================================================
TOKEN = '8320009669:AAHiVLu-Em8EOXBNHYrJ0UhVX3mMMTm8S_g'
POSTGRES_URL = 'postgresql://tguser:mnvm7110@176.108.248.211:5432/teleguard_db?sslmode=disable'

# Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0

# ============================================================================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ============================================================================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [TELEGRAM BOT] %(levelname)s: %(message)s'
)
logger = logging.getLogger(__name__)

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ============================================================================
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ============================================================================
# –ú–û–î–ï–õ–ò –ë–î
# ============================================================================
Base = declarative_base()

class Chat(Base):
    __tablename__ = 'chats'
    id = Column(Integer, primary_key=True)
    tg_chat_id = Column(String, unique=True, nullable=False)
    title = Column(String, nullable=True)
    chat_type = Column(String, default='group')
    added_at = Column(DateTime, default=datetime.utcnow)
    is_active = Column(Boolean, default=True)
    custom_rules = Column(Text, nullable=True)  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
    
    messages = relationship('Message', back_populates='chat', cascade="all, delete")
    moderators = relationship('Moderator', back_populates='chat', cascade="all, delete")
    negative_messages = relationship('NegativeMessage', back_populates='chat', cascade="all, delete")

class Message(Base):
    __tablename__ = 'messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    message_id = Column(BigInteger, nullable=False)
    sender_username = Column(String)
    sender_id = Column(BigInteger)
    message_text = Column(Text)
    message_link = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)
    processed_at = Column(DateTime)
    ai_response = Column(Text)
    
    chat = relationship('Chat', back_populates='messages')

class Moderator(Base):
    __tablename__ = 'moderators'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    username = Column(String)
    telegram_user_id = Column(BigInteger)
    is_active = Column(Boolean, default=True)
    added_at = Column(DateTime, default=datetime.utcnow)
    
    chat = relationship('Chat', back_populates='moderators')

class NegativeMessage(Base):
    __tablename__ = 'negative_messages'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, ForeignKey('chats.id'), nullable=False)
    message_link = Column(String)
    sender_username = Column(String)
    sender_id = Column(BigInteger)
    negative_reason = Column(Text)
    is_sent_to_moderators = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    agent_id = Column(Integer)
    
    chat = relationship('Chat', back_populates='negative_messages')

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î
# ============================================================================
engine = create_engine(POSTGRES_URL)
Base.metadata.create_all(engine)
SessionLocal = sessionmaker(bind=engine)

def get_db_session():
    return SessionLocal()

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø REDIS
# ============================================================================
try:
    redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB, decode_responses=True)
    redis_client.ping()
    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ ({REDIS_HOST}:{REDIS_PORT})")
except Exception as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
    redis_client = None

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò
# ============================================================================
def is_group_chat(chat_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–≤—ã–º"""
    return chat_type in ['group', 'supergroup', 'channel']

def should_process_chat(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —á–∞—Ç"""
    return is_group_chat(message.chat.type)

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ê–ì–ï–ù–¢–ê–ú–ò
# ============================================================================
def check_agent_health(agent_id: int, port: int) -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ health check –∞–≥–µ–Ω—Ç–∞"""
    try:
        url = f"http://localhost:{port}/health"
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            return {"status": "error", "message": f"HTTP {response.status_code}"}
    except Exception as e:
        return {"status": "offline", "message": str(e)}

def get_all_agents_status() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    agents = {
        1: {"name": "–ê–≥–µ–Ω—Ç ‚Ññ1 (–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä)", "port": 8001},
        2: {"name": "–ê–≥–µ–Ω—Ç ‚Ññ2 (–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä)", "port": 8002},
        3: {"name": "–ê–≥–µ–Ω—Ç ‚Ññ3 (Mistral AI –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä)", "port": 8003},
        4: {"name": "–ê–≥–µ–Ω—Ç ‚Ññ4 (–≠–≤—Ä–∏—Å—Ç–∏–∫–∞ + Mistral AI)", "port": 8004},
        5: {"name": "–ê–≥–µ–Ω—Ç ‚Ññ5 (Mistral AI –ê—Ä–±–∏—Ç—Ä)", "port": 8005}
    }
    
    status = {}
    for agent_id, info in agents.items():
        health = check_agent_health(agent_id, info["port"])
        status[agent_id] = {
            "name": info["name"],
            "port": info["port"],
            "status": health.get("status", "unknown"),
            "message": health.get("message", ""),
            "uptime": health.get("uptime_seconds", 0) if health.get("status") == "online" else 0
        }
    
    return status

def test_agents_with_message(test_message: str, user_id: int, username: str, chat_id: int) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç—ã 3, 4 –∏ 5 —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    if not redis_client:
        return {"error": "Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "message": test_message,
        "rules": [
            "–ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–∞—Å–æ–≤–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è",
            "–ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å—Å—ã–ª–∫–∏",
            "–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è"
        ],
        "user_id": user_id,
        "username": username,
        "chat_id": chat_id,
        "message_id": int(time.time()),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        "message_link": f"https://t.me/test/{int(time.time())}"
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∞–≥–µ–Ω—Ç–æ–≤ 3 –∏ 4
        test_json = json.dumps(test_data, ensure_ascii=False)
        redis_client.rpush("queue:agent3:input", test_json)
        redis_client.rpush("queue:agent4:input", test_json)
        
        logger.info(f"üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç–∞–º 3 –∏ 4")
        
        return {
            "results": "sent",
            "message_id": test_data["message_id"]
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return {"error": str(e)}

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î
# ============================================================================
def get_recent_messages(chat_id: int, limit: int = 10) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞"""
    try:
        db_session = get_db_session()
        chat = db_session.query(Chat).filter_by(tg_chat_id=str(chat_id)).first()
        
        if not chat:
            db_session.close()
            return []
        
        if not is_group_chat(chat.chat_type):
            db_session.close()
            return []
        
        messages = db_session.query(Message).filter_by(chat_id=chat.id).order_by(
            Message.created_at.desc()
        ).limit(limit).all()
        
        result = []
        for msg in messages:
            result.append({
                "id": msg.id,
                "message_id": msg.message_id,
                "sender_username": msg.sender_username,
                "sender_id": msg.sender_id,
                "message_text": msg.message_text[:100] + "..." if (msg.message_text and len(msg.message_text) > 100) else msg.message_text,
                "created_at": msg.created_at.strftime("%d.%m.%Y %H:%M:%S"),
                "ai_response": msg.ai_response[:50] + "..." if (msg.ai_response and len(msg.ai_response) > 50) else msg.ai_response,
                "chat_id": chat_id,
                "chat_type": chat.chat_type
            })
        
        db_session.close()
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return []

def get_negative_messages(chat_id: int, limit: int = 10) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞"""
    try:
        db_session = get_db_session()
        chat = db_session.query(Chat).filter_by(tg_chat_id=str(chat_id)).first()
        
        if not chat:
            db_session.close()
            return []
        
        if not is_group_chat(chat.chat_type):
            db_session.close()
            return []
        
        neg_messages = db_session.query(NegativeMessage).filter_by(chat_id=chat.id).order_by(
            NegativeMessage.created_at.desc()
        ).limit(limit).all()
        
        result = []
        for msg in neg_messages:
            result.append({
                "id": msg.id,
                "sender_username": msg.sender_username,
                "sender_id": msg.sender_id,
                "negative_reason": msg.negative_reason[:100] + "..." if (msg.negative_reason and len(msg.negative_reason) > 100) else msg.negative_reason,
                "agent_id": msg.agent_id,
                "created_at": msg.created_at.strftime("%d.%m.%Y %H:%M:%S"),
                "is_sent_to_moderators": msg.is_sent_to_moderators,
                "chat_id": chat_id,
                "chat_type": chat.chat_type
            })
        
        db_session.close()
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return []

def add_chat_to_db(chat_id: int, title: str = None, chat_type: str = "group") -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ –ë–î"""
    if not is_group_chat(chat_type):
        logger.info(f"–ß–∞—Ç {chat_id} –ø—Ä–æ–ø—É—â–µ–Ω - –Ω–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç ({chat_type})")
        return False
    
    try:
        db_session = get_db_session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —á–∞—Ç
        existing_chat = db_session.query(Chat).filter_by(tg_chat_id=str(chat_id)).first()
        if existing_chat:
            db_session.close()
            return False  # –ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        new_chat = Chat(
            tg_chat_id=str(chat_id),
            title=title or f"–ß–∞—Ç {chat_id}",
            chat_type=chat_type,
            is_active=True
        )
        db_session.add(new_chat)
        db_session.commit()
        db_session.close()
        
        logger.info(f"‚úÖ –ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω: {title} - {chat_type}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        return False

def add_moderator_to_chat(chat_id: int, user_id: int, username: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç"""
    try:
        db_session = get_db_session()
        chat = db_session.query(Chat).filter_by(tg_chat_id=str(chat_id)).first()
        
        if not chat:
            db_session.close()
            return False
        
        if not is_group_chat(chat.chat_type):
            db_session.close()
            logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω —á–∞—Ç {chat_id} - –Ω–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç ({chat.chat_type})")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
        existing_mod = db_session.query(Moderator).filter_by(
            chat_id=chat.id,
            telegram_user_id=user_id
        ).first()
        
        if existing_mod:
            existing_mod.is_active = True  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º, –µ—Å–ª–∏ –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            new_moderator = Moderator(
                chat_id=chat.id,
                username=username,
                telegram_user_id=user_id,
                is_active=True
            )
            db_session.add(new_moderator)
        
        db_session.commit()
        db_session.close()
        
        logger.info(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ============================================================================
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    if not is_group_chat(message.chat.type):
        await message.answer(
            "<b>TeleGuard Bot</b>\n\n"
            "<b>–û—à–∏–±–∫–∞:</b> –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤", callback_data="status_agents")],
        [InlineKeyboardButton(text="üí¨ –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞", callback_data="chat_messages")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏—è", callback_data="negative_messages")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤", callback_data="test_agents")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat")]
    ])
    
    welcome_text = (
        f"<b>ü§ñ TeleGuard Bot - –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        f"<b>üìç –ß–∞—Ç:</b> {message.chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
        f"<b>üÜî ID:</b> <code>{message.chat.id}</code>\n"
        f"<b>üìù –¢–∏–ø:</b> {message.chat.type}\n\n"
        f"<b>üîß –§—É–Ω–∫—Ü–∏–∏:</b>\n"
        f"‚Ä¢ <b>üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ 1-5\n"
        f"‚Ä¢ <b>üí¨ –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞</b> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        f"‚Ä¢ <b>‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏—è</b> - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è\n"
        f"‚Ä¢ <b>üß™ –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤</b> - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏\n"
        f"‚Ä¢ <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç</b> - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
        f"<i>ü§ñ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Mistral AI</i>"
    )
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK QUERY (–ö–ù–û–ü–ö–ò)
# ============================================================================
@dp.callback_query(lambda c: c.data == "status_agents")
async def show_agents_status(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤"""
    await callback_query.answer()
    
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text("‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    status = get_all_agents_status()
    
    status_text = "<b>üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤</b>\n\n"
    
    for agent_id, info in status.items():
        if info["status"] == "online":
            emoji = "üü¢"
            uptime_hours = info["uptime"] // 3600
            uptime_minutes = (info["uptime"] % 3600) // 60
            details = f"‚è± {uptime_hours}—á {uptime_minutes}–º"
        elif info["status"] == "offline":
            emoji = "üî¥"
            details = "–ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        else:
            emoji = "üü°"
            details = info.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        status_text += f"{emoji} <b>{info['name']}</b>\n"
        status_text += f"   üîå –ü–æ—Ä—Ç: {info['port']}\n"
        status_text += f"   üìä {details}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    if redis_client:
        try:
            redis_client.ping()
            redis_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"
        except:
            redis_status = "üî¥ –û—à–∏–±–∫–∞"
    else:
        redis_status = "üî¥ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    status_text += f"<b>üì° Redis:</b> {redis_status}\n"
    status_text += f"<b>üóÑÔ∏è PostgreSQL:</b> üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status_agents")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback_query.message.edit_text(status_text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "chat_messages")
async def show_chat_messages(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞"""
    await callback_query.answer()
    
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text("‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    chat_id = callback_query.message.chat.id
    messages = get_recent_messages(chat_id, limit=5)
    
    if not messages:
        text = f"<b>üí¨ –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ {chat_id}</b>\n\n‚ùå –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = f"<b>üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ {chat_id}</b>\n\n"
        
        for i, msg in enumerate(messages, 1):
            text += f"<b>{i}.</b> <b>@{msg['sender_username'] or 'unknown'}</b>:\n"
            text += f"   üìù {msg['message_text'] or '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}\n"
            text += f"   üìÖ {msg['created_at']}\n"
            if msg['ai_response']:
                text += f"   ü§ñ {msg['ai_response']}\n"
            text += "\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="chat_messages")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "negative_messages")
async def show_negative_messages(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è"""
    await callback_query.answer()
    
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text("‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    chat_id = callback_query.message.chat.id
    neg_messages = get_negative_messages(chat_id, limit=5)
    
    if not neg_messages:
        text = f"<b>‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}</b>\n\n‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = f"<b>‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}</b>\n\n"
        
        for i, msg in enumerate(neg_messages, 1):
            agent_name = f"–ê–≥–µ–Ω—Ç #{msg['agent_id']}" if msg['agent_id'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç"
            sent_status = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if msg['is_sent_to_moderators'] else "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            
            text += f"<b>{i}.</b> <b>@{msg['sender_username'] or 'unknown'}</b>:\n"
            text += f"   ‚ö†Ô∏è {msg['negative_reason'] or '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            text += f"   ü§ñ {agent_name}\n"
            text += f"   üì¨ {sent_status}\n"
            text += f"   üìÖ {msg['created_at']}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="negative_messages")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "test_agents")
async def test_agents_menu(callback_query: types.CallbackQuery):
    """–ú–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    await callback_query.answer()
    
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text("‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="test_normal")],
        [InlineKeyboardButton(text="ü§¨ –ú–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è", callback_data="test_profanity")],
        [InlineKeyboardButton(text="üì¢ –°–ø–∞–º —Å–æ —Å—Å—ã–ª–∫–æ–π", callback_data="test_spam")],
        [InlineKeyboardButton(text="‚ö° –†–∞—Å–æ–≤–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è", callback_data="test_discrimination")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    text = (
        "<b>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤</b>\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
        "‚Ä¢ <b>‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ</b> - –æ–±—ã—á–Ω–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ <b>ü§¨ –ú–∞—Ç</b> - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π\n"
        "‚Ä¢ <b>üì¢ –°–ø–∞–º</b> - —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π\n"
        "‚Ä¢ <b>‚ö° –î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è</b> - —Ä–∞—Å–æ–≤–æ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "<i>–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≥–µ–Ω—Ç–∞–º 3, 4 –∏ 5 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.</i>"
    )
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "add_chat")
async def add_chat_menu(callback_query: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    await callback_query.answer()
    
    if not is_group_chat(callback_query.message.chat.type):
        text = (
            f"<b>‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞</b>\n\n"
            f"TeleGuard Bot —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ <b>–≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö</b>.\n\n"
            f"<b>üÜî ID:</b> <code>{callback_query.message.chat.id}</code>\n"
            f"<b>üìù –¢–∏–ø:</b> {callback_query.message.chat.type}\n\n"
            f"–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        return
    
    chat_id = callback_query.message.chat.id
    chat_title = getattr(callback_query.message.chat, 'title', f"–ß–∞—Ç {chat_id}")
    chat_type = callback_query.message.chat.type
    
    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç
    success = add_chat_to_db(chat_id, chat_title, chat_type)
    
    if success:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or f"user{user_id}"
        add_moderator_to_chat(chat_id, user_id, username)
        
        text = (
            f"<b>‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"<b>üìç –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat_title}\n"
            f"<b>üÜî ID:</b> <code>{chat_id}</code>\n"
            f"<b>üìù –¢–∏–ø:</b> {chat_type}\n"
            f"<b>üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> @{username}\n\n"
            f"–¢–µ–ø–µ—Ä—å TeleGuard –±—É–¥–µ—Ç –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç."
        )
    else:
        text = (
            f"<b>‚ö†Ô∏è –ß–∞—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\n\n"
            f"<b>üìç –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat_title}\n"
            f"<b>üÜî ID:</b> <code>{chat_id}</code>\n"
            f"<b>üìù –¢–∏–ø:</b> {chat_type}\n\n"
            f"–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π TeleGuard."
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
# ============================================================================
@dp.callback_query(lambda c: c.data == "test_normal")
async def test_normal_message(callback_query: types.CallbackQuery):
    await run_agent_test(callback_query, "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?", "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

@dp.callback_query(lambda c: c.data == "test_profanity")
async def test_profanity_message(callback_query: types.CallbackQuery):
    await run_agent_test(callback_query, "–¢—ã –¥—É—Ä–∞–∫ –∏ –∏–¥–∏–æ—Ç! –•—É–π —Ç–µ–±–µ!", "–ú–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è")

@dp.callback_query(lambda c: c.data == "test_spam")
async def test_spam_message(callback_query: types.CallbackQuery):
    await run_agent_test(callback_query, "–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ t.me/spam_channel! –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –æ—Ç 100$ –≤ –¥–µ–Ω—å!", "–°–ø–∞–º —Å–æ —Å—Å—ã–ª–∫–æ–π")

@dp.callback_query(lambda c: c.data == "test_discrimination")
async def test_discrimination_message(callback_query: types.CallbackQuery):
    await run_agent_test(callback_query, "–í—Å–µ —ç—Ç–∏ –Ω–µ–≥—Ä—ã –¥–æ–ª–∂–Ω—ã —É–±–∏—Ä–∞—Ç—å—Å—è –æ—Ç—Å—é–¥–∞!", "–†–∞—Å–æ–≤–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è")

async def run_agent_test(callback_query: types.CallbackQuery, test_message: str, test_type: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    await callback_query.answer()
    
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text("‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback_query.message.edit_text(
        f"<b>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_type}</b>\n\n"
        f"<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<i>{test_message}</i>\n\n"
        f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞–º 3, 4 –∏ 5...",
        parse_mode="HTML"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "test_user"
    chat_id = callback_query.message.chat.id
    
    result = test_agents_with_message(test_message, user_id, username, chat_id)
    
    if "error" in result:
        result_text = f"<b>‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n{result['error']}"
    else:
        result_text = (
            f"<b>‚úÖ –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            f"<b>üìù –¢–∏–ø:</b> {test_type}\n"
            f"<b>üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<i>{test_message[:100]}{'...' if len(test_message) > 100 else ''}</i>\n\n"
            f"<b>üÜî ID —Ç–µ—Å—Ç–∞:</b> <code>{result.get('message_id', 'N/A')}</code>\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç–∞–º 3, 4 –∏ 5 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ù–∞—Ä—É—à–µ–Ω–∏—è\" —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è", callback_data="negative_messages")],
        [InlineKeyboardButton(text="üß™ –î—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã", callback_data="test_agents")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback_query.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.answer()
    
    if not is_group_chat(callback_query.message.chat.type):
        await callback_query.message.edit_text(
            "<b>TeleGuard Bot</b>\n\n"
            "<b>–û—à–∏–±–∫–∞:</b> –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.",
            parse_mode="HTML"
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤", callback_data="status_agents")],
        [InlineKeyboardButton(text="üí¨ –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞", callback_data="chat_messages")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏—è", callback_data="negative_messages")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤", callback_data="test_agents")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat")]
    ])
    
    chat_title = getattr(callback_query.message.chat, 'title', "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    
    welcome_text = (
        f"<b>ü§ñ TeleGuard Bot - –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        f"<b>üìç –ß–∞—Ç:</b> {chat_title}\n"
        f"<b>üÜî ID:</b> <code>{callback_query.message.chat.id}</code>\n"
        f"<b>üìù –¢–∏–ø:</b> {callback_query.message.chat.type}\n\n"
        f"<b>üîß –§—É–Ω–∫—Ü–∏–∏:</b>\n"
        f"‚Ä¢ <b>üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ 1-5\n"
        f"‚Ä¢ <b>üí¨ –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞</b> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        f"‚Ä¢ <b>‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏—è</b> - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è\n"
        f"‚Ä¢ <b>üß™ –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤</b> - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏\n"
        f"‚Ä¢ <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç</b> - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
        f"<i>ü§ñ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Mistral AI</i>"
    )
    
    await callback_query.message.edit_text(welcome_text, reply_markup=keyboard, parse_mode="HTML")

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô (–û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê)
# ============================================================================
@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –ë–î –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        db_session = get_db_session()
        chat = db_session.query(Chat).filter_by(tg_chat_id=str(message.chat.id)).first()
        if not chat:
            chat = Chat(
                tg_chat_id=str(message.chat.id),
                title=getattr(message.chat, 'title', None),
                chat_type=message.chat.type
            )
            db_session.add(chat)
            db_session.commit()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
        if not should_process_chat(message):
            logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω —á–∞—Ç {message.chat.id} - –Ω–µ –≥—Ä—É–ø–ø–æ–≤–æ–π")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –∞–≥–µ–Ω—Ç–∞ 1 —á–µ—Ä–µ–∑ Redis
        if redis_client and message.text and not message.text.startswith('/'):
            test_data = {
                "message": message.text,
                "user_id": message.from_user.id,
                "username": message.from_user.username or f"user{message.from_user.id}",
                "chat_id": message.chat.id,
                "message_id": message.message_id,
                "message_link": f"https://t.me/c/{str(message.chat.id).replace('-100', '')}/{message.message_id}"
            }
            
            test_json = json.dumps(test_data, ensure_ascii=False)
            redis_client.rpush("queue:agent1:input", test_json)
            logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.chat.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç—É 1")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        msg = Message(
            chat_id=chat.id,
            message_id=message.message_id,
            sender_username=message.from_user.username,
            sender_id=message.from_user.id,
            message_text=message.text,
            message_link=f"https://t.me/c/{str(message.chat.id).replace('-100', '')}/{message.message_id}"
        )
        db_session.add(msg)
        db_session.commit()
        
        db_session.close()
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {message.text[:50] if message.text else 'No text'}...")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ============================================================================
# –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
# ============================================================================
async def startup_checks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        db_session = get_db_session()
        db_session.close()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ============================================================================
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ TeleGuard Bot (–≤–µ—Ä—Å–∏—è 2.5 - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await startup_checks()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
